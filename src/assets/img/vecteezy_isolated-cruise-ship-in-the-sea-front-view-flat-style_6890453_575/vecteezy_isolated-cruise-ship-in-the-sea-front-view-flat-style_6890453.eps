%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: travel-11.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For: 
%%CreationDate: 3/11/2020
%%BoundingBox: 0 0 2000 2000
%%HiResBoundingBox: 0 0 2000 2000
%%CropBox: 0 0 2000 2000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 11 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=300 GradRes=150 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c006 79.164648, 2021/01/12-15:52:29        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:tiff="http://ns.adobe.com/tiff/1.0/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:exif="http://ns.adobe.com/exif/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
   tiff:ImageWidth="384"
   tiff:ImageLength="512"
   tiff:ResolutionUnit="2"
   tiff:Make="HUAWEI"
   tiff:Model="HRY-LX1T"
   tiff:YCbCrPositioning="1"
   tiff:XResolution="72/1"
   tiff:YResolution="72/1"
   tiff:Compression="6"
   xmp:CreatorTool="Adobe Illustrator CC 22.1 (Windows)"
   xmp:ModifyDate="2020-03-11T00:31:59+03:00"
   xmp:CreateDate="2020-03-11T00:31:58+03:00"
   xmp:MetadataDate="2022-03-26T14:58:10+03:00"
   exif:ExposureProgram="2"
   exif:FNumber="180/100"
   exif:ExposureTime="10000000/1000000000"
   exif:SensingMethod="2"
   exif:SubSecTimeDigitized="284083"
   exif:SubSecTimeOriginal="284083"
   exif:SubSecTime="284083"
   exif:FocalLength="3620/1000"
   exif:Flash="0"
   exif:LightSource="1"
   exif:MeteringMode="5"
   exif:MaxApertureValue="169/100"
   exif:ExposureBiasValue="0/10"
   exif:PixelYDimension="3812"
   exif:BrightnessValue="0/1"
   exif:DateTimeOriginal="2020:02:27 09:48:07"
   exif:PixelXDimension="2275"
   exif:CompressedBitsPerPixel="95/100"
   exif:ApertureValue="169/100"
   exif:ColorSpace="1"
   exif:SceneType="1"
   exif:ShutterSpeedValue="298973/10000"
   exif:FileSource="3"
   exif:GPSVersionID="2200"
   exif:GPSLatitudeRef="N"
   exif:GPSLongitudeRef="E"
   exif:GPSAltitudeRef="1"
   exif:GPSAltitude="0/100"
   dc:format="application/postscript"
   xmpMM:DocumentID="xmp.did:d3403146-862b-b14d-ac4d-7a264e74b0a2"
   xmpMM:InstanceID="xmp.iid:2c1da529-7f87-41e1-9d6a-ad902dde816d"
   xmpMM:OriginalDocumentID="xmp.did:ff750850-e740-e84e-abdd-a0822e619d41"
   xmpMM:RenditionClass="proof:pdf"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:HasVisibleOverprint="False">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="140"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAjAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8+/Obz15m8i6FZ+Z&#xA;9L05dU0iynI1615iKT0JUMcLq5V6BZ2XlRSfoqcVeT+fv+cgdV1DX/KWk6Hr8flvQ9R01dU1vzFD&#xA;Cl0eDhg8UcUkcjRmN4HTrXk1D9ndV6Z5L/Pb8rdUuoPLtr5pfUdVV1tYri9iEMl3KziNeBjihhcs&#xA;zADgoqN6U3xV6birsVWyyxxRtJIaKvU4qks2rPNJxDmGLxG5+nG0mJQjzDkaNyHZj3w8THwl1vqU&#xA;qAPFJVDuN6qRiSkQTuw1CO6Uj7Mq/aX+IwJIRWKHYqhdQ1TTtNiSa/uI7WF3EayysFTkQSAWOwrT&#xA;vkZTERZNNmPFKZqIsqN5f9BDKoUqGVhVuQIqOJAIp9OTDTPbbkho9RukO7cx4Nk+ENQmUytbuO4X&#xA;bZx9pcgRTbGVq+Bk7FUJq85t9KvJxN9XMUEjieingVQkPR/hNOu+2GNXutE8ubFfJHmR70TmTVpd&#xA;ZZNKsL6SHha+pHNN6/rIq26xnl+7UFG+ztvvk8sofw1zPI2scOQVxAi65iky8yed7HRvKN95jWGS&#xA;4SyVeVm4a3m5u6xqjrIvKPdwd16biuUGdRtz9DoDn1EcNgGXXmOV9GH+QvzvXzL5mh0G501bea7S&#xA;SS3nhlLqpRDJ6ciuqGvFT8Q79u+Qhms07jtL2cOnwHKJWImqI86sUfseiWWsQ3d7NaLFIjRcyJGK&#xA;cWCSNExXizN9tD1Ay0PPZMJjEG+fv7r7nlGp/wDORMUOoJFaaSPqwdg31iZklkWhpxVEcIe+5bJ8&#xA;HLzabFHrT0vyd5qtPNGiJqltE8ALNHLC+5V1oSAdqihBBwEUtp3gVp24ozcS3EE8V6mnYYq8+l/N&#xA;7TpRA1lDHG0pWsGozC3ZkkjEqSRvAt2hURmr1px6NxzNGjPX7PwHFOpHT7fwWQeTvONv5kjuzGsa&#xA;SWrqGSNpm+Biygt6sMFDzjdaAHpXvlObCYV5/jvLbiy8bIsobUibzRJJra6VZaVd3afCZdUURrYq&#xA;hNH/AHxerOn8irWv35Ktm0Yxw8Vj3dUw1nWtK0WwbUNVuUs7GN445LmU0jQzSLEnNuigu4FTsO+R&#xA;aniH5r+R/wA6rm+u7byZr8N9oOtXYuJNJlf0prSKeB0uCZFPJ7V/iHFamrfCvIcsVeEeUvJNxqmm&#xA;6uLtYrfT9AubfTtWZ5vUtrY3lwWVCVIle2huo1MirJtVmDP1Cr0/8l9M82+RfzJtdJ88+WdPto9Y&#xA;9a30rW7WxgUi6tWKx8JbdUWNJEdqEoGbktcVfUmKuxVItcvYvrSW0jMsSDk/AAksenUjtlcpbuTi&#xA;xEi0mu7q0iDSRuwhRSzNIACANz0JyINmg2+HQssW1Dz6LYosemXkzFk9QxxiVQpaj0aNmHKg2BzM&#xA;/JzPIxcIazH1Ekw0LV9PuWkFtZtZPKPXdWVEZy5qxYKSeW/xct6nK8+OcALNtmnyQyEiIpPLa+aC&#xA;dJVO6nceI7jMYTco4bDMlYMoYbgioPscvcBvFULqdzaQWjG6UPG/wemy8wxPQcaGuNWgy4d2J31q&#xA;b6zvrS3vXtFmjVormA0MLMCfgIIouwPGo2PbbLKaOZYz+XtncPc3F81+jxxr9XNlbzzzxM54v67+&#xA;vJIQx+yAMx9Nn8UE0RRrdydVpZ4SBIcwz61kdJuYZE49pG48h4CgbLyWiI6p3DJ6kavxK1/ZbY5B&#xA;uX4q88/PS8ubTyZFPb8ua3kdQpI29OTrTsDvkhlOOMpAWQP0hswaaOfLDHKXDGUufwO3vPIebzX8&#xA;oPMkl5560i1uY3EspuWjcD92aW8pJ3Na7Uy7DlOTAZEAG/0809oaKOn1PBGRlGuvMeR/HIh6t5ya&#xA;xvvKWpv5igkisTEtvOluyB5ZRMrIEJ5/3Ui03qPtGlMwNTljjgZS5OX2T435iPg14m9Xy5G/sYT+&#xA;WGn/AJenW7nVNFsrq31TTbWaeATTCWMjj6bsaKh5Lz40O29eoFMPRavHllQBEhvv3PSdsZNYcYjl&#xA;lCWKchE8I63+z7GX+VpZR5jT42HqCQMrMWLK4aY7Hxc8vnmzBBGzrNdAeDy7v0D9j54upI/rMtWQ&#xA;MG4srNxIK/CQQflmW8o+hPyO4nyUzJvG13IUbxARFr94yjJzb8fJ6DlbNTubi2treS4upUht4lLz&#xA;TSsERUUVLMzUAAHjirBp9f8AyPt1q9/oDHj6XGOS1lfgwIK8ULNxIO+1MyInKeVtJGMdy1/NXkCG&#xA;4tpPKmoaHNrF/cLblluIWfjOzOeSxv6n2z08TlObxzGo9O+6ptxeEDZ+xkdpeXmoaSgvfTjkku5b&#xA;SdoeQQrBO8bAVJI9T0uPXvlWMZAPXXF5d3RnPhv03XmnIaFGWFSqsFqsYoDxG2w8MmxeN/8AOSl9&#xA;53h8lazFb2ml/wCDns0Gp3V3K4vDI06LwgQAxgnkvEmpqD34gqvEvIk3mryv550q+1PR4Nd1LU7a&#xA;K30O41C6aFudtFHC8FnITJCt3Q8V9QVq2zfF8Sr3jyl+U2meUPyV17QHQPPqVlfSX10yASuJIXEX&#xA;qKwPFo46VSrBX5UO+Ksu/KfVpNc/LLy1qF2RLcSWMAneho00AEbNRtwecdfY4qy7FXYq8q/Mzzeu&#xA;gatxEZnnkkjLRcXAMJWjMJAOAZTTYnHFpjlkeg/T7nMOpGLHHaz+jfryQflzzBH5l00jktvcMQs0&#xA;MTeo6BjtXmij4uJGwI60OV5cZw5B1DdikNRiNek/cl5tore81S2MBhWxt72aOSW3hIne2lEccaBo&#xA;/tzqeS0rt45tuYBvnX4+Dz1bnbvRvl23QWNzqhjltvq1w9v6PppWVBCknMcUViOTUAHUr9GYmulQ&#xA;Eed/Y7Ds2FyMt/T9q3T/ADbJdX6W5h4o7GNW3BqtTyNfEDZaZjZdLwxu3MwazjmI1z2/H6nr+n8v&#xA;qFty+16SV+fEYx5Bxcv1H3q+SYMf8xOzlogKv8KQDcUdtw21D8PU07DJjk0zO7wz8+ruSyfS9JtZ&#xA;HjtEgklkiDGjF6ojNU/ERw2r07ZjamVUHsfZTSwmJTkASJCvKv7XlVnq19p99DdWUz29wnFopFIB&#xA;ryFCPormIJVyexy4IZYGMhYfXVyuoXckdpps6W8r8XkumT1eEZr9haqCxptWoFNxmzyCRGxp8gwm&#xA;Il6xxeV0yyNWSNUZzIygAyNTkxA6niFFT7DIthXYoYp+ZuiaXq/lZ4NS1hdBt4Z4Zv0nI8aRxkPx&#xA;4t6pVDzVyoqepHXpluLKYGwwnjEhRYFpCflJofnXTtRsvO8TCzWZXtZZoJIJJJoyiMbiNUjXirNU&#xA;FutOlDWyeolKNEBrhgjE3umXnfXF1T8sb25sZLa8tLS7gt2nsbqO85CkYZpGiqPUMsv2dzQhu+aX&#xA;tLHOeEgDqHo+wcuLHqYylKhwm77/AOxjH5U6LqcHn2Ozv7Ka2KWc1xPFcxPFyhcGEUDhagu9M1XZ&#xA;Glywy3IECnofaHX4Z6eoTjKXEKo3Xyem+U9G8sySWF5YWV3bSWNsk1pJcSlvVivEZVkYLJIGPFDs&#xA;1KV6Z0kJyN3Ex99foJeS1GuyzBiZCQlzofsCV61o3l/ytHZ2Nh5Pg1iO9kcG4mCPI88snL03kkjm&#xA;ZmbmSGkIUAU5YZZBGrNW6/hJ5C2aeX9A0zy/pFvpOlxGKytuXpoWLGruXYlm33ZicKphirxX/nJm&#xA;6uBpui2POtlM1xNPbkAq8kJhWMsD14iZqDpXfqBmy7MgDMkuDrpER2fP80UVWKwQ8juKxJTffwze&#xA;EbbOq4t92c+SPKmiahpU893ArmcmCRFVEUx8lNNlr1Xxzzn2p7e1GDVDDDhEY8Mu82QXr+w+y8eX&#xA;B4kruVj4PX/IerSC6tvKJVzZSW8lzb3bSBpo5Ld4yDVgS7cmDfEDU9c1/YHaOXPKQlVXfxlv+t2H&#xA;aejx44Ag+rlXkGa2Nndtq8ou2h9W3mF0HjUh5VkgMKHcngq/GKVJ2+/qXRr/ADd5S0jzXpC6Tqys&#xA;9kLm2unjUgczazpOsb1DVRzHxcfyk0IO+BWGaTZaE35ka95U1q0SZhd2vm3y4ZhvyKpFM0JB/wB0&#xA;XMHKn+X4Yqg/zd/ODyNB+Xvme10vXrG/1draSwSytZ4p5hLdVgqIw3xenyLEdNqd8VZN+TOkvpX5&#xA;VeVrKRBFIunQyvGBx4tOvrEEVO4Mm+/XFWZ4q7FWF/mH5Kj8wrbuxASFubKTRS6qyxlgAagc6/MD&#xA;BEzjLih1FOTDJjOPhyXQNivd1+95TqJ/Rnkm+utHmgt9Utpg+p2QZXljlVlgmPpEGi8vi8O+ZmHB&#xA;M5wZ7xrb7w4+fV4vy5jjuM7s/p/W8/m8za9c2Zmlv5/UFRVXZR1HZaDNuMcQeTpDMnqj/wAv/Mfm&#xA;vU/ONhpCXhlgmlJkWVQ3wRKXb4qcuinvmNrcMTjltvTl6LMY5Ykna3r2hRaZqHmsafbTxfD6huN2&#xA;Bkk5qzcOYHIqEY7Zo5aXIIery+W7vR2hh8T0A8j/AKax+p66AAABsB0GTcF2KpL5m0yW7tCYJ2tZ&#xA;gGUToAzJzVk5LX9peW3v92HmKRfDISq6PLvfNP59ytH5l06wMzztaadDHLNIBzdw8nxsR1LdT75i&#xA;ajmB5PfeymMHFPJVcc/gB+C8zjbi6t/KQfuzHeqIsU+w/IN1ezWWlXMsQMd7aQzF1p8Ia2SlTXrU&#xA;dAtN9u+bMG4vjWphw55x7pSH2s5wMXYq8w/5yEoPJ1g3QpqUZU+B+rzj9RyUeaC+fJblfUq0x2qA&#xA;vKo3p2+jJsXrf5Ja/pmi6N5u1y+dhZ2MFrNcMoqxEZuaKoJFWOyjK5mmzHAyNBmug/mANe8l6ncW&#xA;7Xdvqumyrb3iXqRRXCmVkdG4wkx0aKQcSPDxzV9qZpY9NOUTUhW/vIc/TYYyzRsDhlffWw890P5F&#xA;1K9OvQQNKzQvCYih6cIkJjUDwXtnL9g63NLUiMpExIP2B2vaengMRIABBeQfnB5s1G5/MDVoRqs1&#xA;vbac1LCBZJSizRLGjBAv2GZkY1/HOtzyPE7zsLSYxpoyEeIy2l7t+/8AQ95/KLVr/Vvy50a/v53u&#xA;buWOVZJ5SS7enPJGpYncnio375lYjcQ8j2zhjj1U4xFRB/QGYZY6x4T/AM5S3At7fy65Hws14la0&#xA;FT6BA/4XNr2V9Rdf2h9IfP8ALfyGnFQNhWu+bwB1Rer/AJXyM/lzm/UzNv8AI5457Z/8aEv6sfuf&#xA;Q/Zz/FB75PNLnX7tfNo1m2vmt9ZjujPZ3PqKGgQNF6dqVqPtLzB7fFQ15HjutCBgwxxgequfS+92&#xA;Go7LOTMchmPCBAkLHFtQIA8ydvf3vtK01GDUbHSdetVKrdRQv6bU5iG9CMFNDQFWKMfYHxzbxNi3&#xA;lMuMwmYnnE0nGFg8M/OX8sPzq86+ZrS+8v6jo+iWOlCRNNuVubyO/ZZ1Cy+s8duy8Wp9hSQPE1xV&#xA;5V/0Jl+ZDaWYX1DQhepKhglWW6X9yVf1FdhbDkeXDjVT337Yq+gfyh0D859DinsfP+sabrNgkajT&#xA;p7UytdI4NCsjNBbqyce5q1fbFXo+KuxVSu7WC7tZbWcFoJ0McqhmQlWFCOSkMPoOEGjaCLYTJ+T3&#xA;kuATmx01I/rEUkDkPJzCSqVahZmHQ9cyfzczzLjnTR6Bilx+QOhlGignvII2apUcX28Kke2XjXS8&#xA;mk6UJ35K/JnQvLWotqVqJXvGVoxPcMDxVqcuKCm5p1ynNqpTFFsx6eno1vbRwJxTqftMepzFJtyh&#xA;GlXAl2KrZYxJG0Z6MKYhBFvOPNn5MaJ5l1hNUvBJHdLGIpDHIVSRV+zzAo1V9iMjPHGRsuw0fa2p&#xA;0+Pw4EcPuCTyf843+WHjK+o8daVMDurUHb4zIv4ZDwIuVH2i1g/iB94H6npWi6HHpsFvbQxiG1s4&#xA;1htoQSeKIoRRU16KMvsVQdLIylMzlzJv4lN8il2KsM/NryLeedPKLaVYXS2eoxXEVzZzSGkXNCUc&#xA;SfBISpikelB9qmEFXnw/5xhNBy8zEt3IsgN/+R5w8SKTLR/yO1fTvy68y+XjqsU+ta1MrW96UKwL&#xA;HayiS2UoFJQmhLH4uJbblx3qyxMhTl6LOMOUTI235c9wRt7rtv8ALH8m/MvlPyvr2nXl7ZTXuptb&#xA;/VBCJDCi27M/xsUib4mkOwXbrU1oMLJofExSxyP1d3lv1/FOy1vasck4ShGuG+ddQByFd1+8sy0P&#xA;yNdaTrdtei8juLeNJRIpjKPyYBU4/E4pQtX6PHbX9m9gx02TxDPiI5bV89z+hx9X2mc0OERr43+p&#xA;5r5o/wCcdNd1zzPrGrnWLeKG9upLi2QpI78ZSW4OKKE4147Fq9dumbeWAk3bvNH7TY8OGGPgJ4RT&#xA;038rvKOoeUvJ1romoTxT3MMkzs0JZowJJCwVWcITsa/ZH8TdjjwinQdq62OpznJEUDTLMm65if5k&#xA;eQovPHl6XQ7q4it7d2SWKZoPWlinjJpJGTIij4SV6dCd98lGVIItjcX/ADj35BjiSMabaEIAoLfX&#xA;yaAU3P13Mga3KBQLSdNjPRf/AMqStbUsmi6iNItmRQbeGKaVA4kDtIouLmUBmQFPDv1zU6/QYdXL&#xA;iyi5d/I/Y52l1M8EeHGaHz+9iFz/AM4nadNqT3aeYXiiLs0cAtAxQF1YDm0xJ4iNVUkVx/Jx7z+P&#xA;7Xdj2jy7XCBIB3rmfSbI7/SPxy6ZpH5ftpF7PcWN5FFHcLaLJb+hIY+NhGI7dRWfkAlOWx3PXbbM&#xA;wAAUA6PLqMmT6jdWfmbPzLMMWl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRkvLaNuLvRh1FCf1YaYmQDS31sf2/poaY0V4grKysKqQQe&#xA;hG+Bk3irsVdirsVUrm8tLWF57qeOCGIBpJZWVFUE0BZmIAqcIFoJpZp+oWWo2cV7ZTLPazAmKVeh&#xA;AJB/EYkEGioIIsIjAl2KuxVBHXNIW6W0e7jS4c0jR24cyHEZEZagchyFPGtCQDvkuA1dMeIcm59Z&#xA;0m3meG4vIYZUIDLJIqEFgCB8RG9CMRElJkFDWPM2g6Np66hqN4kNnI4iilFZOcjAkIgjDFmIU7AZ&#xA;VkmIC5bN+n0880uGAsqmh67put6VFqlhIXs5ufF2BQjgxRuQO43XvjCYmLHJc+CWKZhLmERY39hq&#xA;Fql3YXMV3aS19O4gdZI2oaHi6EqdxTLDEg0WgEHkr4EuxV2KuxV2KuxV2KuxV2KtGRA4QmjMCVHi&#xA;B1/XiqlcXlvbhTK1Of2QATX7sVVUcOoYVAPiCD9xxVvFXYqlVn5k0y+E62jv61ueMkVxDNbPXvRZ&#xA;0jZqe2LKcDHmxH8yJC3lPVH+vSWAYRn67ECjpWZKqOLE/F9mte+ZWnvjG1uFmqjul40eLS/Oeh+j&#xA;q16TLBe8rS4nlmWZY1jA+0aDgXrlhmZQOw6MOGpDdnNvd+lSVPsE0kFPgNfA9K+2YhcgEjdOgQQC&#xA;Oh3GQbnYq7FWNee/OA8s6Ws6Wstzc3BaO3CL8CvwJUuxKr1H2eVSK06HB6iaiLLbjhAgmchGI+fw&#xA;Dwez8teafM0935i1OeSWB3ihub1nKqDJKsSxwbUZlMldgAOm3fIx4JQsmQ8WXyA/H2o1OrhlAxwj&#xA;w4Y7/wBKR7z+P0PpXTdOs9N0+20+yjEVpaRJDBGN+KRgKoqeuwykkk2WoChSIwJdirsVYhf6XbPp&#xA;NvcG0aaKW0XTtTgiR5nEacl4lVJYiN2kRgiEnlU7Ll9m+fWw1UK+FFCTeVbXUJlk1WORNWESPqt1&#xA;68ap6SkxJM1IynORIOZRFCqajl0Jl4hA25dGHhgnfmqXv5f2s/kdNG0u5WWVZob6xvnKKPUR1cSV&#xA;jRk+KMFa8DWtaHMLWw8eJiersOz8w08wTuNwfj8kj0vWfJmh6Jrug6vrE9xHLPcRai0Vpd8IJJFC&#xA;TRidIjHUneo4ip6ZLQdnZMUBHn3cv12jX9oQzSsDhoV+PwWVeRPy/wBL8mW15b6dcTzx3kolKzMt&#xA;F4ig4ogRAd92CgnbwGX5cpnVuJjxiLKMqbHYq8V8yfkz5s1LUdRuILmyb63ey3S3Ms04meKRjwik&#xA;UJ6YEX2hxH8KYWTTyN79Xf6btTFDhJEto1W1A949/X9KB1X8nNQtI/Tm1yxjkb0TbxXMjr8ciD61&#xA;ISI67zKOJ4/Z+0RTKcwhj2nOMe6zXv8AtbMXaInREJdeKhf9QfAbMg0j8rfMw8q3+nLrNtDa6jEW&#xA;TT7YPLau4t0WGX6w1JE5SoHfgpU+FPhzJhiJhsRv3cuX4LiZNfDx4z4T6SNzz+ok7cuW36U3/K/y&#xA;Brvli81K51O7jkW7WNI4IZHkUlCxMjF0j3+L4fAGnbLMWMxJJ6uPrdXDLGAiK4Rv9n6v009By517&#xA;sVdiqVanNaXEBHPjNGzKo6EHoa+xpiqAa4meaO4H99GgWhA+0Nu/TY1xVG2V1qU8200TL+0ppUDa&#xA;tAN9sVTfFXYqxrzDq0EjS2gDVhICPtQ3HHkirvXl4bUPT2yYDVOTzj8zPMcl0LzyxHxgiYRC5uGU&#xA;ux+xMAlHQKOgNa136ZmYce3Fe7jSyAGiLH47qSJPMnmD9M2eqT3/ANaazEyxwzQJwpOFDf3ZjatF&#xA;8ae3i49Pwggkm/d+pszaqMqqEY1/W/X+3zeu6Fqx1bSoLv40jmjdWh5sVVkqjL2qAy7GmY04cJpl&#xA;CZIZTApWGNT1CgH6BlJbxyX4pdiqT+bL23stIa4mtY7zjIgjimUMgcmgahB6Zgdpa46XCcgFmwPm&#xA;5Ok0wzT4S87fzHcNpd5YcIwl7O105EZ+Fy6yUUc+gKjOOPtDkMSOEUZcX28Xe78dlxsGzYFfZXcz&#xA;vyZ5th8x2l06oUnsZvq9yPTkRefAP8PqDwbsT28c6/szWS1GPilHhP3h0uu0fgSABu/d+hkObFwX&#xA;Yq7FUpmttZieKGzmQ2stw5uXCATRRv6khZWZmRjzKrT0+mWAxPNgQejxzXfzv0FNSSHy75b1DWtR&#xA;R5ZbkXckiho7ejCVYg83OnHknJBw7CpzPjppAes8I/H483GlmBPpF/j8e56l5F8/ab5r8qr5iCCw&#xA;gDOtwksilYylDvJRRTiwJ2FOmYOTCYS4XJjMEW8+1Tz9pY8u+bbJGV7651GaTTYxA7JNFWLi5AG9&#xA;eDfF9OWCQGSIPFy7j+pl+WmccpAxq/50f1vYbHULG/t1ubKeO5gbpJEwYV7jbuPDMcgjmoIV8CXY&#xA;qwL8zvzKfyyLfStKhF15gvhWGNgSkUZPESOB9osahR7VPgcbUZ+DYbyLtuzOzRnuczw448/N5uun&#xA;a7rE51DVvNl41xLC4DWVURWJBWNRziHCteVFG4znc3bOKOQxlxGQsWB9m/Q/gO3OLh/u8cRHulv8&#xA;ff8ANMtI8yeevJ1lHfPdt5g8sW/px38Mg/f2ocBQVYljxqCqfER4ha5m6DtIZY8UPpjVj+bfd5d3&#xA;3Bqy6HDlqBHBm6HpKu/z/Fl7TpWqWWq6bb6jYyCW0ukEkLjwPY+BHQjsc3sZAiw81kxyhIxlsQis&#xA;LB2Koe+uWtofVChgGAYd6HwxVLNQvtFEdxeXY9G1tUMk901FUBQSa9yfAYCa5soQMjQFliXkzzvb&#xA;+Zbq7TTNNm+o2yNK97OVVQVaix+mOXL1VqQSex2yUaMb693l3/YnLjMJ8J3rqO/u946s3h02NHiu&#xA;bU8STyKtuCjdVGBgmOKuxVi99br+lIgyD1IzJIJKb0A4gV9/Vrlgcc83in5pSyx+abzgeIZo6tsO&#xA;lvFQVIPXJ58so441s5nZunx5MkuIWRW3P40CLpjljqpCAOxYVIDEbEfR/DMvSSM4WXD7SwxxZeGI&#xA;rbl3PffywjW58rWUg+wTKxr4GeQ0/DMbUbSLHALDOcxnKdirsVYx+Yh/514e9xD/AMSzQ+0f+Lf5&#xA;wdp2R/ff5peNebtebQfL11qaRiaaGM+jCT9p2AA7itOpFegzh9BphnyxgTQPN6eV8MjEWQCfkCUp&#xA;/JL8z/M2meeE0TW0E+neZLkq8vp+k1teCKMIq8djUusbo1GFVY0rRvS8GCGCIjHly+8vIkS1HFLr&#xA;EcXw2D6izLcJ2KuxV5j5KuyfzN80ySSlbdElaQu3wD05goYk9KIv3Zk5vpiGnFuZHuP62FS2n5WW&#xA;Xma51K08x61aSSGSJLnTY4xAkMpJeM+pDM0ig9GC+FN98y5TyTiAYx+LjRGOJNEs21Xyz5Z0H8pL&#xA;uDy5KX0tzDdrPz9T1m5RJzLCg/YU7DqPHMYZZHJcm84xwVHq8ftNcEjGJiQN6fEOnvQ5PDqo5JUA&#xA;2avs2eCAkTY+P6eb2r8mJA+j6hxaq/WQadq+morTxoBleq5hq03IvQ8xXJdirynyXplnr35leeL/&#xA;AFSNLhrWRdPigkUMBES0dRXp8MAG3icw8I4skyfc73WzOPS4Yx2u5fH8FiGoi806a7FqOZLyrAG+&#xA;IPJ6jBOVOj1+fLpsRvyBGPWSo+nNE/6YWftd1DaIv6aHw2+77mc/lXZrc2Os2N1I19Y3X7v1JV4l&#xA;4iGQhlBNORZtq/dm47FlEznAQEKjEGu/f9BdJ2oDDhkCeKyed1y5N/kHcSnypfWLMzxWGoTRQOTV&#xA;eBVGov8AsiT9ObjR/QR3Fj26B4wl1lAE/b+p6XmW6V2KpZqtojcWRS08zqgNTQfR8hirHfNuiaLP&#xA;pnPV1kk05ZfjjjajeorFV26NX3/DMbV6yGmh4k+Q+Lfp8U8kuCBon4MG/Lq7802HmdbKWZE0JxNC&#xA;8AhgRWiRHeB/VU+qZfUchuS7rQk12ynT9u6XPGEOInMQL2P1Vv8A0fl9zLJ2bmxSkeGse9bjl083&#xA;smlEnT4a+BH3EjM9xkVirsVSfzBaTMsdzbkLMoaM1NAQ/vRqEEVB4n5ZKLXMdXz75wstYsPNVto9&#xA;1Hc6veXtvC0d4iLI0xjiCSMUT4vhMZ7VpufHNjhMDCiR7i42YTMzkjHhF/w3Q+0lLdestS0iwN5f&#xA;aVdi3QgF/QdVUtsCXYKq77dcujOPeAHHGOcjQBJL3z8r7S4tfKthFPGYpDCJHjNCV9VmkCmncBqH&#xA;NbqJAyJDnYIkCizDKG92KuxVi35lTxW/lSa6mJEEEsLysqliB6gUfCoJPxMOmantrS5M2nMcYuVg&#xA;/L3ud2dmjjy3LYUQ8B/NiPU7bQbW9FvKlvG5KPIjonrFP3JLUGxow+nOX7EwSx5T4kZDbu+fN7LT&#xA;zExIY5R4+H0+rzHdv+O55T5Wa/GtQ22nWscN3cTpDF9VqkrXY4PD6fELX4ieudJGXmSdq+bnZ8Qo&#xA;3DHjgDIT4fTfovoBxDeXN9+5unzF2KuxV5d+ZflePQ/J+v32lPMTqk9s+qB2BCwpKSQnFVIXlL8V&#xA;SfhzLw5OKQB6OLlx8MSR1YToWgaFqvk/VJYfUbzFYH6yiBzwa0HEMBH9khQSTtyrTem2ZM5yEx/N&#xA;LjxiDE/zgmuhzTWv5F69NciQ2K3hazPFmH1cywcmQAE8BL6hNPfK5RBzANsCRiJeaQDSpbb61HIG&#xA;gZSyyFjRVHWlelKd8txaUY5bc06ntDJmiIyqvIVfve2f84/SRz+WL+5t2L2r3fCKUqy8ikS8qBgN&#xA;hUb5j60VIAp0n0l6jmE5bsVeS+aXuvIP5hnzcsDTeXdbRYNVES7wyinx08TxDCvX4hmFkvHPj/hP&#xA;N3+mA1en8G6yw3j5ju/Hkg9I0ybzQb+fSViurJbmRA5kVealiyvxPxAMG7jr8s5DL2FqPEMsREhd&#xA;3def6XLGvjjAjkEoSHkkCedtb8sahf6Xpai41K8d7IW6gO3rgUjnXjvzVnpXcSd9xyPQ6Y5MY9Yj&#xA;40hR4fLlfnumOmx6kcUrjihvZ7uoHl933db/ACy8py+V/KNtp9ya30jNc3tDyAlkpVQf8lQq/PNr&#xA;gx8EQHRdo6rx8xmOXIe5lWXOC7FXUGKsO/MAtFpE0JHwTTRSofcGjD+OaD2k/wAV/wA4O07H/v8A&#xA;4FhOlV/SMNBU+qvTw5LXOR7Kv8zCv5/6nea7+5l7nsFiqraRKpDUUVK0Ir1PTPTXj1fFXYq06K6l&#xA;WFVPUHFUou/KWgXl9BfXNqJLu1qLeUk8kDdeJ98NoAoUv1XyroOrW31bULRbiCoJjcsVJBqKiuJK&#xA;xFckxt7eG3iWKFeKKKAdenzwKAqYpdiriAQQehxVLZ/LmiTxNDParLE+zRuWZT8wTidxRUKdz5U8&#xA;u3Vm1lc2Ec1m6hGt5KtGVHQFSaUFMTvzTGRibGxQVj+XHkOwuEubHQbK0uIyWSaCFY3BZSpIZKHd&#xA;WI+nIiIHRtlqMkhRlIj3lPra0t7VCkC8FJ5EVJ36dyck0quKuxVZPBDcQSQTxrLBKpSWJwGVkYUZ&#xA;WB2IIxBVj/lv8vvLHlzUJ77SoJIpZ0MfFpXdEQkMVRWJ2JUda+2WzzSkKLXDFGJsJ3qOn2mo2FxY&#xA;Xkfq2l1G0M8dSOSOKMKih6HKiG6MjE2Oanp+k2en6XDploHjs7eNYYF5uWVFHFQHJLbAeOKCd7U9&#xA;B0DStB0uLS9Kh+r2MHIxxcmehdizfExJ3JxTKRkbKYYsXYqp3Ftb3MD29zEk0Eg4yRSKHRgezKag&#xA;jEi0xkQbHNgGo/kR+X95cNMkFxZ8usVvLRK+IDiSn0bZjS0eM9HbY+3NTEVxX7wnvlf8uPKPllxN&#xA;plkPrYBH1yYmSWh8GOy/7EDLMeGMOQcTU6/Nn+uVju6Mmy1w3Yq7FXEVBFae+Ksb1nyTDrFvJBe6&#xA;rflJCDyja3Rl4kMOLLCCOmV5cUckeGQBHnv97KEzE2DRQY/LLSVvLe7j1C+jktixRVaDgxZePxr6&#xA;NGp1Fe+Y2Ds7T4pcUIRB727Jq8sxUpEhO7DQWspxKmo3Ug/aik9Dg3z4xKfuOZrjprirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVad&#xA;0RGd2CooJZiaAAbkknFXkN3+fMUCh4o7W5UuVCxM/IAgkMeXEUFKH3zKGLHyMgPiGHDnqxjkf80o&#xA;DR/z2mjs47Wf05JolNbu75LzqxpX0y24GCOHGBvOJ+IZ5PGlIkYpRH9U/qet+Wdbh1zQbLVImVlu&#xA;Y6u0deHqISknGu/HmppXKJxo0gXW4opnkUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxVC6pBfz2EsVhOLa7YD0p2UMFowJqD4jbJRIvdEga2eJXkUOm6jJ&#xA;pf1dHljaJC8ccRWrtFwILych/fr+z45sQDIW4BNGlms3FtZalLYXFotEdeTJHEymvEVDM8TU+P8A&#xA;lxhEkWCspUaet+S9K1DTdKENzPHJD1tYIk4rEpJY79SSWzByyBLmY4kBP8qbHYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxrz/AOcYPKeiJqU3ECWdbdSy&#xA;s45Mjv8AZTf9jxy7Bh8SVNWXJwC3ht/+Y+lX1xJdw2H1iVmUs83FfiX0+JXZiP7lPuzZx05Aq3Al&#xA;mB3pJZvzEsJruS51CzkMnIF3/dzE8TQbkRN2H7WS/LSHKTIaiB5x+L278rPzPsPNkk2n29TJaQiV&#xA;iUZGA5BfiJ+E1r2zX6jTmG7lYcvFs9DzEch2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KsH/OnRX1X8utTSJec1oEvIxSp/csC5/wCRfLMnRz4cgaNTG4F8&#xA;vaZDcKJQY3AABqVO2buZDqgEu1S1ukaZDE3JGJkoCaCvU07Vw8QpIG73r/nF3QJbbSda1ieMo11N&#xA;Haw8gQeMKl2IB7MZR92avtCdkBz9JHYl7hmucx2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KoDXuH6Hu+fq8PSbl9X4erSm/H1f3df9bbJR5olyfL99/in6&#xA;3/uN+senRq+r6NaczXn6Xw1p049umbmPBW7qzxXsgYP8VUf1vU41HL6v6VeHpb8f2ePCn4ZM+GxH&#xA;E+kfyw9D/CFp6P1nj8XL636Pqcq/F/cfD9r+b4vHNPqPrLssP0ssyltdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir/AP/Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Isolated Cruise Ship in the Sea, Front View, Flat Style Illustration</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Isolated cruise ship in the sea, front view, flat style illustration. Vacation, travel, holidays, cruise concept. Seaway line connection transport. Sea cruise liner</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>advertisement</rdf:li>
     <rdf:li>boat</rdf:li>
     <rdf:li>bon voyage</rdf:li>
     <rdf:li>cruise</rdf:li>
     <rdf:li>cruise liner</rdf:li>
     <rdf:li>cruise ship</rdf:li>
     <rdf:li>cruise vacation</rdf:li>
     <rdf:li>cruising</rdf:li>
     <rdf:li>holiday</rdf:li>
     <rdf:li>icon</rdf:li>
     <rdf:li>isolated</rdf:li>
     <rdf:li>journey</rdf:li>
     <rdf:li>label</rdf:li>
     <rdf:li>liner</rdf:li>
     <rdf:li>luxury</rdf:li>
     <rdf:li>marine</rdf:li>
     <rdf:li>nautical</rdf:li>
     <rdf:li>ocean</rdf:li>
     <rdf:li>poster</rdf:li>
     <rdf:li>sailing</rdf:li>
     <rdf:li>sea</rdf:li>
     <rdf:li>ship</rdf:li>
     <rdf:li>shipping</rdf:li>
     <rdf:li>summer</rdf:li>
     <rdf:li>tour</rdf:li>
     <rdf:li>tourism</rdf:li>
     <rdf:li>travel</rdf:li>
     <rdf:li>trip</rdf:li>
     <rdf:li>tropical</rdf:li>
     <rdf:li>vacation</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>vessel</rdf:li>
     <rdf:li>voyage</rdf:li>
     <rdf:li>yacht</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:71a27fa0-4d38-45c9-a678-db90249f363d"
    stRef:documentID="xmp.did:ff750850-e740-e84e-abdd-a0822e619d41"
    stRef:originalDocumentID="xmp.did:ff750850-e740-e84e-abdd-a0822e619d41"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:ff750850-e740-e84e-abdd-a0822e619d41"
      stEvt:when="2020-02-27T10:38:04+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 22.1 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:d3403146-862b-b14d-ac4d-7a264e74b0a2"
      stEvt:when="2020-03-11T00:31:59+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 22.1 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2cb002f3-d656-4fde-9eba-91814f405b98"
      stEvt:when="2022-03-26T14:56:43+03:00"
      stEvt:softwareAgent="Adobe Bridge 2021 (Macintosh)"
      stEvt:changed="/metadata"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2c1da529-7f87-41e1-9d6a-ad902dde816d"
      stEvt:when="2022-03-26T14:58:10+03:00"
      stEvt:softwareAgent="Adobe Bridge 2021 (Macintosh)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="2000.000000"
    stDim:h="2000.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="cruise ship"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=15 G=70 B=140"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="15"
         xmpG:green="70"
         xmpG:blue="140"/>
        <rdf:li
         xmpG:swatchName="R=42 G=85 B=140"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="42"
         xmpG:green="85"
         xmpG:blue="140"/>
        <rdf:li
         xmpG:swatchName="R=96 G=133 B=166"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="96"
         xmpG:green="133"
         xmpG:blue="166"/>
        <rdf:li
         xmpG:swatchName="R=191 G=46 B=33"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="191"
         xmpG:green="46"
         xmpG:blue="33"/>
        <rdf:li
         xmpG:swatchName="R=217 G=217 B=217"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="217"
         xmpG:green="217"
         xmpG:blue="217"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                          
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
2000 2000 li
2000 0 li
cp
clp
1414.03 751.7 mo
1414.52 746.296 1413.96 741.071 1412.6 736.16 cv
1104.64 736.16 li
1050.43 724.714 li
999.995 725.798 li
949.557 724.714 li
895.354 736.16 li
587.389 736.16 li
586.029 741.071 585.466 746.296 585.965 751.7 cv
595.096 850.555 598.923 983.414 569.431 1063.98 cv
699.862 1029.19 843.265 1003.7 999.995 987.756 cv
1156.73 1003.7 1300.13 1029.19 1430.56 1063.98 cv
1401.07 983.414 1404.89 850.555 1414.03 751.7 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
1430.56 1063.98 mo
1430.56 1063.98 li
1430.56 1063.98 li
1419.76 1034.48 1413.43 997.96 1410.19 958.667 cv
1413.43 997.96 1419.76 1034.48 1430.56 1063.98 cv
569.431 1063.98 mo
586.769 1016.62 592.592 951.179 592.591 885.202 cv
592.59 838.953 589.728 792.439 585.965 751.7 cv
585.844 750.391 585.786 749.093 585.786 747.807 cv
585.786 747.29 585.795 746.776 585.814 746.263 cv
888.682 763.644 li
882.636 767.284 878.544 773.625 878.398 780.824 cv
878.044 798.168 li
877.815 809.34 887.204 818.323 899.031 818.323 cv
899.13 818.323 899.231 818.322 899.33 818.321 cv
911.298 818.169 921.198 808.967 921.398 797.809 cv
921.705 780.629 li
921.81 774.71 919.174 769.376 914.896 765.673 cv
948.493 768.48 li
948.879 768.512 949.263 768.524 949.649 768.524 cv
949.723 768.524 949.796 768.523 949.87 768.522 cv
999.528 767.454 li
999.994 987.756 li
999.995 987.756 li
973.402 990.461 947.187 993.441 921.359 996.695 cv
796.78 1012.39 681.087 1034.45 574.085 1062.75 cv
574.062 1062.75 574.043 1062.76 574.019 1062.76 cv
573.805 1062.82 573.604 1062.87 573.39 1062.93 cv
573.342 1062.94 573.299 1062.95 573.251 1062.97 cv
573.029 1063.03 572.808 1063.08 572.586 1063.14 cv
572.554 1063.15 572.52 1063.16 572.488 1063.17 cv
572.274 1063.23 572.074 1063.28 571.86 1063.34 cv
571.812 1063.35 571.77 1063.36 571.722 1063.37 cv
571.238 1063.5 570.735 1063.63 570.252 1063.76 cv
570.236 1063.77 570.21 1063.77 570.194 1063.78 cv
569.941 1063.85 569.684 1063.91 569.431 1063.98 cv
569.431 1063.98 li
614.07 856.112 mo
614.742 861.061 li
615.175 866.021 li
615.464 869.318 615.581 872.645 615.765 875.947 cv
616.04 882.575 616.195 889.201 616.325 895.83 cv
616.556 909.089 616.549 922.353 616.467 935.613 cv
616.501 938.929 616.429 942.243 616.404 945.56 cv
616.35 950.532 li
616.25 955.504 li
616.225 962.138 615.954 968.763 615.851 975.398 cv
615.493 988.666 614.964 1001.91 614.07 1015.23 cv
617.231 1002.24 618.973 988.94 620.145 975.647 cv
620.76 968.997 621.146 962.33 621.472 955.664 cv
621.66 952.33 621.733 948.994 621.805 945.658 cv
621.873 942.321 621.988 938.985 621.997 935.648 cv
622.112 922.3 621.675 908.945 620.638 895.624 cv
620.386 892.294 620.059 888.964 619.72 885.642 cv
619.361 882.319 618.892 879.001 618.47 875.688 cv
617.634 870.733 li
617.346 869.085 617.102 867.433 616.693 865.8 cv
616.314 864.164 615.97 862.528 615.565 860.905 cv
614.07 856.112 li
691.085 961.821 mo
690.795 972.575 699.048 981.017 709.639 981.017 cv
709.951 981.017 710.265 981.01 710.581 980.995 cv
711.308 980.961 li
722.376 980.443 731.692 971.005 732.012 959.987 cv
732.51 942.809 li
732.511 942.791 732.511 942.773 732.512 942.754 cv
732.52 942.454 li
732.675 937.097 730.567 932.301 727.036 928.87 cv
723.657 925.512 718.977 923.462 713.742 923.462 cv
713.51 923.462 713.275 923.466 713.041 923.474 cv
712.316 923.499 li
706.834 923.69 701.778 926.109 698.035 929.861 cv
694.247 933.583 691.812 938.608 691.642 944.046 cv
691.076 962.09 li
691.077 962.094 li
691.085 961.821 li
783.702 957.925 mo
783.498 968.448 791.781 976.695 802.349 976.695 cv
802.663 976.695 802.981 976.688 803.299 976.673 cv
804.025 976.64 li
815.085 976.127 824.344 966.868 824.602 956.065 cv
824.889 944.007 li
824.888 944.028 824.888 944.048 824.887 944.068 cv
825.011 938.875 li
825.136 933.606 822.985 928.89 819.415 925.525 cv
816.022 922.255 811.349 920.261 806.138 920.261 cv
805.903 920.261 805.667 920.265 805.43 920.274 cv
805.227 920.28 li
805.174 920.282 805.122 920.283 805.069 920.285 cv
805.032 920.286 804.994 920.288 804.957 920.289 cv
804.706 920.298 li
799.229 920.487 794.19 922.86 790.47 926.538 cv
786.702 930.189 784.296 935.118 784.157 940.452 cv
783.696 958.144 li
783.696 958.148 li
783.702 957.925 li
876.259 954 mo
876.101 964.322 884.425 972.414 894.99 972.414 cv
895.308 972.414 895.628 972.406 895.949 972.391 cv
896.675 972.358 li
907.727 971.85 916.932 962.769 917.13 952.181 cv
917.352 940.296 li
917.352 940.338 917.351 940.379 917.351 940.42 cv
917.445 935.329 li
917.542 930.154 915.358 925.525 911.758 922.226 cv
908.351 919.036 903.679 917.09 898.483 917.09 cv
898.247 917.09 898.008 917.094 897.769 917.103 cv
897.046 917.127 li
891.556 917.315 886.518 919.656 882.817 923.28 cv
879.09 926.858 876.726 931.678 876.617 936.892 cv
876.432 945.732 li
876.261 953.893 li
876.26 953.922 876.259 953.953 876.259 953.983 cv
876.254 954.237 li
876.254 954.24 li
876.259 954 li
693.826 874.34 mo
693.632 880.533 li
693.29 891.446 701.697 900.151 712.426 900.151 cv
712.624 900.151 712.822 900.148 713.021 900.142 cv
713.744 900.119 li
724.756 899.791 734.026 890.508 734.344 879.49 cv
734.842 862.312 li
734.842 862.293 734.843 862.273 734.843 862.253 cv
734.852 861.957 li
735.007 856.589 732.9 851.745 729.374 848.25 cv
725.94 844.77 721.163 842.63 715.828 842.63 cv
715.712 842.63 715.593 842.631 715.476 842.633 cv
714.755 842.645 li
709.287 842.742 704.243 845.09 700.517 848.796 cv
696.765 852.452 694.356 857.425 694.186 862.848 cv
693.621 880.892 li
693.621 880.895 li
693.826 874.34 li
785.774 878.304 mo
785.567 888.942 793.993 897.405 804.674 897.405 cv
804.873 897.405 805.075 897.403 805.276 897.397 cv
805.998 897.376 li
817.005 897.05 826.218 887.946 826.473 877.145 cv
826.87 860.304 li
826.871 860.27 826.872 860.236 826.872 860.202 cv
826.878 859.956 li
827.002 854.69 824.864 849.939 821.314 846.513 cv
817.862 843.108 813.077 841.013 807.75 841.013 cv
807.631 841.013 807.511 841.014 807.392 841.016 cv
807.206 841.019 li
807.148 841.02 807.09 841.02 807.032 841.021 cv
806.977 841.022 806.922 841.023 806.867 841.025 cv
806.672 841.028 li
801.223 841.124 796.208 843.412 792.508 847.027 cv
788.759 850.615 786.365 855.505 786.227 860.838 cv
786.002 869.511 li
785.777 878.178 li
785.776 878.213 785.775 878.249 785.775 878.284 cv
785.768 878.529 li
785.768 878.533 li
785.774 878.304 li
877.884 875.929 mo
877.714 886.375 886.19 894.688 896.879 894.688 cv
897.08 894.688 897.284 894.685 897.487 894.679 cv
898.209 894.657 li
909.21 894.335 918.371 885.408 918.565 874.821 cv
918.781 863.002 li
918.781 863.023 918.781 863.043 918.781 863.064 cv
918.814 861.23 li
918.867 858.315 li
918.868 858.288 918.868 858.262 918.869 858.235 cv
918.873 857.974 li
918.968 852.803 916.796 848.139 913.215 844.78 cv
909.747 841.455 904.96 839.41 899.645 839.41 cv
899.525 839.41 899.404 839.411 899.284 839.413 cv
899.023 839.418 li
898.99 839.418 898.957 839.419 898.924 839.419 cv
898.892 839.42 898.861 839.42 898.829 839.421 cv
898.564 839.426 li
893.111 839.52 888.107 841.767 884.427 845.317 cv
880.705 848.834 878.343 853.624 878.236 858.848 cv
877.878 876.19 li
877.879 876.192 li
877.884 875.929 li
696.37 793.153 mo
696.177 799.335 li
695.831 810.364 704.373 819.291 715.209 819.291 cv
715.292 819.291 715.376 819.29 715.459 819.289 cv
716.178 819.279 li
727.132 819.141 736.353 810.013 736.671 798.996 cv
737.026 786.697 li
737.026 786.718 737.025 786.74 737.025 786.761 cv
737.141 782.741 li
737.167 781.819 li
737.167 781.813 737.168 781.808 737.168 781.802 cv
737.177 781.464 li
737.332 776.114 735.251 771.247 731.765 767.692 cv
728.273 764.052 723.372 761.792 717.907 761.794 cv
717.191 761.795 li
711.757 761.796 706.745 764.053 703.039 767.69 cv
699.302 771.284 696.901 776.221 696.731 781.649 cv
696.165 799.693 li
696.165 799.696 li
696.37 793.153 li
787.834 798.685 mo
787.619 809.443 796.19 818.132 806.984 818.132 cv
807.068 818.132 807.153 818.131 807.237 818.13 cv
807.956 818.12 li
818.908 817.982 828.074 809.034 828.327 798.234 cv
828.72 781.397 li
828.721 781.366 828.721 781.335 828.722 781.305 cv
828.728 781.048 li
828.85 775.797 826.734 771.02 823.219 767.534 cv
819.706 763.974 814.797 761.765 809.339 761.767 cv
809.095 761.767 li
809.057 761.767 809.019 761.767 808.981 761.767 cv
808.929 761.767 808.876 761.767 808.823 761.767 cv
808.623 761.768 li
803.187 761.769 798.188 763.982 794.503 767.551 cv
790.791 771.073 788.421 775.912 788.284 781.231 cv
787.828 798.921 li
787.828 798.925 li
787.834 798.685 li
1072.5 995.929 mo
1072.38 995.914 1072.28 995.901 1072.16 995.886 cv
1072.27 995.9 1072.39 995.915 1072.5 995.929 cv
1071.63 995.821 mo
1071.03 995.747 1070.42 995.671 1069.82 995.597 cv
1069.74 995.588 1069.66 995.578 1069.59 995.569 cv
1069.37 995.543 1069.16 995.516 1068.94 995.49 cv
1068.77 995.468 1068.57 995.444 1068.4 995.422 cv
1068.28 995.409 1068.18 995.396 1068.07 995.382 cv
1045.66 992.635 1022.97 990.093 999.995 987.756 cv
1024.19 990.216 1048.07 992.906 1071.63 995.821 cv
691.381 952.368 mo
691.474 949.393 li
691.475 949.379 691.475 949.364 691.476 949.35 cv
691.381 952.368 li
784.01 946.093 mo
784.021 945.695 li
784.021 945.692 784.021 945.689 784.021 945.686 cv
784.01 946.093 li
586.783 738.613 mo
586.81 738.486 586.838 738.36 586.867 738.234 cv
586.882 738.234 li
586.848 738.365 586.815 738.491 586.783 738.613 cv
910.188 737.042 mo
910.188 737.042 li
973.272 737.03 li
982.81 737.029 li
910.188 737.042 li
.87451 .905882 .929412 rgb
f
1429.8 1063.78 mo
1429.77 1063.77 1429.76 1063.77 1429.74 1063.76 cv
1429.76 1063.77 1429.78 1063.77 1429.8 1063.78 cv
1428.27 1063.37 mo
1428.26 1063.37 1428.27 1063.37 1428.26 1063.37 cv
1428.27 1063.37 li
1427.5 1063.17 mo
1427.47 1063.16 1427.43 1063.15 1427.39 1063.14 cv
1427.43 1063.15 1427.47 1063.16 1427.5 1063.17 cv
1426.74 1062.97 mo
1426.69 1062.95 1426.63 1062.94 1426.57 1062.92 cv
1426.63 1062.94 1426.68 1062.95 1426.74 1062.97 cv
1425.97 1062.76 mo
1425.95 1062.76 1425.92 1062.75 1425.9 1062.74 cv
1425.92 1062.75 1425.95 1062.76 1425.97 1062.76 cv
1425.2 1062.56 mo
1425.2 1062.56 1425.19 1062.56 1425.18 1062.56 cv
1425.19 1062.56 1425.2 1062.56 1425.2 1062.56 cv
1410.19 958.667 mo
1408.23 934.882 1407.4 910.081 1407.4 885.202 cv
1407.4 838.953 1410.26 792.439 1414.03 751.7 cv
1414.15 750.391 1414.2 749.093 1414.2 747.807 cv
1414.2 747.291 1414.2 746.777 1414.18 746.265 cv
1414.18 746.265 li
1414.24 748.052 1414.19 749.866 1414.03 751.7 cv
1408.24 814.353 1404.58 890.665 1410.19 958.667 cv
.875294 .904314 .930196 rgb
f
1430.56 1063.98 mo
1430.31 1063.91 1430.05 1063.85 1429.8 1063.78 cv
1429.78 1063.77 1429.76 1063.77 1429.74 1063.76 cv
1429.26 1063.63 1428.75 1063.5 1428.27 1063.37 cv
1428.26 1063.37 li
1428.01 1063.3 1427.76 1063.24 1427.5 1063.17 cv
1427.47 1063.16 1427.43 1063.15 1427.39 1063.14 cv
1427.17 1063.08 1426.96 1063.03 1426.74 1062.97 cv
1426.68 1062.95 1426.63 1062.94 1426.57 1062.92 cv
1426.37 1062.87 1426.17 1062.82 1425.97 1062.76 cv
1425.95 1062.76 1425.92 1062.75 1425.9 1062.74 cv
1425.67 1062.68 1425.43 1062.62 1425.2 1062.56 cv
1425.2 1062.56 1425.19 1062.56 1425.18 1062.56 cv
1316.63 1033.89 1199.13 1011.63 1072.5 995.929 cv
1072.39 995.915 1072.27 995.9 1072.16 995.886 cv
1071.98 995.864 1071.81 995.843 1071.63 995.821 cv
1048.07 992.906 1024.19 990.216 999.995 987.756 cv
999.995 987.756 li
999.995 987.756 li
999.994 987.756 li
999.528 767.454 li
1000.03 767.443 li
1050.18 768.522 li
1050.26 768.523 1050.34 768.524 1050.42 768.524 cv
1050.8 768.524 1051.18 768.511 1051.56 768.48 cv
1084.81 765.702 li
1080.55 769.404 1077.93 774.725 1078.03 780.629 cv
1078.34 797.809 li
1078.54 808.967 1088.44 818.169 1100.41 818.321 cv
1100.51 818.322 1100.61 818.323 1100.71 818.323 cv
1112.54 818.323 1121.92 809.339 1121.7 798.168 cv
1121.34 780.824 li
1121.2 773.635 1117.12 767.302 1111.09 763.66 cv
1414.18 746.265 li
1414.2 746.777 1414.2 747.291 1414.2 747.807 cv
1414.2 749.093 1414.15 750.391 1414.03 751.7 cv
1410.26 792.439 1407.4 838.953 1407.4 885.202 cv
1407.4 910.081 1408.23 934.882 1410.19 958.667 cv
1413.43 997.96 1419.76 1034.48 1430.56 1063.98 cv
1267.23 942.665 mo
1267.23 942.713 1267.23 942.761 1267.23 942.809 cv
1267.73 959.987 li
1268.05 971.005 1277.36 980.443 1288.43 980.961 cv
1289.16 980.995 li
1289.47 981.01 1289.79 981.017 1290.1 981.017 cv
1300.69 981.017 1308.95 972.574 1308.65 961.82 cv
1308.66 962.094 li
1308.66 962.09 li
1308.1 944.046 li
1307.93 938.608 1305.49 933.583 1301.7 929.861 cv
1297.96 926.109 1292.91 923.69 1287.42 923.499 cv
1286.7 923.474 li
1286.47 923.466 1286.23 923.462 1286 923.462 cv
1280.77 923.462 1276.09 925.509 1272.71 928.863 cv
1269.18 932.294 1267.06 937.094 1267.22 942.454 cv
1267.23 942.665 li
1174.85 944.006 mo
1175.14 956.065 li
1175.4 966.868 1184.65 976.127 1195.71 976.64 cv
1196.44 976.673 li
1196.76 976.688 1197.08 976.695 1197.39 976.695 cv
1207.96 976.696 1216.24 968.447 1216.04 957.926 cv
1216.04 958.148 li
1216.04 958.144 li
1215.58 940.452 li
1215.44 935.126 1213.04 930.203 1209.28 926.553 cv
1205.56 922.867 1200.52 920.487 1195.03 920.298 cv
1194.79 920.289 li
1194.75 920.288 1194.71 920.286 1194.67 920.285 cv
1194.62 920.283 1194.56 920.282 1194.51 920.28 cv
1194.31 920.274 li
1194.07 920.265 1193.84 920.261 1193.6 920.261 cv
1188.39 920.261 1183.72 922.256 1180.32 925.527 cv
1176.75 928.892 1174.6 933.607 1174.73 938.875 cv
1174.85 944.068 li
1174.85 944.048 1174.85 944.026 1174.85 944.006 cv
1082.3 935.56 mo
1082.3 935.596 1082.3 935.634 1082.3 935.671 cv
1082.61 952.181 li
1082.81 962.769 1092.01 971.85 1103.06 972.358 cv
1103.79 972.391 li
1104.11 972.406 1104.43 972.414 1104.75 972.414 cv
1115.31 972.414 1123.64 964.322 1123.48 954 cv
1123.49 954.24 li
1123.49 954.237 li
1123.3 945.374 li
1123.13 937.236 li
1123.13 937.208 1123.13 937.18 1123.13 937.152 cv
1123.12 936.892 li
1123.01 931.68 1120.65 926.862 1116.93 923.285 cv
1113.23 919.658 1108.19 917.315 1102.69 917.127 cv
1101.97 917.103 li
1101.73 917.094 1101.49 917.09 1101.26 917.09 cv
1096.06 917.09 1091.38 919.038 1087.97 922.233 cv
1084.38 925.531 1082.2 930.158 1082.29 935.329 cv
1082.3 935.56 li
1264.89 862.168 mo
1264.9 862.216 1264.9 862.264 1264.9 862.312 cv
1265.4 879.49 li
1265.71 890.508 1274.98 899.791 1286 900.119 cv
1286.72 900.142 li
1286.92 900.148 1287.12 900.151 1287.31 900.151 cv
1298.01 900.151 1306.4 891.492 1306.11 880.621 cv
1306.12 880.895 li
1306.12 880.892 li
1306.11 880.585 li
1306.11 880.568 1306.11 880.55 1306.11 880.533 cv
1306.04 878.296 li
1305.55 862.848 li
1305.38 857.421 1302.97 852.445 1299.22 848.788 cv
1295.49 845.086 1290.45 842.742 1284.98 842.645 cv
1284.26 842.633 li
1284.15 842.631 1284.03 842.63 1283.91 842.63 cv
1278.57 842.63 1273.79 844.774 1270.36 848.259 cv
1266.84 851.754 1264.73 856.594 1264.89 861.957 cv
1264.89 862.168 li
1172.98 865.091 mo
1173.27 877.145 li
1173.52 887.946 1182.74 897.05 1193.74 897.376 cv
1194.46 897.397 li
1194.66 897.403 1194.87 897.405 1195.07 897.405 cv
1205.75 897.406 1214.17 888.942 1213.97 878.304 cv
1213.97 878.533 li
1213.97 878.529 li
1213.75 870.008 li
1213.52 861.189 li
1213.52 861.163 1213.52 861.138 1213.52 861.112 cv
1213.51 860.838 li
1213.37 855.512 1210.99 850.628 1207.25 847.041 cv
1203.55 843.418 1198.52 841.124 1193.07 841.028 cv
1192.87 841.025 li
1192.82 841.023 1192.76 841.022 1192.71 841.021 cv
1192.65 841.02 1192.59 841.02 1192.53 841.019 cv
1192.35 841.016 li
1192.23 841.014 1192.11 841.013 1191.99 841.013 cv
1186.65 841.013 1181.86 843.114 1178.41 846.528 cv
1174.87 849.953 1172.74 854.698 1172.86 859.956 cv
1172.98 865.091 li
1080.96 863.001 mo
1081.17 874.821 li
1081.37 885.408 1090.53 894.335 1101.53 894.657 cv
1102.25 894.679 li
1102.46 894.685 1102.66 894.688 1102.86 894.688 cv
1113.55 894.689 1122.03 886.374 1121.86 875.928 cv
1121.86 876.192 li
1121.86 876.19 li
1121.5 858.848 li
1121.4 853.626 1119.04 848.837 1115.32 845.32 cv
1111.64 841.769 1106.63 839.52 1101.18 839.426 cv
1100.91 839.421 li
1100.88 839.42 1100.85 839.42 1100.82 839.419 cv
1100.78 839.419 1100.75 839.418 1100.72 839.418 cv
1100.46 839.413 li
1100.34 839.411 1100.22 839.41 1100.1 839.41 cv
1094.78 839.41 1089.99 841.458 1086.52 844.787 cv
1082.94 848.145 1080.77 852.807 1080.87 857.974 cv
1080.87 858.234 li
1080.87 858.261 1080.87 858.288 1080.87 858.315 cv
1080.93 861.23 li
1080.96 863.064 li
1080.96 863.043 1080.96 863.021 1080.96 863.001 cv
1262.71 786.696 mo
1263.07 798.996 li
1263.39 810.013 1272.61 819.141 1283.56 819.279 cv
1284.28 819.289 li
1284.36 819.29 1284.45 819.291 1284.53 819.291 cv
1295.31 819.292 1303.83 810.451 1303.57 799.495 cv
1303.57 799.696 li
1303.57 799.693 li
1303.57 799.386 li
1303.56 799.369 1303.56 799.352 1303.56 799.335 cv
1303.49 797.098 li
1303.01 781.649 li
1302.84 776.213 1300.43 771.269 1296.68 767.674 cv
1292.98 764.046 1287.97 761.796 1282.55 761.795 cv
1281.83 761.794 li
1281.83 761.794 1281.83 761.794 1281.83 761.794 cv
1276.39 761.794 1271.51 764.031 1268.02 767.64 cv
1264.51 771.199 1262.41 776.089 1262.56 781.464 cv
1262.57 781.801 li
1262.57 781.807 1262.57 781.813 1262.57 781.819 cv
1262.6 782.741 li
1262.71 786.761 li
1262.71 786.739 1262.71 786.717 1262.71 786.696 cv
1171.02 781.304 mo
1171.02 781.335 1171.02 781.366 1171.02 781.397 cv
1171.41 798.234 li
1171.67 809.034 1180.83 817.982 1191.78 818.12 cv
1192.5 818.13 li
1192.59 818.131 1192.67 818.131 1192.76 818.132 cv
1203.59 818.132 1212.18 809.381 1211.9 798.569 cv
1211.8 794.727 li
1211.91 798.925 li
1211.91 798.921 li
1211.46 781.231 li
1211.32 775.907 1208.94 771.062 1205.22 767.539 cv
1201.54 763.978 1196.55 761.769 1191.12 761.768 cv
1190.92 761.767 li
1190.86 761.767 1190.81 761.767 1190.76 761.767 cv
1190.76 761.767 1190.75 761.767 1190.75 761.767 cv
1190.71 761.767 1190.68 761.767 1190.64 761.767 cv
1190.4 761.767 li
1190.4 761.767 1190.4 761.767 1190.39 761.767 cv
1184.96 761.767 1180.06 763.963 1176.55 767.503 cv
1173.02 770.992 1170.89 775.782 1171.01 781.048 cv
1171.02 781.304 li
.776471 .827451 .87451 rgb
f
716.178 819.279 mo
715.459 819.289 li
704.505 819.428 695.828 810.448 696.177 799.335 cv
696.719 782.008 li
697.068 770.893 706.28 761.798 717.191 761.795 cv
717.907 761.794 li
728.818 761.791 737.485 770.803 737.167 781.819 cv
736.671 798.996 li
736.353 810.013 727.132 819.141 716.178 819.279 cv
.376471 .521569 .65098 rgb
f
696.165 799.696 mo
696.165 799.693 li
696.731 781.649 li
696.901 776.221 699.302 771.284 703.039 767.69 cv
699.303 771.357 696.894 776.428 696.719 782.008 cv
696.37 793.153 li
696.165 799.696 li
737.025 786.761 mo
737.025 786.74 737.026 786.718 737.026 786.697 cv
737.141 782.741 li
737.025 786.761 li
737.168 781.802 mo
737.321 776.309 735.242 771.316 731.765 767.692 cv
735.251 771.247 737.332 776.114 737.177 781.464 cv
737.168 781.802 li
.6 .686274 .764706 rgb
f
696.37 793.153 mo
696.719 782.008 li
696.894 776.428 699.303 771.357 703.039 767.69 cv
706.818 764.056 711.964 761.797 717.549 761.795 cv
723.166 761.793 728.2 764.056 731.765 767.692 cv
735.242 771.316 737.321 776.309 737.168 781.802 cv
737.141 782.741 li
737.026 786.697 li
737.301 775.916 728.494 767.118 717.419 767.118 cv
717.409 767.118 717.399 767.118 717.389 767.118 cv
706.277 767.135 696.905 776.079 696.563 786.996 cv
696.37 793.153 li
.258824 .396078 .537255 rgb
f
717.506 763.196 mo
707.158 763.202 698.482 771.478 698.165 781.643 cv
697.601 799.681 li
697.283 809.846 705.474 818.011 715.86 817.882 cv
726.247 817.753 734.934 809.445 735.226 799.363 cv
735.744 781.471 li
736.036 771.388 727.855 763.189 717.506 763.196 cv
cp
715.776 820.684 mo
703.804 820.839 694.362 811.429 694.731 799.705 cv
695.298 781.655 li
695.666 769.932 705.667 760.395 717.591 760.395 cv
729.515 760.395 738.945 769.843 738.611 781.457 cv
738.096 799.339 li
737.762 810.953 727.749 820.528 715.776 820.684 cv
cp
.0588235 .27451 .54902 rgb
f
713.744 900.119 mo
713.021 900.142 li
702.009 900.471 693.284 891.647 693.632 880.533 cv
694.175 863.206 li
694.523 852.092 703.784 842.84 714.755 842.645 cv
715.476 842.633 li
726.445 842.439 735.16 851.295 734.842 862.312 cv
734.344 879.49 li
734.026 890.508 724.756 899.791 713.744 900.119 cv
.376471 .521569 .65098 rgb
f
693.621 880.895 mo
693.621 880.892 li
694.186 862.848 li
694.356 857.425 696.765 852.452 700.517 848.796 cv
696.766 852.526 694.35 857.631 694.175 863.206 cv
693.826 874.34 li
693.621 880.895 li
734.843 862.253 mo
734.986 856.758 732.883 851.806 729.374 848.25 cv
732.9 851.745 735.007 856.589 734.852 861.957 cv
734.843 862.253 li
.6 .686274 .764706 rgb
f
693.826 874.34 mo
694.175 863.206 li
694.35 857.631 696.766 852.526 700.517 848.796 cv
704.317 845.092 709.495 842.739 715.115 842.64 cv
715.24 842.638 715.364 842.636 715.488 842.636 cv
720.966 842.636 725.871 844.778 729.374 848.25 cv
732.883 851.806 734.986 856.758 734.843 862.253 cv
734.698 867.255 li
735.006 856.563 726.335 847.959 715.351 847.959 cv
715.22 847.959 715.087 847.96 714.955 847.963 cv
703.782 848.174 694.361 857.277 694.019 868.194 cv
693.826 874.34 li
.258824 .396078 .537255 rgb
f
715.073 844.041 mo
704.668 844.229 695.946 852.651 695.628 862.815 cv
695.065 880.854 li
694.747 891.019 702.982 899.037 713.425 898.729 cv
723.866 898.42 732.599 889.965 732.891 879.882 cv
733.411 861.988 li
733.703 851.906 725.477 843.854 715.073 844.041 cv
cp
713.34 901.53 mo
701.305 901.894 691.81 892.652 692.178 880.929 cv
692.746 862.879 li
693.114 851.155 703.169 841.448 715.157 841.24 cv
727.146 841.031 736.628 850.311 736.293 861.926 cv
735.777 879.808 li
735.442 891.423 725.376 901.167 713.34 901.53 cv
cp
.0588235 .27451 .54902 rgb
f
711.308 980.961 mo
710.581 980.995 li
699.512 981.513 690.74 972.845 691.088 961.731 cv
691.631 944.404 li
691.979 933.29 701.288 923.883 712.316 923.499 cv
713.041 923.474 li
724.069 923.09 732.83 931.791 732.51 942.809 cv
732.012 959.987 li
731.692 971.005 722.376 980.443 711.308 980.961 cv
.376471 .521569 .65098 rgb
f
691.077 962.094 mo
691.076 962.09 li
691.642 944.046 li
691.812 938.608 694.247 933.583 698.035 929.861 cv
694.248 933.656 691.806 938.814 691.631 944.404 cv
691.476 949.35 li
691.475 949.364 691.475 949.379 691.474 949.393 cv
691.381 952.368 li
691.088 961.731 li
691.087 961.761 691.086 961.791 691.085 961.821 cv
691.077 962.094 li
732.512 942.754 mo
732.655 937.269 730.55 932.362 727.036 928.87 cv
730.567 932.301 732.675 937.097 732.52 942.454 cv
732.512 942.754 li
.6 .686274 .764706 rgb
f
691.085 961.821 mo
691.086 961.791 691.087 961.761 691.088 961.731 cv
691.381 952.368 li
691.085 961.821 li
691.476 949.35 mo
691.631 944.404 li
691.806 938.814 694.248 933.656 698.035 929.861 cv
701.852 926.11 707.044 923.682 712.679 923.486 cv
712.927 923.478 713.172 923.473 713.418 923.473 cv
718.79 923.473 723.59 925.522 727.036 928.87 cv
730.55 932.362 732.655 937.269 732.512 942.754 cv
732.367 947.751 li
732.672 937.177 724.151 928.797 713.282 928.797 cv
713.029 928.797 712.774 928.801 712.518 928.811 cv
701.301 929.213 691.841 938.451 691.476 949.35 cv
.258824 .396078 .537255 rgb
f
712.636 924.888 mo
702.176 925.255 693.409 933.824 693.092 943.989 cv
692.528 962.027 li
692.21 972.192 700.49 980.064 710.986 979.576 cv
721.481 979.088 730.258 970.487 730.551 960.404 cv
731.072 942.51 li
731.365 932.427 723.095 924.521 712.636 924.888 cv
cp
710.901 982.378 mo
698.803 982.948 689.258 973.875 689.626 962.151 cv
690.194 944.103 li
690.562 932.378 700.669 922.502 712.72 922.086 cv
724.772 921.671 734.305 930.782 733.969 942.397 cv
733.452 960.28 li
733.115 971.896 723 981.809 710.901 982.378 cv
cp
.0588235 .27451 .54902 rgb
f
807.956 818.12 mo
807.237 818.13 li
796.286 818.267 787.556 809.465 787.837 798.569 cv
788.275 781.583 li
788.555 770.687 797.712 761.77 808.623 761.768 cv
809.339 761.767 li
820.25 761.763 828.972 770.597 828.72 781.397 cv
828.327 798.234 li
828.074 809.034 818.908 817.982 807.956 818.12 cv
.376471 .521569 .65098 rgb
f
787.828 798.925 mo
787.828 798.921 li
788.284 781.231 li
788.421 775.912 790.791 771.073 794.503 767.551 cv
790.792 771.145 788.416 776.115 788.275 781.583 cv
787.837 798.569 li
787.836 798.608 787.835 798.646 787.834 798.685 cv
787.828 798.925 li
828.722 781.305 mo
828.822 775.943 826.71 771.072 823.219 767.534 cv
826.734 771.02 828.85 775.797 828.728 781.048 cv
828.722 781.305 li
808.823 761.767 mo
808.876 761.767 808.929 761.767 808.981 761.767 cv
809.019 761.767 809.057 761.767 809.095 761.767 cv
808.823 761.767 li
.6 .686274 .764706 rgb
f
787.834 798.685 mo
787.835 798.646 787.836 798.608 787.837 798.569 cv
788.275 781.583 li
788.416 776.115 790.792 771.145 794.503 767.551 cv
798.225 764.019 803.297 761.811 808.823 761.767 cv
809.095 761.767 li
814.659 761.795 819.657 764.002 823.219 767.534 cv
826.71 771.072 828.822 775.943 828.722 781.305 cv
828.607 786.24 li
828.853 775.644 819.98 766.985 808.883 766.985 cv
808.873 766.985 808.863 766.985 808.853 766.985 cv
797.741 767.002 788.425 775.772 788.149 786.474 cv
787.834 798.685 li
.258824 .396078 .537255 rgb
f
808.947 763.141 mo
798.599 763.147 789.974 771.26 789.718 781.225 cv
789.263 798.909 li
789.007 808.874 797.246 816.878 807.63 816.75 cv
818.015 816.623 826.652 808.478 826.884 798.594 cv
827.295 781.055 li
827.526 771.171 819.295 763.135 808.947 763.141 cv
cp
807.563 819.497 mo
795.593 819.651 786.096 810.427 786.394 798.933 cv
786.851 781.237 li
787.148 769.744 797.091 760.395 809.014 760.395 cv
820.939 760.395 830.426 769.656 830.161 781.041 cv
829.753 798.57 li
829.488 809.956 819.533 819.343 807.563 819.497 cv
cp
.0588235 .27451 .54902 rgb
f
805.998 897.376 mo
805.276 897.397 li
794.269 897.722 785.494 889.074 785.777 878.178 cv
786.218 861.189 li
786.5 850.293 795.705 841.221 806.672 841.028 cv
807.392 841.016 li
818.359 840.823 827.124 849.504 826.87 860.304 cv
826.473 877.145 li
826.218 887.946 817.005 897.05 805.998 897.376 cv
.376471 .521569 .65098 rgb
f
785.768 878.533 mo
785.768 878.529 li
785.775 878.284 li
785.774 878.291 785.774 878.297 785.774 878.304 cv
785.768 878.533 li
786.002 869.511 mo
786.227 860.838 li
786.365 855.505 788.759 850.615 792.508 847.027 cv
788.76 850.687 786.36 855.707 786.218 861.189 cv
786.002 869.511 li
826.872 860.202 mo
826.97 854.83 824.838 849.989 821.314 846.513 cv
824.864 849.939 827.002 854.69 826.878 859.956 cv
826.872 860.202 li
806.867 841.025 mo
806.922 841.023 806.977 841.022 807.032 841.021 cv
807.09 841.02 807.148 841.02 807.206 841.019 cv
806.867 841.025 li
.6 .686274 .764706 rgb
f
785.774 878.304 mo
785.774 878.297 785.774 878.291 785.775 878.284 cv
786.002 869.511 li
786.218 861.189 li
786.36 855.707 788.76 850.687 792.508 847.027 cv
796.245 843.449 801.329 841.165 806.867 841.025 cv
807.206 841.019 li
807.274 841.018 807.34 841.018 807.408 841.018 cv
812.88 841.018 817.793 843.114 821.314 846.513 cv
824.838 849.989 826.97 854.83 826.872 860.202 cv
826.756 865.15 li
827.002 854.669 818.285 846.237 807.304 846.237 cv
807.171 846.237 807.037 846.239 806.903 846.241 cv
795.734 846.449 786.369 855.377 786.091 866.08 cv
785.774 878.304 li
.258824 .396078 .537255 rgb
f
806.998 842.396 mo
796.596 842.581 787.926 850.841 787.668 860.807 cv
787.211 878.492 li
786.953 888.458 795.233 896.317 805.671 896.012 cv
816.107 895.706 824.789 887.414 825.023 877.529 cv
825.438 859.987 li
825.671 850.103 817.399 842.211 806.998 842.396 cv
cp
805.603 898.759 mo
793.573 899.118 784.027 890.061 784.326 878.565 cv
784.787 860.869 li
785.085 849.375 795.081 839.856 807.066 839.649 cv
819.052 839.443 828.586 848.538 828.319 859.925 cv
827.907 877.456 li
827.639 888.843 817.633 898.398 805.603 898.759 cv
cp
.0588235 .27451 .54902 rgb
f
804.025 976.64 mo
803.299 976.673 li
792.238 977.186 783.42 968.691 783.705 957.793 cv
784.148 940.804 li
784.433 929.906 793.684 920.679 804.706 920.298 cv
805.43 920.274 li
816.452 919.893 825.259 928.421 825.003 939.224 cv
824.602 956.065 li
824.344 966.868 815.085 976.127 804.025 976.64 cv
.376471 .521569 .65098 rgb
f
783.696 958.148 mo
783.696 958.144 li
784.157 940.452 li
784.296 935.118 786.702 930.189 790.47 926.538 cv
786.704 930.261 784.291 935.321 784.148 940.804 cv
784.021 945.686 li
784.021 945.689 784.021 945.692 784.021 945.695 cv
784.01 946.093 li
783.705 957.793 li
783.704 957.837 783.703 957.881 783.702 957.925 cv
783.696 958.148 li
824.887 944.068 mo
824.888 944.048 824.888 944.028 824.889 944.007 cv
825.003 939.224 li
825.131 933.806 822.981 928.961 819.415 925.525 cv
822.985 928.89 825.136 933.606 825.011 938.875 cv
824.887 944.068 li
804.957 920.289 mo
804.994 920.288 805.032 920.286 805.069 920.285 cv
805.122 920.283 805.174 920.282 805.227 920.28 cv
804.957 920.289 li
.6 .686274 .764706 rgb
f
783.702 957.925 mo
783.703 957.881 783.704 957.837 783.705 957.793 cv
784.01 946.093 li
783.702 957.925 li
784.021 945.686 mo
784.148 940.804 li
784.291 935.321 786.704 930.261 790.47 926.538 cv
794.239 922.885 799.37 920.511 804.957 920.289 cv
805.227 920.28 li
805.424 920.275 805.62 920.272 805.815 920.272 cv
811.163 920.272 815.956 922.265 819.415 925.525 cv
822.981 928.961 825.131 933.806 825.003 939.224 cv
824.889 944.007 li
825.098 933.672 816.549 925.492 805.71 925.492 cv
805.454 925.492 805.197 925.497 804.939 925.506 cv
793.716 925.905 784.306 934.985 784.021 945.686 cv
.258824 .396078 .537255 rgb
f
805.033 921.66 mo
794.579 922.023 785.865 930.429 785.606 940.396 cv
785.146 958.083 li
784.887 968.05 793.207 975.766 803.696 975.281 cv
814.184 974.798 822.908 966.361 823.144 956.475 cv
823.563 938.931 li
823.799 929.045 815.487 921.297 805.033 921.66 cv
cp
803.627 978.028 mo
791.538 978.594 781.946 969.702 782.247 958.206 cv
782.71 940.508 li
783.01 929.013 793.057 919.325 805.102 918.913 cv
817.147 918.501 826.728 927.431 826.458 938.819 cv
826.043 956.353 li
825.772 967.741 815.717 977.465 803.627 978.028 cv
cp
.0588235 .27451 .54902 rgb
f
899.716 816.972 mo
898.997 816.981 li
888.048 817.118 879.268 808.491 879.485 797.811 cv
879.823 781.162 li
880.04 770.483 889.144 761.743 900.055 761.74 cv
900.771 761.739 li
911.682 761.736 920.455 770.393 920.266 780.977 cv
919.97 797.48 li
919.779 808.065 910.665 816.836 899.716 816.972 cv
.376471 .521569 .65098 rgb
f
881.458 778.573 mo
882.514 771.729 887.698 766.088 894.498 763.978 cv
894.837 763.997 li
909.286 765.204 li
914.425 767.842 918.055 772.704 918.728 778.414 cv
915.781 771.636 908.676 766.854 900.346 766.854 cv
900.336 766.854 900.325 766.854 900.316 766.854 cv
891.972 766.866 884.669 771.717 881.458 778.573 cv
.258824 .396078 .537255 rgb
f
900.386 763.087 mo
890.039 763.093 881.461 771.044 881.264 780.81 cv
880.914 798.143 li
880.716 807.911 888.999 815.756 899.382 815.63 cv
909.765 815.503 918.354 807.518 918.529 797.832 cv
918.839 780.643 li
919.013 770.956 910.735 763.08 900.386 763.087 cv
899.33 818.321 mo
887.364 818.474 877.814 809.434 878.044 798.168 cv
878.398 780.824 li
878.627 769.559 888.515 760.394 900.438 760.394 cv
912.362 760.394 921.903 769.472 921.705 780.629 cv
921.398 797.809 li
921.198 808.967 911.298 818.169 899.33 818.321 cv
.0588235 .27451 .54902 rgb
f
898.209 894.657 mo
897.487 894.679 li
886.485 895.002 877.664 886.527 877.885 875.845 cv
878.229 859.192 li
878.449 848.51 887.599 839.616 898.564 839.426 cv
899.284 839.413 li
910.248 839.223 919.06 847.729 918.867 858.315 cv
918.565 874.821 li
918.371 885.408 909.21 894.335 898.209 894.657 cv
.376471 .521569 .65098 rgb
f
877.879 876.192 mo
877.878 876.19 li
878.236 858.848 li
878.343 853.624 880.705 848.834 884.427 845.317 cv
880.707 848.904 878.339 853.822 878.229 859.192 cv
877.885 875.845 li
877.885 875.873 877.884 875.901 877.884 875.929 cv
877.879 876.192 li
918.781 863.064 mo
918.781 863.043 918.781 863.023 918.781 863.002 cv
918.814 861.23 li
918.781 863.064 li
918.869 858.235 mo
918.942 852.952 916.773 848.192 913.215 844.78 cv
916.796 848.139 918.968 852.803 918.873 857.974 cv
918.869 858.235 li
898.829 839.421 mo
898.861 839.42 898.892 839.42 898.924 839.419 cv
898.957 839.419 898.99 839.418 899.023 839.418 cv
898.829 839.421 li
.6 .686274 .764706 rgb
f
877.884 875.929 mo
877.884 875.901 877.885 875.873 877.885 875.845 cv
878.229 859.192 li
878.339 853.822 880.707 848.904 884.427 845.317 cv
888.159 841.79 893.261 839.542 898.829 839.421 cv
899.023 839.418 li
899.117 839.416 899.21 839.416 899.304 839.416 cv
904.764 839.416 909.677 841.461 913.215 844.78 cv
916.773 848.192 918.942 852.952 918.869 858.235 cv
918.814 861.23 li
918.781 863.002 li
918.931 852.76 910.183 844.531 899.229 844.531 cv
899.095 844.531 898.96 844.532 898.825 844.535 cv
887.658 844.741 878.347 853.494 878.13 863.986 cv
877.884 875.929 li
.258824 .396078 .537255 rgb
f
898.897 840.767 mo
888.498 840.95 879.877 849.048 879.677 858.816 cv
879.321 876.152 li
879.12 885.922 887.442 893.624 897.874 893.32 cv
908.306 893.018 916.938 884.888 917.117 875.198 cv
917.433 858.005 li
917.611 848.316 909.296 840.583 898.897 840.767 cv
cp
897.821 896.013 mo
885.797 896.369 876.203 887.493 876.437 876.226 cv
876.796 858.878 li
877.029 847.611 886.968 838.278 898.949 838.074 cv
910.932 837.87 920.516 846.782 920.313 857.942 cv
920 875.126 li
919.796 886.287 909.846 895.656 897.821 896.013 cv
cp
.0588235 .27451 .54902 rgb
f
896.675 972.358 mo
895.949 972.391 li
884.896 972.9 876.037 964.576 876.261 953.893 cv
876.61 937.236 li
876.833 926.553 886.029 917.504 897.046 917.127 cv
897.769 917.103 li
908.785 916.727 917.636 925.082 917.439 935.671 cv
917.13 952.181 li
916.932 962.769 907.727 971.85 896.675 972.358 cv
.376471 .521569 .65098 rgb
f
876.254 954.24 mo
876.254 954.237 li
876.259 953.983 li
876.259 953.989 876.259 953.994 876.259 954 cv
876.254 954.24 li
876.432 945.732 mo
876.617 936.892 li
876.726 931.678 879.09 926.858 882.817 923.28 cv
879.091 926.928 876.721 931.876 876.61 937.236 cv
876.432 945.732 li
917.351 940.42 mo
917.351 940.379 917.352 940.338 917.352 940.296 cv
917.439 935.671 li
917.538 930.351 915.354 925.595 911.758 922.226 cv
915.358 925.525 917.542 930.154 917.445 935.329 cv
917.351 940.42 li
.6 .686274 .764706 rgb
f
876.259 954 mo
876.259 953.994 876.259 953.989 876.259 953.983 cv
876.432 945.732 li
876.61 937.236 li
876.721 931.876 879.091 926.928 882.817 923.28 cv
886.592 919.656 891.764 917.308 897.407 917.115 cv
897.661 917.106 897.912 917.102 898.163 917.102 cv
903.495 917.102 908.285 919.045 911.758 922.226 cv
915.354 925.595 917.538 930.351 917.439 935.671 cv
917.352 940.296 li
917.468 930.198 908.895 922.218 898.085 922.218 cv
897.828 922.218 897.567 922.222 897.307 922.231 cv
886.088 922.628 876.729 931.538 876.509 942.031 cv
876.259 954 li
.258824 .396078 .537255 rgb
f
897.38 918.462 mo
886.932 918.822 878.268 927.065 878.064 936.836 cv
877.703 954.176 li
877.499 963.946 885.858 971.507 896.339 971.027 cv
906.819 970.548 915.493 962.273 915.676 952.582 cv
915.999 935.385 li
916.18 925.694 907.828 918.103 897.38 918.462 cv
cp
896.285 973.72 mo
884.205 974.279 874.568 965.567 874.805 954.297 cv
875.17 936.947 li
875.406 925.678 885.395 916.178 897.433 915.77 cv
909.472 915.361 919.099 924.111 918.892 935.273 cv
918.572 952.461 li
918.364 963.625 908.365 973.161 896.285 973.72 cv
cp
.0588235 .27451 .54902 rgb
f
1283.56 819.279 mo
1284.28 819.289 li
1295.23 819.428 1303.91 810.448 1303.56 799.335 cv
1303.02 782.008 li
1302.67 770.893 1293.46 761.798 1282.55 761.795 cv
1281.83 761.794 li
1270.92 761.791 1262.25 770.803 1262.57 781.819 cv
1263.07 798.996 li
1263.39 810.013 1272.61 819.141 1283.56 819.279 cv
.376471 .521569 .65098 rgb
f
1303.57 799.696 mo
1303.57 799.495 li
1303.57 799.459 1303.57 799.422 1303.57 799.386 cv
1303.57 799.693 li
1303.57 799.696 li
1303.49 797.098 mo
1303.02 782.008 li
1302.85 776.42 1300.43 771.342 1296.68 767.674 cv
1300.43 771.269 1302.84 776.213 1303.01 781.649 cv
1303.49 797.098 li
1262.71 786.761 mo
1262.6 782.741 li
1262.71 786.696 li
1262.71 786.717 1262.71 786.739 1262.71 786.761 cv
1262.57 781.801 mo
1262.56 781.464 li
1262.41 776.089 1264.51 771.199 1268.02 767.64 cv
1264.52 771.268 1262.42 776.282 1262.57 781.801 cv
.533333 .627451 .721569 rgb
f
1303.57 799.495 mo
1303.18 786.996 li
1302.83 776.079 1293.46 767.135 1282.35 767.118 cv
1282.34 767.118 1282.33 767.118 1282.32 767.118 cv
1271.25 767.118 1262.44 775.916 1262.71 786.696 cv
1262.6 782.741 li
1262.57 781.801 li
1262.42 776.282 1264.52 771.268 1268.02 767.64 cv
1271.58 764.035 1276.6 761.795 1282.18 761.795 cv
1282.19 761.795 1282.19 761.795 1282.19 761.795 cv
1287.77 761.797 1292.91 764.049 1296.68 767.674 cv
1300.43 771.342 1302.85 776.42 1303.02 782.008 cv
1303.49 797.098 li
1303.57 799.386 li
1303.57 799.422 1303.57 799.459 1303.57 799.495 cv
.258824 .396078 .537255 rgb
f
1264 781.471 mo
1264.51 799.363 li
1264.81 809.445 1273.49 817.753 1283.88 817.882 cv
1294.27 818.011 1302.46 809.846 1302.14 799.681 cv
1301.58 781.643 li
1301.26 771.478 1292.58 763.202 1282.23 763.196 cv
1271.89 763.189 1263.7 771.388 1264 781.471 cv
cp
1261.64 799.339 mo
1261.13 781.457 li
1260.79 769.843 1270.22 760.395 1282.15 760.395 cv
1294.07 760.395 1304.07 769.932 1304.44 781.655 cv
1305.01 799.705 li
1305.38 811.429 1295.94 820.839 1283.96 820.684 cv
1271.99 820.528 1261.98 810.953 1261.64 799.339 cv
cp
.0588235 .27451 .54902 rgb
f
1286 900.119 mo
1286.72 900.142 li
1297.73 900.471 1306.46 891.647 1306.11 880.533 cv
1305.56 863.206 li
1305.22 852.092 1295.96 842.84 1284.98 842.645 cv
1284.26 842.633 li
1273.29 842.439 1264.58 851.295 1264.9 862.312 cv
1265.4 879.49 li
1265.71 890.508 1274.98 899.791 1286 900.119 cv
.376471 .521569 .65098 rgb
f
1306.12 880.895 mo
1306.11 880.621 li
1306.11 880.609 1306.11 880.597 1306.11 880.585 cv
1306.12 880.892 li
1306.12 880.895 li
1306.04 878.296 mo
1305.56 863.206 li
1305.39 857.628 1302.97 852.519 1299.22 848.788 cv
1302.97 852.445 1305.38 857.421 1305.55 862.848 cv
1306.04 878.296 li
1264.89 862.168 mo
1264.89 861.957 li
1264.73 856.594 1266.84 851.754 1270.36 848.259 cv
1266.87 851.796 1264.78 856.712 1264.89 862.168 cv
.533333 .627451 .721569 rgb
f
1306.11 880.621 mo
1305.72 868.194 li
1305.38 857.277 1295.96 848.174 1284.78 847.963 cv
1284.65 847.96 1284.52 847.959 1284.39 847.959 cv
1273.4 847.959 1264.73 856.563 1265.04 867.255 cv
1264.89 862.168 li
1264.78 856.712 1266.87 851.796 1270.36 848.259 cv
1273.86 844.781 1278.77 842.636 1284.25 842.636 cv
1284.38 842.636 1284.5 842.638 1284.62 842.64 cv
1290.24 842.739 1295.42 845.088 1299.22 848.788 cv
1302.97 852.519 1305.39 857.628 1305.56 863.206 cv
1306.04 878.296 li
1306.11 880.585 li
1306.11 880.597 1306.11 880.609 1306.11 880.621 cv
.258824 .396078 .537255 rgb
f
1266.33 861.988 mo
1266.85 879.882 li
1267.14 889.965 1275.87 898.42 1286.32 898.729 cv
1296.76 899.037 1304.99 891.019 1304.68 880.854 cv
1304.11 862.815 li
1303.79 852.651 1295.07 844.229 1284.67 844.041 cv
1274.26 843.854 1266.04 851.906 1266.33 861.988 cv
cp
1263.96 879.808 mo
1263.45 861.926 li
1263.11 850.311 1272.59 841.031 1284.58 841.24 cv
1296.57 841.448 1306.63 851.155 1306.99 862.879 cv
1307.56 880.929 li
1307.93 892.652 1298.44 901.894 1286.4 901.53 cv
1274.36 901.167 1264.3 891.423 1263.96 879.808 cv
cp
.0588235 .27451 .54902 rgb
f
1288.43 980.961 mo
1289.16 980.995 li
1300.23 981.513 1309 972.845 1308.65 961.731 cv
1308.11 944.404 li
1307.76 933.29 1298.45 923.883 1287.42 923.499 cv
1286.7 923.474 li
1275.67 923.09 1266.91 931.791 1267.23 942.809 cv
1267.73 959.987 li
1268.05 971.005 1277.36 980.443 1288.43 980.961 cv
.376471 .521569 .65098 rgb
f
1308.66 962.094 mo
1308.65 961.82 li
1308.65 961.79 1308.65 961.76 1308.65 961.731 cv
1308.11 944.404 li
1307.93 938.814 1305.49 933.656 1301.7 929.861 cv
1305.49 933.583 1307.93 938.608 1308.1 944.046 cv
1308.66 962.09 li
1308.66 962.094 li
1267.23 942.665 mo
1267.22 942.454 li
1267.06 937.094 1269.18 932.294 1272.71 928.863 cv
1269.21 932.337 1267.11 937.213 1267.23 942.665 cv
.533333 .627451 .721569 rgb
f
1308.65 961.82 mo
1308.27 949.393 li
1307.92 938.475 1298.45 929.214 1287.22 928.811 cv
1286.97 928.801 1286.71 928.797 1286.46 928.797 cv
1275.59 928.797 1267.07 937.177 1267.37 947.751 cv
1267.23 942.665 li
1267.11 937.213 1269.21 932.337 1272.71 928.863 cv
1276.16 925.519 1280.95 923.473 1286.32 923.473 cv
1286.57 923.473 1286.81 923.478 1287.06 923.486 cv
1292.7 923.682 1297.89 926.11 1301.7 929.861 cv
1305.49 933.656 1307.93 938.814 1308.11 944.404 cv
1308.65 961.731 li
1308.65 961.76 1308.65 961.79 1308.65 961.82 cv
.258824 .396078 .537255 rgb
f
1268.67 942.51 mo
1269.19 960.404 li
1269.48 970.487 1278.26 979.088 1288.75 979.576 cv
1299.25 980.064 1307.53 972.192 1307.21 962.027 cv
1306.65 943.989 li
1306.33 933.824 1297.56 925.255 1287.1 924.888 cv
1276.64 924.521 1268.38 932.427 1268.67 942.51 cv
cp
1266.29 960.28 mo
1265.77 942.397 li
1265.44 930.782 1274.97 921.671 1287.02 922.086 cv
1299.07 922.502 1309.18 932.378 1309.55 944.103 cv
1310.11 962.151 li
1310.48 973.875 1300.94 982.948 1288.84 982.378 cv
1276.74 981.809 1266.62 971.896 1266.29 960.28 cv
cp
.0588235 .27451 .54902 rgb
f
1191.78 818.12 mo
1192.5 818.13 li
1203.45 818.267 1212.18 809.465 1211.9 798.569 cv
1211.46 781.583 li
1211.18 770.687 1202.03 761.77 1191.12 761.768 cv
1190.4 761.767 li
1179.49 761.763 1170.77 770.597 1171.02 781.397 cv
1171.41 798.234 li
1171.67 809.034 1180.83 817.982 1191.78 818.12 cv
.376471 .521569 .65098 rgb
f
1211.91 798.925 mo
1211.8 794.727 li
1211.46 781.583 li
1211.32 776.108 1208.94 771.134 1205.22 767.539 cv
1208.94 771.062 1211.32 775.907 1211.46 781.231 cv
1211.91 798.921 li
1211.91 798.925 li
1171.02 781.304 mo
1171.01 781.048 li
1170.89 775.782 1173.02 770.992 1176.55 767.503 cv
1173.04 771.043 1170.92 775.927 1171.02 781.304 cv
1190.92 761.767 mo
1190.64 761.767 li
1190.68 761.767 1190.71 761.767 1190.75 761.767 cv
1190.75 761.767 1190.76 761.767 1190.76 761.767 cv
1190.81 761.767 1190.86 761.767 1190.92 761.767 cv
.533333 .627451 .721569 rgb
f
1211.8 794.727 mo
1211.59 786.474 li
1211.32 775.772 1202 767.002 1190.89 766.985 cv
1190.88 766.985 1190.87 766.985 1190.86 766.985 cv
1179.76 766.985 1170.89 775.644 1171.13 786.24 cv
1171.02 781.304 li
1170.92 775.927 1173.04 771.043 1176.55 767.503 cv
1180.11 763.989 1185.09 761.797 1190.64 761.767 cv
1190.92 761.767 li
1196.44 761.811 1201.5 764.014 1205.22 767.539 cv
1208.94 771.134 1211.32 776.108 1211.46 781.583 cv
1211.8 794.727 li
.258824 .396078 .537255 rgb
f
1172.45 781.055 mo
1172.86 798.594 li
1173.09 808.478 1181.73 816.623 1192.11 816.75 cv
1202.49 816.878 1210.73 808.874 1210.48 798.909 cv
1210.02 781.225 li
1209.77 771.26 1201.14 763.147 1190.79 763.141 cv
1180.44 763.135 1172.21 771.171 1172.45 781.055 cv
cp
1169.99 798.57 mo
1169.58 781.041 li
1169.31 769.656 1178.8 760.395 1190.73 760.395 cv
1202.65 760.395 1212.59 769.744 1212.89 781.237 cv
1213.35 798.933 li
1213.64 810.427 1204.15 819.651 1192.18 819.497 cv
1180.21 819.343 1170.25 809.956 1169.99 798.57 cv
cp
.0588235 .27451 .54902 rgb
f
1193.74 897.376 mo
1194.46 897.397 li
1205.47 897.722 1214.25 889.074 1213.96 878.178 cv
1213.52 861.189 li
1213.24 850.293 1204.04 841.221 1193.07 841.028 cv
1192.35 841.016 li
1181.38 840.823 1172.61 849.504 1172.87 860.304 cv
1173.27 877.145 li
1173.52 887.946 1182.74 897.05 1193.74 897.376 cv
.376471 .521569 .65098 rgb
f
1213.97 878.533 mo
1213.97 878.304 li
1213.96 878.262 1213.96 878.219 1213.96 878.178 cv
1213.75 870.008 li
1213.97 878.529 li
1213.97 878.533 li
1172.98 865.091 mo
1172.86 859.956 li
1172.74 854.698 1174.87 849.953 1178.41 846.528 cv
1174.87 850.025 1172.74 854.899 1172.87 860.304 cv
1172.98 865.091 li
1213.52 861.112 mo
1213.36 855.668 1210.97 850.683 1207.25 847.041 cv
1210.99 850.628 1213.37 855.512 1213.51 860.838 cv
1213.52 861.112 li
1192.87 841.025 mo
1192.53 841.019 li
1192.59 841.02 1192.65 841.02 1192.71 841.021 cv
1192.76 841.022 1192.82 841.023 1192.87 841.025 cv
.533333 .627451 .721569 rgb
f
1213.97 878.304 mo
1213.65 866.08 li
1213.37 855.377 1204.01 846.449 1192.84 846.241 cv
1192.7 846.239 1192.57 846.237 1192.44 846.237 cv
1181.46 846.237 1172.74 854.669 1172.98 865.15 cv
1172.98 865.091 li
1172.87 860.304 li
1172.74 854.899 1174.87 850.025 1178.41 846.528 cv
1181.93 843.12 1186.85 841.018 1192.33 841.018 cv
1192.4 841.018 1192.47 841.018 1192.53 841.019 cv
1192.87 841.025 li
1198.42 841.165 1203.51 843.456 1207.25 847.041 cv
1210.97 850.683 1213.36 855.668 1213.52 861.112 cv
1213.75 870.008 li
1213.96 878.178 li
1213.96 878.219 1213.96 878.262 1213.97 878.304 cv
.258824 .396078 .537255 rgb
f
1174.3 859.987 mo
1174.72 877.529 li
1174.95 887.414 1183.63 895.706 1194.07 896.012 cv
1204.51 896.317 1212.79 888.458 1212.53 878.492 cv
1212.07 860.807 li
1211.81 850.841 1203.14 842.581 1192.74 842.396 cv
1182.34 842.211 1174.07 850.103 1174.3 859.987 cv
cp
1171.83 877.456 mo
1171.42 859.925 li
1171.15 848.538 1180.69 839.443 1192.67 839.649 cv
1204.66 839.856 1214.65 849.375 1214.95 860.869 cv
1215.41 878.565 li
1215.71 890.061 1206.17 899.118 1194.14 898.759 cv
1182.11 898.398 1172.1 888.843 1171.83 877.456 cv
cp
.0588235 .27451 .54902 rgb
f
1195.71 976.64 mo
1196.44 976.673 li
1207.5 977.186 1216.32 968.691 1216.03 957.793 cv
1215.59 940.804 li
1215.31 929.906 1206.06 920.679 1195.03 920.298 cv
1194.31 920.274 li
1183.29 919.893 1174.48 928.421 1174.74 939.224 cv
1175.14 956.065 li
1175.4 966.868 1184.65 976.127 1195.71 976.64 cv
.376471 .521569 .65098 rgb
f
1216.04 958.148 mo
1216.04 957.926 li
1216.04 957.881 1216.04 957.837 1216.03 957.793 cv
1215.59 940.804 li
1215.45 935.328 1213.04 930.275 1209.28 926.553 cv
1213.04 930.203 1215.44 935.126 1215.58 940.452 cv
1216.04 958.144 li
1216.04 958.148 li
1174.85 944.068 mo
1174.73 938.875 li
1174.6 933.607 1176.75 928.892 1180.32 925.527 cv
1176.76 928.963 1174.61 933.808 1174.74 939.224 cv
1174.85 944.006 li
1174.85 944.026 1174.85 944.048 1174.85 944.068 cv
1194.79 920.289 mo
1194.51 920.28 li
1194.56 920.282 1194.62 920.283 1194.67 920.285 cv
1194.71 920.286 1194.75 920.288 1194.79 920.289 cv
.533333 .627451 .721569 rgb
f
1216.04 957.926 mo
1215.72 945.695 li
1215.44 934.99 1206.03 925.905 1194.8 925.506 cv
1194.54 925.497 1194.29 925.492 1194.03 925.492 cv
1183.19 925.492 1174.64 933.671 1174.85 944.006 cv
1174.74 939.224 li
1174.61 933.808 1176.76 928.963 1180.32 925.527 cv
1183.78 922.266 1188.58 920.272 1193.93 920.272 cv
1194.12 920.272 1194.31 920.275 1194.51 920.28 cv
1194.79 920.289 li
1200.38 920.513 1205.52 922.893 1209.28 926.553 cv
1213.04 930.275 1215.45 935.328 1215.59 940.804 cv
1216.03 957.793 li
1216.04 957.837 1216.04 957.881 1216.04 957.926 cv
.258824 .396078 .537255 rgb
f
1176.18 938.931 mo
1176.6 956.475 li
1176.83 966.361 1185.56 974.798 1196.04 975.281 cv
1206.53 975.766 1214.85 968.05 1214.59 958.083 cv
1214.13 940.396 li
1213.87 930.429 1205.16 922.023 1194.71 921.66 cv
1184.25 921.297 1175.94 929.045 1176.18 938.931 cv
cp
1173.7 956.353 mo
1173.28 938.819 li
1173.01 927.431 1182.59 918.501 1194.64 918.913 cv
1206.68 919.325 1216.73 929.013 1217.03 940.508 cv
1217.49 958.206 li
1217.79 969.702 1208.2 978.594 1196.11 978.028 cv
1184.02 977.465 1173.97 967.741 1173.7 956.353 cv
cp
.0588235 .27451 .54902 rgb
f
1100.02 816.972 mo
1100.74 816.981 li
1111.69 817.118 1120.47 808.491 1120.25 797.811 cv
1119.92 781.162 li
1119.7 770.483 1110.6 761.743 1099.69 761.74 cv
1098.97 761.739 li
1088.06 761.736 1079.29 770.393 1079.47 780.977 cv
1079.77 797.48 li
1079.96 808.065 1089.07 816.836 1100.02 816.972 cv
.376471 .521569 .65098 rgb
f
1118.28 778.574 mo
1115.07 771.716 1107.77 766.866 1099.42 766.854 cv
1099.41 766.854 1099.4 766.854 1099.39 766.854 cv
1091.06 766.854 1083.96 771.636 1081.01 778.415 cv
1081.68 772.726 1085.28 767.88 1090.39 765.235 cv
1105.22 763.997 li
1105.29 763.993 li
1112.07 766.114 1117.23 771.746 1118.28 778.574 cv
.258824 .396078 .537255 rgb
f
1080.9 780.643 mo
1081.21 797.832 li
1081.39 807.518 1089.98 815.503 1100.36 815.63 cv
1110.74 815.756 1119.02 807.911 1118.83 798.143 cv
1118.48 780.81 li
1118.28 771.044 1109.7 763.093 1099.35 763.087 cv
1089 763.08 1080.73 770.956 1080.9 780.643 cv
1078.34 797.809 mo
1078.03 780.629 li
1077.84 769.472 1087.38 760.394 1099.3 760.394 cv
1111.22 760.394 1121.11 769.559 1121.34 780.824 cv
1121.7 798.168 li
1121.93 809.434 1112.38 818.474 1100.41 818.321 cv
1088.44 818.169 1078.54 808.967 1078.34 797.809 cv
.0588235 .27451 .54902 rgb
f
1101.53 894.657 mo
1102.25 894.679 li
1113.25 895.002 1122.08 886.527 1121.85 875.845 cv
1121.51 859.192 li
1121.29 848.51 1112.14 839.616 1101.18 839.426 cv
1100.46 839.413 li
1089.49 839.223 1080.68 847.729 1080.87 858.315 cv
1081.17 874.821 li
1081.37 885.408 1090.53 894.335 1101.53 894.657 cv
.376471 .521569 .65098 rgb
f
1121.86 876.192 mo
1121.86 875.928 li
1121.86 875.9 1121.85 875.873 1121.85 875.845 cv
1121.51 859.192 li
1121.4 853.824 1119.03 848.907 1115.32 845.32 cv
1119.04 848.837 1121.4 853.626 1121.5 858.848 cv
1121.86 876.19 li
1121.86 876.192 li
1080.96 863.064 mo
1080.93 861.23 li
1080.96 863.001 li
1080.96 863.021 1080.96 863.043 1080.96 863.064 cv
1080.87 858.234 mo
1080.87 857.974 li
1080.77 852.807 1082.94 848.145 1086.52 844.787 cv
1082.96 848.198 1080.8 852.954 1080.87 858.234 cv
1100.91 839.421 mo
1100.72 839.418 li
1100.75 839.418 1100.78 839.419 1100.82 839.419 cv
1100.85 839.42 1100.88 839.42 1100.91 839.421 cv
.533333 .627451 .721569 rgb
f
1121.86 875.928 mo
1121.61 863.986 li
1121.39 853.494 1112.08 844.741 1100.92 844.535 cv
1100.78 844.532 1100.65 844.531 1100.51 844.531 cv
1089.56 844.531 1080.81 852.759 1080.96 863.001 cv
1080.93 861.23 li
1080.87 858.234 li
1080.8 852.954 1082.96 848.198 1086.52 844.787 cv
1090.06 841.464 1094.97 839.416 1100.44 839.416 cv
1100.53 839.416 1100.62 839.416 1100.72 839.418 cv
1100.91 839.421 li
1106.48 839.542 1111.58 841.79 1115.32 845.32 cv
1119.03 848.907 1121.4 853.824 1121.51 859.192 cv
1121.85 875.845 li
1121.85 875.873 1121.86 875.9 1121.86 875.928 cv
.258824 .396078 .537255 rgb
f
1082.31 858.005 mo
1082.62 875.198 li
1082.8 884.888 1091.43 893.018 1101.87 893.32 cv
1112.3 893.624 1120.62 885.922 1120.42 876.152 cv
1120.06 858.816 li
1119.86 849.048 1111.24 840.95 1100.84 840.767 cv
1090.44 840.583 1082.13 848.316 1082.31 858.005 cv
cp
1079.74 875.126 mo
1079.43 857.942 li
1079.22 846.782 1088.81 837.87 1100.79 838.074 cv
1112.77 838.278 1122.71 847.611 1122.94 858.878 cv
1123.3 876.226 li
1123.54 887.493 1113.94 896.369 1101.92 896.013 cv
1089.89 895.656 1079.94 886.287 1079.74 875.126 cv
cp
.0588235 .27451 .54902 rgb
f
1103.06 972.358 mo
1103.79 972.391 li
1114.84 972.9 1123.7 964.576 1123.48 953.893 cv
1123.13 937.236 li
1122.91 926.553 1113.71 917.504 1102.69 917.127 cv
1101.97 917.103 li
1090.95 916.727 1082.1 925.082 1082.3 935.671 cv
1082.61 952.181 li
1082.81 962.769 1092.01 971.85 1103.06 972.358 cv
.376471 .521569 .65098 rgb
f
1123.49 954.24 mo
1123.48 954 li
1123.48 953.964 1123.48 953.928 1123.48 953.893 cv
1123.3 945.374 li
1123.49 954.237 li
1123.49 954.24 li
1123.13 937.152 mo
1122.99 931.827 1120.63 926.914 1116.93 923.285 cv
1120.65 926.862 1123.01 931.68 1123.12 936.892 cv
1123.13 937.152 li
1082.3 935.56 mo
1082.29 935.329 li
1082.2 930.158 1084.38 925.531 1087.97 922.233 cv
1084.41 925.578 1082.23 930.288 1082.3 935.56 cv
.533333 .627451 .721569 rgb
f
1123.48 954 mo
1123.23 942.031 li
1123.01 931.538 1113.65 922.628 1102.43 922.231 cv
1102.17 922.222 1101.91 922.218 1101.65 922.218 cv
1090.8 922.218 1082.2 930.263 1082.39 940.42 cv
1082.3 935.56 li
1082.23 930.288 1084.41 925.578 1087.97 922.233 cv
1091.45 919.048 1096.24 917.102 1101.58 917.102 cv
1101.83 917.102 1102.08 917.106 1102.33 917.115 cv
1107.98 917.308 1113.15 919.659 1116.93 923.285 cv
1120.63 926.914 1122.99 931.827 1123.13 937.152 cv
1123.3 945.374 li
1123.48 953.893 li
1123.48 953.928 1123.48 953.964 1123.48 954 cv
.258824 .396078 .537255 rgb
f
1083.74 935.385 mo
1084.06 952.582 li
1084.25 962.273 1092.92 970.548 1103.4 971.027 cv
1113.88 971.507 1122.24 963.946 1122.04 954.176 cv
1121.68 936.836 li
1121.47 927.065 1112.81 918.822 1102.36 918.462 cv
1091.91 918.103 1083.56 925.694 1083.74 935.385 cv
cp
1081.17 952.461 mo
1080.85 935.273 li
1080.64 924.111 1090.27 915.361 1102.31 915.77 cv
1114.35 916.178 1124.33 925.678 1124.57 936.947 cv
1124.93 954.297 li
1125.17 965.567 1115.53 974.279 1103.45 973.72 cv
1091.37 973.161 1081.38 963.625 1081.17 952.461 cv
cp
.0588235 .27451 .54902 rgb
f
1391.32 789.358 mo
1390.01 809.21 1389.59 828.945 1389.52 848.716 cv
1389.47 868.478 1389.8 888.231 1390.26 907.985 cv
1390.74 927.738 1391.39 947.495 1392.35 967.239 cv
1392.86 977.109 1393.39 986.979 1394.07 996.847 cv
1394.64 1004.24 li
1394.84 1006.7 1395.03 1009.17 1395.3 1011.63 cv
1396.08 1019.01 li
1396.43 1021.46 1396.82 1023.9 1397.15 1026.38 cv
1396.36 1024.03 1395.63 1021.65 1394.86 1019.26 cv
1394.22 1016.85 1393.66 1014.43 1393.05 1012 cv
1392.4 1009.58 1391.97 1007.13 1391.48 1004.69 cv
1390.05 997.341 li
1389.28 992.425 1388.45 987.504 1387.76 982.572 cv
1387.11 977.64 1386.48 972.695 1385.94 967.748 cv
1383.77 947.956 1382.47 928.083 1382.02 908.188 cv
1381.55 888.294 1381.86 868.372 1383.12 848.494 cv
1383.51 843.526 1383.81 838.558 1384.27 833.6 cv
1385.94 818.747 li
1386.67 813.813 1387.43 808.884 1388.23 803.975 cv
1389.16 799.075 1390.22 794.202 1391.32 789.358 cv
cp
1 1 1 rgb
f
614.07 1015.23 mo
614.964 1001.91 615.493 988.666 615.851 975.398 cv
615.954 968.763 616.225 962.138 616.25 955.504 cv
616.35 950.532 li
616.404 945.56 li
616.429 942.243 616.501 938.929 616.467 935.613 cv
616.549 922.353 616.556 909.089 616.325 895.83 cv
616.195 889.201 616.04 882.575 615.765 875.947 cv
615.581 872.645 615.464 869.318 615.175 866.021 cv
614.742 861.061 li
614.07 856.112 li
615.565 860.905 li
615.97 862.528 616.314 864.164 616.693 865.8 cv
617.102 867.433 617.346 869.085 617.634 870.733 cv
618.47 875.688 li
618.892 879.001 619.361 882.319 619.72 885.642 cv
620.059 888.964 620.386 892.294 620.638 895.624 cv
621.675 908.945 622.112 922.3 621.997 935.648 cv
621.988 938.985 621.873 942.321 621.805 945.658 cv
621.733 948.994 621.66 952.33 621.472 955.664 cv
621.146 962.33 620.76 968.997 620.145 975.647 cv
618.973 988.94 617.231 1002.24 614.07 1015.23 cv
.72549 .788235 .847059 rgb
f
1539.39 1106.79 mo
1537.64 1099.57 1532.27 1093.77 1525.19 1091.52 cv
1494.45 1081.76 1462.88 1072.6 1430.56 1063.98 cv
1300.75 1029.36 1158.09 1003.94 1002.22 987.984 cv
1000.74 987.832 999.245 987.832 997.767 987.984 cv
841.906 1003.94 699.243 1029.36 569.431 1063.98 cv
537.109 1072.6 505.538 1081.76 474.801 1091.52 cv
467.724 1093.77 462.351 1099.57 460.597 1106.79 cv
440.279 1190.33 li
438.539 1197.48 438.213 1204.92 439.349 1212.19 cv
469.386 1404.61 511.838 1580.93 574.313 1731.27 cv
577.272 1738.39 583.82 1743.38 591.477 1744.3 cv
997.443 1793.3 li
999.138 1793.51 1000.85 1793.51 1002.55 1793.3 cv
1408.51 1744.3 li
1416.17 1743.38 1422.72 1738.39 1425.68 1731.27 cv
1488.16 1580.9 1530.62 1404.55 1560.66 1212.09 cv
1561.78 1204.88 1561.46 1197.52 1559.74 1190.42 cv
1539.39 1106.79 li
.164706 .333333 .54902 rgb
f
1192.87 1770.19 mo
1191.39 1618.53 1234.52 1273.99 1297.53 1150.56 cv
1423.93 1178.53 1539.41 1208.26 1541.67 1208.84 cv
1541.81 1212.37 1541.63 1215.9 1541.1 1219.4 cv
1512.37 1409.44 1471.77 1583.57 1412.02 1732.05 cv
1409.19 1739.08 1402.93 1744.01 1395.61 1744.92 cv
1192.87 1770.19 li
.121569 .266667 .47451 rgb
f
1559.88 1191.03 mo
1559.88 1191.03 1559.88 1191.02 1559.88 1191.01 cv
1559.88 1191.02 1559.88 1191.03 1559.88 1191.03 cv
1559.87 1190.97 mo
1559.86 1190.96 1559.86 1190.94 1559.85 1190.93 cv
1559.86 1190.94 1559.86 1190.96 1559.87 1190.97 cv
1559.85 1190.91 mo
1559.81 1190.75 1559.77 1190.59 1559.74 1190.42 cv
1559.77 1190.59 1559.81 1190.75 1559.85 1190.91 cv
440.239 1190.49 mo
440.241 1190.48 440.243 1190.48 440.245 1190.47 cv
440.243 1190.48 440.241 1190.48 440.239 1190.49 cv
440.259 1190.41 mo
440.266 1190.38 440.272 1190.35 440.279 1190.33 cv
440.272 1190.35 440.266 1190.38 440.259 1190.41 cv
1539.1 1105.7 mo
1537.09 1098.99 1531.91 1093.65 1525.19 1091.52 cv
1502.54 1084.33 1479.44 1077.46 1455.91 1070.9 cv
1479.44 1077.46 1502.54 1084.33 1525.19 1091.52 cv
1531.91 1093.65 1537.09 1098.99 1539.1 1105.7 cv
460.892 1105.7 mo
462.901 1098.99 468.084 1093.65 474.801 1091.52 cv
496.582 1084.61 518.782 1077.99 541.371 1071.66 cv
518.782 1077.99 496.582 1084.61 474.801 1091.52 cv
468.084 1093.65 462.901 1098.99 460.892 1105.7 cv
562.846 1065.75 mo
563.711 1065.52 564.577 1065.28 565.443 1065.05 cv
564.577 1065.28 563.711 1065.52 562.846 1065.75 cv
1437.15 1065.75 mo
1436.35 1065.53 1435.55 1065.32 1434.75 1065.1 cv
1435.55 1065.32 1436.35 1065.53 1437.15 1065.75 cv
997.767 987.984 mo
998.506 987.907 999.251 987.869 999.995 987.869 cv
1000.72 987.869 1001.45 987.906 1002.17 987.979 cv
1001.45 987.906 1000.72 987.87 999.995 987.87 cv
999.251 987.87 998.506 987.908 997.767 987.984 cv
1 1 1 rgb
f
1561.27 1201.41 mo
1557.24 1200.4 1126.55 1093.01 1000 1093.01 cv
877.8 1093.01 470.268 1193.15 438.754 1200.94 cv
438.922 1197.43 439.415 1193.93 440.239 1190.49 cv
440.241 1190.48 440.243 1190.48 440.245 1190.47 cv
440.25 1190.45 440.254 1190.43 440.259 1190.41 cv
440.266 1190.38 440.272 1190.35 440.279 1190.33 cv
440.279 1190.33 li
460.597 1106.79 li
460.686 1106.42 460.784 1106.06 460.892 1105.7 cv
462.901 1098.99 468.084 1093.65 474.801 1091.52 cv
496.582 1084.61 518.782 1077.99 541.371 1071.66 cv
548.492 1069.66 555.648 1067.69 562.846 1065.75 cv
563.711 1065.52 564.577 1065.28 565.443 1065.05 cv
566.77 1064.69 568.101 1064.34 569.431 1063.98 cv
699.243 1029.36 841.906 1003.94 997.767 987.984 cv
997.767 987.984 li
998.506 987.908 999.251 987.87 999.995 987.87 cv
1000.72 987.87 1001.45 987.906 1002.17 987.979 cv
1002.19 987.98 1002.21 987.982 1002.22 987.984 cv
1158.09 1003.94 1300.75 1029.36 1430.56 1063.98 cv
1431.96 1064.36 1433.35 1064.73 1434.75 1065.1 cv
1435.55 1065.32 1436.35 1065.53 1437.15 1065.75 cv
1443.43 1067.44 1449.69 1069.16 1455.91 1070.9 cv
1479.44 1077.46 1502.54 1084.33 1525.19 1091.52 cv
1531.91 1093.65 1537.09 1098.99 1539.1 1105.7 cv
1539.21 1106.06 1539.3 1106.42 1539.39 1106.79 cv
1559.74 1190.42 li
1559.74 1190.42 li
1559.77 1190.59 1559.81 1190.75 1559.85 1190.91 cv
1559.85 1190.92 1559.85 1190.92 1559.85 1190.93 cv
1559.86 1190.94 1559.86 1190.96 1559.87 1190.97 cv
1559.87 1190.99 1559.87 1191 1559.88 1191.01 cv
1559.88 1191.02 1559.88 1191.03 1559.88 1191.03 cv
1560.67 1194.44 1561.13 1197.92 1561.27 1201.41 cv
962.436 1026.38 mo
922.788 1028.46 883.272 1032.69 843.958 1038.27 cv
804.643 1043.87 765.506 1050.8 726.663 1059.08 cv
716.964 1061.21 707.253 1063.29 697.59 1065.56 cv
687.922 1067.83 678.219 1069.94 668.605 1072.42 cv
658.981 1074.86 649.337 1077.21 639.751 1079.79 cv
630.152 1082.32 620.549 1084.83 611.02 1087.62 cv
572.798 1098.35 534.909 1110.26 497.63 1123.91 cv
536.232 1114.64 574.661 1105.07 613.176 1095.95 cv
632.458 1091.49 651.682 1086.82 671.005 1082.59 cv
680.646 1080.38 690.298 1078.23 699.954 1076.11 cv
709.598 1073.92 719.285 1071.94 728.961 1069.9 cv
767.651 1061.72 806.43 1053.95 845.347 1046.8 cv
884.265 1039.63 923.3 1033.04 962.436 1026.38 cv
1521.63 1119.89 mo
1521.64 1119.9 1521.66 1119.9 1521.67 1119.9 cv
1521.68 1119.9 1521.69 1119.89 1521.69 1119.86 cv
1521.54 1119.79 li
1521.24 1119.65 li
1520.64 1119.38 li
1519.43 1118.88 li
1517 1117.87 li
1512.11 1115.95 li
1508.86 1114.68 1505.57 1113.51 1502.3 1112.29 cv
1495.73 1109.91 1489.13 1107.67 1482.51 1105.5 cv
1469.27 1101.18 1455.93 1097.18 1442.52 1093.46 cv
1429.11 1089.73 1415.62 1086.28 1402.05 1083.15 cv
1388.47 1080.05 1374.81 1077.2 1360.94 1075.14 cv
1373.89 1080.53 1387.07 1085.11 1400.31 1089.44 cv
1413.56 1093.75 1426.89 1097.74 1440.3 1101.45 cv
1453.71 1105.17 1467.2 1108.62 1480.77 1111.77 cv
1487.56 1113.32 1494.37 1114.82 1501.21 1116.19 cv
1504.64 1116.84 1508.05 1117.54 1511.49 1118.16 cv
1516.66 1119.07 li
1519.25 1119.5 li
1520.54 1119.71 li
1521.19 1119.82 li
1521.51 1119.87 li
1521.63 1119.89 li
1521.6 1119.88 mo
1521.56 1119.87 li
1521.56 1119.87 1521.56 1119.87 1521.56 1119.87 cv
1521.57 1119.87 1521.59 1119.87 1521.6 1119.88 cv
.584314 .666667 .776471 rgb
f
999.755 1774.01 mo
999.063 1774.01 li
997.679 1608.5 li
996.642 1442.98 li
996.268 1387.81 995.497 1332.64 995.95 1277.47 cv
996.199 1249.88 996.449 1222.3 996.998 1194.71 cv
997.83 1153.34 li
998.246 1139.54 998.532 1125.75 999.063 1111.96 cv
999.755 1111.96 li
1000.29 1125.75 1000.57 1139.54 1000.99 1153.34 cv
1001.82 1194.71 li
1002.37 1222.3 1002.62 1249.88 1002.87 1277.47 cv
1003.32 1332.64 1002.55 1387.81 1002.18 1442.98 cv
1001.14 1608.5 li
999.755 1774.01 li
.270588 .427451 .6 rgb
f
919.38 1783.88 mo
805.937 1770.19 li
812.958 1633.95 773.45 1289.04 705.202 1158.8 cv
728.262 1152.85 805.941 1133.26 888.001 1119.87 cv
908.033 1343.15 918.494 1560.59 919.38 1783.88 cv
f
986.497 1793.41 mo
985.686 1793.4 935.219 1785.79 935.219 1785.79 cv
935.219 1785.79 li
986.48 1791.98 li
986.497 1793.41 li
.687013 .759846 .824806 rgb
f
986.48 1791.98 mo
935.219 1785.79 li
935.937 1562.4 925.766 1343.04 902.462 1119.87 cv
927.247 1117.29 952.369 1111.97 978.196 1111.96 cv
986.48 1791.98 li
.270588 .427451 .6 rgb
f
497.63 1123.91 mo
534.909 1110.26 572.798 1098.35 611.02 1087.62 cv
620.549 1084.83 630.152 1082.32 639.751 1079.79 cv
649.337 1077.21 658.981 1074.86 668.605 1072.42 cv
678.219 1069.94 687.922 1067.83 697.59 1065.56 cv
707.253 1063.29 716.964 1061.21 726.663 1059.08 cv
765.506 1050.8 804.643 1043.87 843.958 1038.27 cv
883.272 1032.69 922.788 1028.46 962.436 1026.38 cv
923.3 1033.04 884.265 1039.63 845.347 1046.8 cv
806.43 1053.95 767.651 1061.72 728.961 1069.9 cv
719.285 1071.94 709.598 1073.92 699.954 1076.11 cv
690.298 1078.23 680.646 1080.38 671.005 1082.59 cv
651.682 1086.82 632.458 1091.49 613.176 1095.95 cv
574.661 1105.07 536.232 1114.64 497.63 1123.91 cv
.792157 .835294 .890196 rgb
f
1521.67 1119.9 mo
1521.66 1119.9 1521.64 1119.9 1521.63 1119.89 cv
1521.51 1119.87 li
1521.19 1119.82 li
1520.54 1119.71 li
1519.25 1119.5 li
1516.66 1119.07 li
1511.49 1118.16 li
1508.05 1117.54 1504.64 1116.84 1501.21 1116.19 cv
1494.37 1114.82 1487.56 1113.32 1480.77 1111.77 cv
1467.2 1108.62 1453.71 1105.17 1440.3 1101.45 cv
1426.89 1097.74 1413.56 1093.75 1400.31 1089.44 cv
1387.07 1085.11 1373.89 1080.53 1360.94 1075.14 cv
1374.81 1077.2 1388.47 1080.05 1402.05 1083.15 cv
1415.62 1086.28 1429.11 1089.73 1442.52 1093.46 cv
1455.93 1097.18 1469.27 1101.18 1482.51 1105.5 cv
1489.13 1107.67 1495.73 1109.91 1502.3 1112.29 cv
1505.57 1113.51 1508.86 1114.68 1512.11 1115.95 cv
1517 1117.87 li
1519.43 1118.88 li
1520.64 1119.38 li
1521.24 1119.65 li
1521.54 1119.79 li
1521.69 1119.86 li
1521.69 1119.89 1521.68 1119.9 1521.67 1119.9 cv
1521.56 1119.87 mo
1521.56 1119.87 1521.56 1119.87 1521.56 1119.87 cv
1521.6 1119.88 li
1521.59 1119.87 1521.57 1119.87 1521.56 1119.87 cv
f
1021.8 1026.38 mo
1027.88 1026.35 1034 1026.24 1040.08 1026.48 cv
1043.13 1026.58 1046.17 1026.74 1049.22 1026.87 cv
1053.79 1027.08 li
1058.35 1027.37 li
1064.42 1027.84 1070.51 1028.24 1076.57 1028.8 cv
1082.63 1029.35 1088.69 1030 1094.75 1030.61 cv
1118.96 1033.28 1143.07 1036.65 1167.1 1040.49 cv
1191.13 1044.33 1215.07 1048.65 1238.92 1053.48 cv
1262.77 1058.27 1286.54 1063.46 1310.12 1069.6 cv
1285.93 1066.74 1261.87 1063.26 1237.84 1059.63 cv
1213.8 1056.06 1189.81 1052.21 1165.83 1048.39 cv
1093.93 1036.78 li
1081.93 1034.95 1069.95 1033 1057.93 1031.26 cv
1051.94 1030.25 1045.92 1029.6 1039.9 1028.68 cv
1036.9 1028.2 1033.88 1027.89 1030.86 1027.53 cv
1027.85 1027.15 1024.83 1026.8 1021.8 1026.38 cv
cp
.74902 .180392 .129412 rgb
f
999.995 507.624 mo
789.584 507.624 li
579.173 507.624 li
583.323 568.527 li
579.173 629.431 li
737.263 629.431 li
895.354 629.431 li
999.995 629.431 li
1104.64 629.431 li
1262.73 629.431 li
1420.82 629.431 li
1416.67 568.527 li
1420.82 507.624 li
1210.41 507.624 li
999.995 507.624 li
.85098 .85098 .85098 rgb
f
999.995 507.624 mo
999.995 506.24 li
789.584 506.24 li
577.692 506.24 li
581.936 568.527 li
577.692 630.814 li
737.263 630.814 li
895.354 630.814 li
999.995 630.814 li
1104.64 630.814 li
1262.73 630.814 li
1422.3 630.814 li
1418.05 568.527 li
1422.3 506.24 li
1210.41 506.24 li
999.995 506.24 li
999.995 507.624 li
999.995 509.008 li
1210.41 509.008 li
1419.34 509.008 li
1415.28 568.527 li
1419.34 628.047 li
1262.73 628.047 li
1104.64 628.047 li
999.995 628.047 li
895.354 628.047 li
737.263 628.047 li
580.653 628.047 li
584.709 568.527 li
580.653 509.008 li
789.584 509.008 li
999.995 509.008 li
999.995 507.624 li
.164706 .333333 .54902 rgb
f
659.996 621.822 mo
652.31 621.822 li
652.31 574.862 li
680.799 515.548 li
682.527 515.506 684.258 515.464 685.986 515.422 cv
685.986 569.983 li
684.916 570.759 li
685.986 570.759 li
685.986 595.325 li
659.996 621.822 li
649.423 621.822 mo
629.755 621.822 li
649.423 580.872 li
649.423 621.822 li
688.873 592.381 mo
688.873 570.759 li
710.082 570.759 li
688.873 592.381 li
688.873 567.89 mo
688.873 515.352 li
698.78 515.114 708.686 514.887 718.593 514.669 cv
718.572 514.645 li
719.907 514.616 721.214 514.587 722.55 514.558 cv
722.55 543.477 li
688.873 567.89 li
725.437 541.384 mo
725.437 514.496 li
736.671 514.254 747.877 514.028 759.112 513.814 cv
759.112 516.973 li
725.437 541.384 li
761.999 514.879 mo
761.999 513.76 li
762.53 513.75 763.054 513.74 763.585 513.73 cv
761.999 514.879 li
.909804 .909804 .909804 rgb
f
1199.4 621.822 mo
1173.92 621.822 li
1205.79 555.607 li
1205.79 613.762 li
1199.4 621.822 li
1208.68 610.122 mo
1208.68 549.608 li
1226.28 513.024 li
1231.64 513.107 1236.99 513.194 1242.35 513.284 cv
1242.35 550.646 li
1220.09 570.759 li
1239.89 570.759 li
1208.68 610.122 li
1245.24 548.037 mo
1245.24 513.333 li
1256.47 513.524 1267.68 513.728 1278.91 513.947 cv
1278.91 517.61 li
1245.24 548.037 li
1281.8 515.001 mo
1281.8 514.026 li
1282.15 514.033 1282.51 514.039 1282.86 514.046 cv
1281.8 515.001 li
f
893.903 621.822 mo
879.359 621.822 li
905.364 559.641 li
905.364 619.259 li
893.903 621.822 li
908.251 618.614 mo
908.251 552.738 li
925.422 511.681 li
954.643 511.486 983.894 511.386 1013.12 511.38 cv
981.377 532.903 li
981.377 511.783 li
978.49 511.783 li
978.49 534.861 li
944.814 557.698 li
944.814 511.783 li
941.927 511.783 li
941.927 559.656 li
936.02 563.661 li
941.927 565.201 li
941.927 595.044 li
924.411 615 li
908.251 618.614 li
944.814 591.754 mo
944.814 565.954 li
963.242 570.759 li
944.814 591.754 li
f
1383.68 381.802 mo
1179.61 381.802 li
1179.61 385.887 li
1179.61 410.996 li
999.995 410.996 li
820.382 410.996 li
820.382 385.887 li
820.382 381.802 li
616.311 381.802 li
590.834 419.416 581.67 462.609 577.83 507.624 cv
999.995 507.624 li
1422.16 507.624 li
1418.32 462.609 1409.16 419.416 1383.68 381.802 cv
.376471 .521569 .65098 rgb
f
1383.68 381.802 mo
1383.68 381.11 li
1178.92 381.11 li
1178.92 385.887 li
1178.92 410.305 li
999.995 410.305 li
821.073 410.305 li
821.073 385.887 li
821.073 381.11 li
615.944 381.11 li
615.739 381.414 li
590.164 419.173 580.986 462.499 577.141 507.565 cv
577.077 508.316 li
999.995 508.316 li
1422.91 508.316 li
1422.85 507.565 li
1419 462.499 1409.83 419.173 1384.25 381.414 cv
1384.05 381.11 li
1383.68 381.11 li
1383.68 381.802 li
1383.11 382.19 li
1408.49 419.659 1417.64 462.72 1421.47 507.683 cv
1422.16 507.624 li
1422.16 506.932 li
999.995 506.932 li
577.83 506.932 li
577.83 507.624 li
578.52 507.683 li
582.355 462.72 591.504 419.659 616.884 382.19 cv
616.311 381.802 li
616.311 382.493 li
819.69 382.493 li
819.69 385.887 li
819.69 411.688 li
999.995 411.688 li
1180.3 411.688 li
1180.3 385.887 li
1180.3 382.493 li
1383.68 382.493 li
1383.68 381.802 li
1383.11 382.19 li
1383.68 381.802 li
.0588235 .27451 .54902 rgb
f
981.377 629.736 mo
978.49 629.736 li
978.49 511.783 li
981.377 511.783 li
981.377 629.736 li
f
944.814 629.736 mo
941.927 629.736 li
941.927 511.783 li
944.814 511.783 li
944.814 629.736 li
f
908.251 629.736 mo
905.364 629.736 li
905.364 511.783 li
908.251 511.783 li
908.251 629.736 li
f
871.688 629.736 mo
868.802 629.736 li
868.802 511.783 li
871.688 511.783 li
871.688 629.736 li
f
835.125 629.736 mo
832.238 629.736 li
832.238 511.783 li
835.125 511.783 li
835.125 629.736 li
f
798.562 629.736 mo
795.675 629.736 li
795.675 511.783 li
798.562 511.783 li
798.562 629.736 li
f
761.999 629.736 mo
759.112 629.736 li
759.112 511.783 li
761.999 511.783 li
761.999 629.736 li
f
725.437 629.736 mo
722.55 629.736 li
722.55 511.783 li
725.437 511.783 li
725.437 629.736 li
f
688.873 629.736 mo
685.986 629.736 li
685.986 511.783 li
688.873 511.783 li
688.873 629.736 li
f
652.31 629.736 mo
649.423 629.736 li
649.423 511.783 li
652.31 511.783 li
652.31 629.736 li
f
615.747 629.736 mo
612.86 629.736 li
612.86 511.783 li
615.747 511.783 li
615.747 629.736 li
f
1025.86 629.736 mo
1022.97 629.736 li
1022.97 511.783 li
1025.86 511.783 li
1025.86 629.736 li
f
1062.42 629.736 mo
1059.54 629.736 li
1059.54 511.783 li
1062.42 511.783 li
1062.42 629.736 li
f
1098.99 629.736 mo
1096.1 629.736 li
1096.1 511.783 li
1098.99 511.783 li
1098.99 629.736 li
f
1135.55 629.736 mo
1132.66 629.736 li
1132.66 511.783 li
1135.55 511.783 li
1135.55 629.736 li
f
1172.11 629.736 mo
1169.23 629.736 li
1169.23 511.783 li
1172.11 511.783 li
1172.11 629.736 li
f
1208.68 629.736 mo
1205.79 629.736 li
1205.79 511.783 li
1208.68 511.783 li
1208.68 629.736 li
f
1245.24 629.736 mo
1242.35 629.736 li
1242.35 511.783 li
1245.24 511.783 li
1245.24 629.736 li
f
1281.8 629.736 mo
1278.91 629.736 li
1278.91 511.783 li
1281.8 511.783 li
1281.8 629.736 li
f
1318.36 629.736 mo
1315.48 629.736 li
1315.48 511.783 li
1318.36 511.783 li
1318.36 629.736 li
f
1354.93 629.736 mo
1352.04 629.736 li
1352.04 511.783 li
1354.93 511.783 li
1354.93 629.736 li
f
1391.49 629.736 mo
1388.6 629.736 li
1388.6 511.783 li
1391.49 511.783 li
1391.49 629.736 li
f
1417.75 577.041 mo
584.245 577.041 li
584.245 559.489 li
1417.75 559.489 li
1417.75 577.041 li
cp
.376471 .521569 .65098 rgb
f
1503.82 629.431 mo
1420.82 629.431 li
1104.64 629.431 li
1053.45 617.985 li
999.995 619.044 li
946.545 617.985 li
895.354 629.431 li
579.173 629.431 li
496.172 629.431 li
488.317 629.431 482.936 637.35 485.827 644.652 cv
514.474 717.012 li
519.05 728.569 530.22 736.16 542.649 736.16 cv
587.389 736.16 li
895.354 736.16 li
949.557 731.632 li
999.995 732.716 li
1050.43 731.632 li
1104.64 736.16 li
1412.6 736.16 li
1457.34 736.16 li
1469.77 736.16 1480.94 728.569 1485.52 717.012 cv
1514.16 644.652 li
1517.06 637.35 1511.67 629.431 1503.82 629.431 cv
f
1503.82 629.431 mo
1503.82 628.047 li
1420.82 628.047 li
1104.79 628.047 li
1053.58 616.599 li
999.996 617.66 li
946.406 616.599 li
895.201 628.047 li
579.173 628.047 li
496.172 628.047 li
492.596 628.045 489.443 629.523 487.216 631.819 cv
484.987 634.113 483.653 637.23 483.652 640.547 cv
483.651 642.071 483.936 643.634 484.541 645.161 cv
513.188 717.521 li
517.973 729.606 529.652 737.543 542.649 737.543 cv
587.389 737.543 li
895.412 737.543 li
949.599 733.016 li
999.995 734.099 li
1050.39 733.016 li
1104.58 737.543 li
1412.6 737.543 li
1457.34 737.543 li
1470.34 737.543 1482.02 729.606 1486.8 717.521 cv
1515.45 645.161 li
1516.05 643.634 1516.34 642.071 1516.34 640.547 cv
1516.34 637.23 1515 634.113 1512.77 631.819 cv
1510.55 629.523 1507.39 628.045 1503.82 628.047 cv
1503.82 629.431 li
1503.82 630.814 li
1506.63 630.816 1509.04 631.955 1510.79 633.747 cv
1512.53 635.54 1513.57 637.981 1513.57 640.547 cv
1513.57 641.728 1513.35 642.939 1512.88 644.143 cv
1484.23 716.503 li
1479.86 727.532 1469.2 734.777 1457.34 734.777 cv
1412.6 734.777 li
1104.69 734.777 li
1050.48 730.247 li
999.995 731.332 li
949.514 730.247 li
895.296 734.777 li
587.389 734.777 li
542.649 734.777 li
530.787 734.777 520.127 727.532 515.761 716.503 cv
487.113 644.143 li
486.637 642.939 486.419 641.728 486.418 640.547 cv
486.417 637.981 487.458 635.54 489.201 633.747 cv
490.947 631.955 493.362 630.816 496.172 630.814 cv
579.173 630.814 li
895.507 630.814 li
946.685 619.372 li
999.995 620.428 li
1053.31 619.372 li
1104.48 630.814 li
1420.82 630.814 li
1503.82 630.814 li
1503.82 629.431 li
.164706 .333333 .54902 rgb
f
1508.3 655.715 mo
1424.92 655.715 li
1425.13 648.201 li
1425.23 648.106 li
1511.31 648.106 li
1508.3 655.715 li
1422.16 655.715 mo
1417.04 655.715 li
1422.29 650.839 li
1422.16 655.715 li
1343.6 655.715 mo
1105.64 655.715 li
1104.68 655.715 1103.71 655.609 1102.77 655.398 cv
1070.33 648.143 li
1089.78 645.11 li
1101.77 647.791 li
1102.71 648 1103.67 648.106 1104.64 648.106 cv
1348.11 648.106 li
1348.06 649.882 li
1343.6 655.715 li
.258824 .396078 .537255 rgb
f
1509.78 655.715 mo
1508.3 655.715 li
1511.31 648.106 li
1512.8 648.106 li
1509.78 655.715 li
.113725 .25098 .45098 rgb
f
896.359 655.715 mo
869.49 655.715 li
876.977 648.106 li
895.354 648.106 li
896.319 648.106 897.281 648 898.222 647.791 cv
945.698 637.174 li
945.91 644.96 li
899.227 655.398 li
898.286 655.609 897.324 655.715 896.359 655.715 cv
819.566 655.715 mo
719.743 655.715 li
729.754 648.106 li
825.438 648.106 li
819.566 655.715 li
687.429 655.715 mo
674.359 655.715 li
682.764 648.106 li
695.833 648.106 li
687.429 655.715 li
605.94 655.715 mo
578.507 655.715 li
578.299 648.106 li
612.635 648.106 li
605.94 655.715 li
575.739 655.715 mo
491.695 655.715 li
488.683 648.106 li
575.532 648.106 li
575.739 655.715 li
992.024 645.153 mo
948.872 644.298 li
948.661 644.345 li
948.453 636.701 li
997.407 637.672 li
992.024 645.153 li
.258824 .396078 .537255 rgb
f
491.695 655.715 mo
490.207 655.715 li
487.195 648.106 li
488.683 648.106 li
491.695 655.715 li
.113725 .25098 .45098 rgb
f
814.153 711.95 mo
776.159 711.95 li
819.566 655.715 li
869.49 655.715 li
814.153 711.95 li
.470588 .592157 .701961 rgb
f
869.49 655.715 mo
819.566 655.715 li
825.438 648.106 li
876.977 648.106 li
869.49 655.715 li
.368627 .486274 .607843 rgb
f
990.442 708.298 mo
950.377 707.436 li
950.262 703.198 li
992.024 645.153 li
1000.74 645.326 li
1000.83 645.327 1000.91 645.328 1001 645.328 cv
1001.09 645.328 1001.17 645.327 1001.26 645.326 cv
1052 644.32 li
1051.79 652.113 li
990.442 708.298 li
947.109 707.58 mo
947.595 706.904 li
947.612 707.538 li
947.109 707.58 li
1054.6 650.596 mo
1054.76 644.663 li
1070.33 648.143 li
1054.6 650.596 li
.470588 .592157 .701961 rgb
f
1070.33 648.143 mo
1054.76 644.663 li
1054.96 637.324 li
1089.78 645.11 li
1070.33 648.143 li
1001 645.328 mo
1000.91 645.328 1000.83 645.327 1000.74 645.326 cv
992.024 645.153 li
997.407 637.672 li
999.735 637.718 li
999.822 637.719 999.909 637.72 999.996 637.72 cv
1000.08 637.72 1000.17 637.719 1000.26 637.718 cv
1052.12 636.689 li
1052.21 636.709 li
1052 644.32 li
1001.26 645.326 li
1001.17 645.327 1001.09 645.328 1001 645.328 cv
.368627 .486274 .607843 rgb
f
1356.49 711.95 mo
1349.14 711.95 li
1350.67 655.715 li
1417.04 655.715 li
1356.49 711.95 li
1346.38 711.95 mo
1300.59 711.95 li
1343.6 655.715 li
1347.91 655.715 li
1346.38 711.95 li
.470588 .592157 .701961 rgb
f
1417.04 655.715 mo
1350.67 655.715 li
1350.88 648.106 li
1380.2 648.106 li
1422.36 648.106 li
1422.29 650.839 li
1417.04 655.715 li
1347.91 655.715 mo
1343.6 655.715 li
1348.06 649.882 li
1347.91 655.715 li
1425.13 648.201 mo
1425.13 648.106 li
1425.23 648.106 li
1425.13 648.201 li
.368627 .486274 .607843 rgb
f
612.243 711.95 mo
580.036 711.95 li
579.329 685.958 li
605.94 655.715 li
649.988 655.715 li
650.574 677.248 li
612.243 711.95 li
577.269 711.95 mo
556.459 711.95 li
576.645 689.009 li
577.269 711.95 li
653.276 674.803 mo
652.757 655.715 li
674.359 655.715 li
653.276 674.803 li
.470588 .592157 .701961 rgb
f
674.359 655.715 mo
652.757 655.715 li
652.55 648.106 li
682.764 648.106 li
674.359 655.715 li
649.988 655.715 mo
605.94 655.715 li
612.635 648.106 li
619.095 648.106 li
649.781 648.106 li
649.988 655.715 li
.368627 .486274 .607843 rgb
f
645.745 711.95 mo
625.312 711.95 li
650.888 688.796 li
651.401 707.652 li
645.745 711.95 li
654.113 705.591 mo
653.59 686.35 li
687.429 655.715 li
719.743 655.715 li
654.113 705.591 li
.470588 .592157 .701961 rgb
f
719.743 655.715 mo
687.429 655.715 li
695.833 648.106 li
729.754 648.106 li
719.743 655.715 li
.368627 .486274 .607843 rgb
f
948.174 728.193 mo
945.163 617.487 li
947.928 617.412 li
950.94 728.118 li
948.174 728.193 li
.164706 .333333 .54902 rgb
f
806.653 736.197 mo
803.643 625.491 li
806.408 625.416 li
809.419 736.122 li
806.653 736.197 li
cp
f
577.928 736.197 mo
574.917 625.491 li
577.682 625.416 li
580.694 736.122 li
577.928 736.197 li
f
652.126 734.301 mo
649.115 623.594 li
651.881 623.518 li
654.892 734.225 li
652.126 734.301 li
f
726.324 732.403 mo
723.313 621.696 li
726.079 621.621 li
729.09 732.328 li
726.324 732.403 li
cp
f
893.979 732.696 mo
882.748 629.216 li
885.499 628.917 li
896.729 732.397 li
893.979 732.696 li
cp
f
1052.49 728.193 mo
1049.72 728.118 li
1052.73 617.412 li
1055.5 617.487 li
1052.49 728.193 li
f
1194.01 736.197 mo
1191.24 736.122 li
1194.25 625.416 li
1197.02 625.491 li
1194.01 736.197 li
cp
f
1422.73 736.197 mo
1419.97 736.122 li
1422.98 625.416 li
1425.75 625.491 li
1422.73 736.197 li
f
1348.54 734.301 mo
1345.77 734.225 li
1348.78 623.518 li
1351.55 623.594 li
1348.54 734.301 li
f
1274.34 732.403 mo
1271.57 732.328 li
1274.58 621.621 li
1277.35 621.696 li
1274.34 732.403 li
cp
f
1106.68 732.696 mo
1103.93 732.397 li
1115.16 628.917 li
1117.91 629.216 li
1106.68 732.696 li
cp
f
1514.96 648.106 mo
1104.64 648.106 li
1103.67 648.106 1102.71 648 1101.77 647.791 cv
1052.12 636.689 li
1000.26 637.718 li
1000.08 637.721 999.908 637.721 999.735 637.718 cv
947.868 636.689 li
898.222 647.791 li
897.281 648 896.319 648.106 895.354 648.106 cv
485.035 648.106 li
477.776 648.106 471.893 642.224 471.893 634.965 cv
471.893 627.705 477.776 621.822 485.035 621.822 cv
893.903 621.822 li
943.677 610.693 li
944.704 610.464 945.745 610.362 946.806 610.379 cv
999.996 611.432 li
1053.18 610.379 li
1054.24 610.361 1055.29 610.464 1056.31 610.693 cv
1106.09 621.822 li
1514.96 621.822 li
1522.21 621.822 1528.1 627.705 1528.1 634.965 cv
1528.1 642.224 1522.21 648.106 1514.96 648.106 cv
1 1 1 rgb
f
1479.55 738.234 mo
1104.64 738.234 li
1104.27 738.234 1103.91 738.22 1103.54 738.19 cv
1050.03 733.719 li
1000.28 734.788 li
1000.09 734.792 999.901 734.792 999.712 734.788 cv
949.964 733.719 li
896.448 738.19 li
896.084 738.22 895.719 738.234 895.354 738.234 cv
520.444 738.234 li
513.186 738.234 507.302 732.35 507.302 725.092 cv
507.302 717.834 513.186 711.95 520.444 711.95 cv
894.806 711.95 li
948.462 707.467 li
948.921 707.43 949.376 707.411 949.839 707.425 cv
999.995 708.503 li
1050.15 707.425 li
1050.61 707.411 1051.07 707.43 1051.53 707.467 cv
1105.18 711.95 li
1479.55 711.95 li
1486.8 711.95 1492.69 717.834 1492.69 725.092 cv
1492.69 732.35 1486.8 738.234 1479.55 738.234 cv
f
1514.96 648.106 mo
1512.8 648.106 li
1511.31 648.106 li
1425.13 648.106 li
1422.36 648.106 li
1380.2 648.106 li
1398.21 621.822 li
1514.96 621.822 li
1522.21 621.822 1528.1 627.705 1528.1 634.965 cv
1528.1 642.224 1522.21 648.106 1514.96 648.106 cv
.87451 .905882 .929412 rgb
f
619.095 648.106 mo
578.299 648.106 li
575.532 648.106 li
488.683 648.106 li
487.195 648.106 li
485.035 648.106 li
478.088 648.106 472.401 642.718 471.925 635.892 cv
471.904 635.586 471.893 635.277 471.893 634.965 cv
471.893 627.705 477.776 621.822 485.035 621.822 cv
601.088 621.822 li
619.095 648.106 li
f
1479.55 738.234 mo
1413.14 738.234 li
1413.14 738.234 li
1479.55 738.234 li
1486.8 738.234 1492.69 732.351 1492.69 725.092 cv
1492.69 725.093 1492.69 725.093 1492.69 725.093 cv
1492.69 732.35 1486.8 738.234 1479.55 738.234 cv
.875294 .904314 .930196 rgb
f
1479.55 738.234 mo
1413.14 738.234 li
1413.1 738.068 1413.06 737.894 1413.01 737.712 cv
1318.82 737.712 li
1336.47 711.95 li
1479.55 711.95 li
1486.8 711.95 1492.69 717.834 1492.69 725.092 cv
1492.69 732.351 1486.8 738.234 1479.55 738.234 cv
.87451 .905882 .929412 rgb
f
586.867 738.234 mo
520.444 738.234 li
513.186 738.234 507.302 732.35 507.302 725.093 cv
507.302 725.093 507.302 725.093 507.302 725.092 cv
507.303 732.351 513.186 738.234 520.444 738.234 cv
586.867 738.234 li
586.867 738.234 li
.875294 .904314 .930196 rgb
f
586.882 738.234 mo
586.867 738.234 li
520.444 738.234 li
513.186 738.234 507.303 732.351 507.302 725.092 cv
507.303 717.834 513.186 711.95 520.444 711.95 cv
662.831 711.95 li
680.48 737.712 li
587.011 737.712 li
586.967 737.894 586.924 738.068 586.882 738.234 cv
.87451 .905882 .929412 rgb
f
1210.48 497.88 mo
1210.1 497.88 1209.79 497.57 1209.79 497.188 cv
1209.79 383.26 li
1209.79 382.878 1210.1 382.568 1210.48 382.568 cv
1210.86 382.568 1211.17 382.878 1211.17 383.26 cv
1211.17 497.188 li
1211.17 497.57 1210.86 497.88 1210.48 497.88 cv
cp
.0588235 .27451 .54902 rgb
f
1233.9 497.88 mo
1233.52 497.88 1233.21 497.57 1233.21 497.188 cv
1233.21 383.26 li
1233.21 382.878 1233.52 382.568 1233.9 382.568 cv
1234.28 382.568 1234.59 382.878 1234.59 383.26 cv
1234.59 497.188 li
1234.59 497.57 1234.28 497.88 1233.9 497.88 cv
cp
f
1257.32 497.88 mo
1256.94 497.88 1256.63 497.57 1256.63 497.188 cv
1256.63 383.26 li
1256.63 382.878 1256.94 382.568 1257.32 382.568 cv
1257.71 382.568 1258.02 382.878 1258.02 383.26 cv
1258.02 497.188 li
1258.02 497.57 1257.71 497.88 1257.32 497.88 cv
cp
f
1280.74 497.88 mo
1280.36 497.88 1280.05 497.57 1280.05 497.188 cv
1280.05 383.26 li
1280.05 382.878 1280.36 382.568 1280.74 382.568 cv
1281.13 382.568 1281.44 382.878 1281.44 383.26 cv
1281.44 497.188 li
1281.44 497.57 1281.13 497.88 1280.74 497.88 cv
cp
f
1304.17 497.88 mo
1303.78 497.88 1303.47 497.57 1303.47 497.189 cv
1303.47 383.26 li
1303.47 382.878 1303.78 382.568 1304.17 382.568 cv
1304.55 382.568 1304.86 382.878 1304.86 383.26 cv
1304.86 497.189 li
1304.86 497.57 1304.55 497.88 1304.17 497.88 cv
f
1327.59 497.88 mo
1327.2 497.88 1326.9 497.57 1326.9 497.189 cv
1326.9 383.26 li
1326.9 382.878 1327.2 382.568 1327.59 382.568 cv
1327.97 382.568 1328.28 382.878 1328.28 383.26 cv
1328.28 497.189 li
1328.28 497.57 1327.97 497.88 1327.59 497.88 cv
f
1351.01 497.88 mo
1350.63 497.88 1350.32 497.57 1350.32 497.189 cv
1350.32 383.26 li
1350.32 382.878 1350.63 382.568 1351.01 382.568 cv
1351.39 382.568 1351.7 382.878 1351.7 383.26 cv
1351.7 497.189 li
1351.7 497.57 1351.39 497.88 1351.01 497.88 cv
f
1374.43 497.88 mo
1374.05 497.88 1373.74 497.57 1373.74 497.189 cv
1373.74 383.26 li
1373.74 382.878 1374.05 382.568 1374.43 382.568 cv
1374.81 382.568 1375.12 382.878 1375.12 383.26 cv
1375.12 497.189 li
1375.12 497.57 1374.81 497.88 1374.43 497.88 cv
f
1397.15 497.884 mo
1396.76 497.884 1396.46 497.574 1396.46 497.192 cv
1396.46 442.202 li
1396.46 441.82 1396.76 441.511 1397.15 441.511 cv
1397.53 441.511 1397.84 441.82 1397.84 442.202 cv
1397.84 497.192 li
1397.84 497.574 1397.53 497.884 1397.15 497.884 cv
f
1416.87 470.39 mo
1179.61 470.39 li
1179.23 470.39 1178.92 470.08 1178.92 469.697 cv
1178.92 469.315 1179.23 469.006 1179.61 469.006 cv
1416.87 469.006 li
1417.25 469.006 1417.56 469.315 1417.56 469.697 cv
1417.56 470.08 1417.25 470.39 1416.87 470.39 cv
cp
f
789.729 497.878 mo
789.346 497.878 789.037 497.568 789.037 497.187 cv
789.037 383.258 li
789.037 382.876 789.346 382.566 789.729 382.566 cv
790.111 382.566 790.42 382.876 790.42 383.258 cv
790.42 497.187 li
790.42 497.568 790.111 497.878 789.729 497.878 cv
cp
f
766.308 497.878 mo
765.925 497.878 765.616 497.568 765.616 497.187 cv
765.616 383.258 li
765.616 382.876 765.925 382.566 766.308 382.566 cv
766.69 382.566 766.999 382.876 766.999 383.258 cv
766.999 497.187 li
766.999 497.568 766.69 497.878 766.308 497.878 cv
cp
f
742.887 497.878 mo
742.505 497.878 742.195 497.568 742.195 497.187 cv
742.195 383.258 li
742.195 382.876 742.505 382.566 742.887 382.566 cv
743.269 382.566 743.579 382.876 743.579 383.258 cv
743.579 497.187 li
743.579 497.568 743.269 497.878 742.887 497.878 cv
cp
f
719.466 497.878 mo
719.084 497.878 718.774 497.568 718.774 497.187 cv
718.774 383.258 li
718.774 382.876 719.084 382.566 719.466 382.566 cv
719.848 382.566 720.158 382.876 720.158 383.258 cv
720.158 497.187 li
720.158 497.568 719.848 497.878 719.466 497.878 cv
cp
f
696.045 497.878 mo
695.663 497.878 695.353 497.568 695.353 497.187 cv
695.353 383.258 li
695.353 382.876 695.663 382.567 696.045 382.567 cv
696.427 382.567 696.737 382.876 696.737 383.258 cv
696.737 497.187 li
696.737 497.568 696.427 497.878 696.045 497.878 cv
f
672.624 497.878 mo
672.242 497.878 671.932 497.568 671.932 497.187 cv
671.932 383.258 li
671.932 382.876 672.242 382.567 672.624 382.567 cv
673.006 382.567 673.315 382.876 673.315 383.258 cv
673.315 497.187 li
673.315 497.568 673.006 497.878 672.624 497.878 cv
f
649.203 497.878 mo
648.82 497.878 648.511 497.568 648.511 497.187 cv
648.511 383.258 li
648.511 382.876 648.82 382.567 649.203 382.567 cv
649.585 382.567 649.894 382.876 649.894 383.258 cv
649.894 497.187 li
649.894 497.568 649.585 497.878 649.203 497.878 cv
f
625.781 497.878 mo
625.399 497.878 625.09 497.568 625.09 497.187 cv
625.09 383.258 li
625.09 382.876 625.399 382.567 625.781 382.567 cv
626.163 382.567 626.473 382.876 626.473 383.258 cv
626.473 497.187 li
626.473 497.568 626.163 497.878 625.781 497.878 cv
f
603.064 497.882 mo
602.681 497.882 602.372 497.572 602.372 497.19 cv
602.372 442.2 li
602.372 441.818 602.681 441.509 603.064 441.509 cv
603.446 441.509 603.755 441.818 603.755 442.2 cv
603.755 497.19 li
603.755 497.572 603.446 497.882 603.064 497.882 cv
f
820.602 470.387 mo
583.339 470.387 li
582.957 470.387 582.647 470.077 582.647 469.695 cv
582.647 469.313 582.957 469.003 583.339 469.003 cv
820.602 469.003 li
820.984 469.003 821.293 469.313 821.293 469.695 cv
821.293 470.077 820.984 470.387 820.602 470.387 cv
cp
f
1179.61 324.541 mo
1247.48 330.61 1315.67 331.374 1383.54 326.831 cv
1383.54 345.278 1383.54 363.726 1383.54 382.173 cv
1315.67 388.242 1247.48 389.006 1179.61 384.463 cv
1179.61 370.408 1179.61 356.354 1179.61 342.301 cv
1179.61 336.38 1179.61 330.461 1179.61 324.541 cv
cp
1 1 1 rgb
f
1.37621 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
1179.61 324.541 mo
1247.48 330.61 1315.67 331.374 1383.54 326.831 cv
1383.54 345.278 1383.54 363.726 1383.54 382.173 cv
1315.67 388.242 1247.48 389.006 1179.61 384.463 cv
1179.61 370.408 1179.61 356.354 1179.61 342.301 cv
1179.61 336.38 1179.61 330.461 1179.61 324.541 cv
cp
.376471 .521569 .65098 rgb
@
1289.69 343.359 mo
1252.89 343.359 1216.08 341.817 1179.55 338.735 cv
1179.67 337.364 li
1247.28 343.068 1315.86 343.49 1383.5 338.621 cv
1383.59 339.993 li
1352.43 342.237 1321.06 343.359 1289.69 343.359 cv
cp
f
1188.15 384.965 mo
1186.77 384.965 li
1186.77 325.219 li
1188.15 325.219 li
1188.15 384.965 li
cp
f
1199.92 385.628 mo
1198.54 385.628 li
1198.54 326.147 li
1199.92 326.147 li
1199.92 385.628 li
cp
f
1211.69 386.185 mo
1210.31 386.185 li
1210.31 326.969 li
1211.69 326.969 li
1211.69 386.185 li
cp
f
1223.47 386.635 mo
1222.09 386.635 li
1222.09 327.684 li
1223.47 327.684 li
1223.47 386.635 li
cp
f
1235.25 386.979 mo
1233.87 386.979 li
1233.87 328.293 li
1235.25 328.293 li
1235.25 386.979 li
cp
f
1247.03 387.218 mo
1245.66 387.218 li
1245.66 328.796 li
1247.03 328.796 li
1247.03 387.218 li
cp
f
1258.82 387.35 mo
1257.44 387.35 li
1257.44 329.192 li
1258.82 329.192 li
1258.82 387.35 li
cp
f
1270.61 387.375 mo
1269.23 387.375 li
1269.23 329.482 li
1270.61 329.482 li
1270.61 387.375 li
cp
f
1282.39 387.296 mo
1281.02 387.296 li
1281.02 329.667 li
1282.39 329.667 li
1282.39 387.296 li
cp
f
1294.18 387.108 mo
1292.81 387.108 li
1292.81 329.745 li
1294.18 329.745 li
1294.18 387.108 li
cp
f
1305.97 386.815 mo
1304.59 386.815 li
1304.59 329.716 li
1305.97 329.716 li
1305.97 386.815 li
cp
f
1317.76 386.418 mo
1316.38 386.418 li
1316.38 329.582 li
1317.76 329.582 li
1317.76 386.418 li
cp
f
1329.54 385.912 mo
1328.16 385.912 li
1328.16 329.341 li
1329.54 329.341 li
1329.54 385.912 li
cp
f
1341.32 385.301 mo
1339.95 385.301 li
1339.95 328.994 li
1341.32 328.994 li
1341.32 385.301 li
cp
f
1353.1 384.583 mo
1351.72 384.583 li
1351.72 328.541 li
1353.1 328.541 li
1353.1 384.583 li
cp
f
1364.87 383.759 mo
1363.5 383.759 li
1363.5 327.981 li
1364.87 327.981 li
1364.87 383.759 li
cp
f
1376.64 382.829 mo
1375.26 382.829 li
1375.26 327.316 li
1376.64 327.316 li
1376.64 382.829 li
cp
f
820.603 326.831 mo
752.727 331.374 684.542 330.61 616.666 324.541 cv
616.666 344.516 616.666 364.488 616.666 384.463 cv
684.542 389.005 752.727 388.241 820.603 382.173 cv
820.603 369.192 820.603 356.213 820.603 343.232 cv
820.603 337.766 820.603 332.298 820.603 326.831 cv
cp
1 1 1 rgb
f
820.603 326.831 mo
752.727 331.374 684.542 330.61 616.666 324.541 cv
616.666 344.516 616.666 364.488 616.666 384.463 cv
684.542 389.005 752.727 388.241 820.603 382.173 cv
820.603 369.192 820.603 356.213 820.603 343.232 cv
820.603 337.766 820.603 332.298 820.603 326.831 cv
cp
.376471 .521569 .65098 rgb
@
726.749 343.358 mo
689.955 343.358 653.145 341.817 616.608 338.735 cv
616.724 337.364 li
684.347 343.066 752.927 343.49 820.554 338.621 cv
820.652 339.993 li
789.493 342.237 758.126 343.358 726.749 343.358 cv
cp
f
813.438 382.851 mo
812.063 382.851 li
812.063 327.333 li
813.438 327.333 li
813.438 382.851 li
cp
f
801.67 383.778 mo
800.294 383.778 li
800.294 327.996 li
801.67 327.996 li
801.67 383.778 li
cp
f
789.896 384.6 mo
788.521 384.6 li
788.521 328.553 li
789.896 328.553 li
789.896 384.6 li
cp
f
778.119 385.315 mo
776.743 385.315 li
776.743 329.004 li
778.119 329.004 li
778.119 385.315 li
cp
f
766.338 385.924 mo
764.962 385.924 li
764.962 329.348 li
766.338 329.348 li
766.338 385.924 li
cp
f
754.554 386.427 mo
753.178 386.427 li
753.178 329.586 li
754.554 329.586 li
754.554 386.427 li
cp
f
742.768 386.824 mo
741.392 386.824 li
741.392 329.718 li
742.768 329.718 li
742.768 386.824 li
cp
f
730.98 387.114 mo
729.604 387.114 li
729.604 329.744 li
730.98 329.744 li
730.98 387.114 li
cp
f
719.191 387.298 mo
717.816 387.298 li
717.816 329.664 li
719.191 329.664 li
719.191 387.298 li
cp
f
707.403 387.377 mo
706.028 387.377 li
706.028 329.477 li
707.403 329.477 li
707.403 387.377 li
cp
f
695.616 387.348 mo
694.24 387.348 li
694.24 329.184 li
695.616 329.184 li
695.616 387.348 li
cp
f
683.83 387.214 mo
682.454 387.214 li
682.454 328.786 li
683.83 328.786 li
683.83 387.214 li
cp
f
672.045 386.973 mo
670.67 386.973 li
670.67 328.28 li
672.045 328.28 li
672.045 386.973 li
cp
f
660.264 386.626 mo
658.888 386.626 li
658.888 327.669 li
660.264 327.669 li
660.264 386.626 li
cp
f
648.487 386.173 mo
647.111 386.173 li
647.111 326.952 li
648.487 326.952 li
648.487 386.173 li
cp
f
636.714 385.613 mo
635.338 385.613 li
635.338 326.127 li
636.714 326.127 li
636.714 385.613 li
cp
f
624.945 384.948 mo
623.569 384.948 li
623.569 325.197 li
624.945 325.197 li
624.945 384.948 li
cp
f
1027.82 339.943 mo
1018.54 340.011 1009.27 340.045 999.995 340.045 cv
990.721 340.045 981.447 340.011 972.173 339.943 cv
921.56 339.576 870.953 338.204 820.382 335.828 cv
820.382 351.128 820.382 366.427 820.382 381.727 cv
820.382 382.218 820.382 382.712 820.382 383.203 cv
820.382 385.588 820.382 387.973 820.382 390.358 cv
940.058 395.98 1059.93 395.98 1179.61 390.358 cv
1179.61 387.973 1179.61 385.588 1179.61 383.203 cv
1179.61 382.712 1179.61 382.218 1179.61 381.727 cv
1179.61 366.427 1179.61 351.128 1179.61 335.828 cv
1129.04 338.204 1078.43 339.576 1027.82 339.943 cv
1 1 1 rgb
f
1027.82 339.943 mo
1027.81 339.255 li
1018.54 339.322 1009.27 339.357 999.995 339.357 cv
990.723 339.357 981.45 339.322 972.177 339.255 cv
921.574 338.888 870.977 337.516 820.414 335.141 cv
819.694 335.107 li
819.694 335.828 li
819.694 351.128 819.694 366.427 819.694 381.727 cv
819.694 382.218 819.694 382.712 819.694 383.203 cv
819.694 385.588 819.694 387.973 819.694 390.358 cv
819.694 391.015 li
820.349 391.046 li
880.198 393.857 940.097 395.263 999.995 395.263 cv
1059.89 395.263 1119.79 393.857 1179.64 391.046 cv
1180.3 391.015 li
1180.3 390.358 li
1180.3 387.973 1180.3 385.588 1180.3 383.203 cv
1180.3 382.712 1180.3 382.218 1180.3 381.727 cv
1180.3 366.427 1180.3 351.128 1180.3 335.828 cv
1180.3 335.107 li
1179.58 335.141 li
1129.01 337.516 1078.42 338.888 1027.81 339.255 cv
1027.82 339.943 li
1027.82 340.632 li
1078.44 340.264 1129.06 338.892 1179.64 336.515 cv
1179.61 335.828 li
1178.92 335.828 li
1178.92 351.128 1178.92 366.427 1178.92 381.727 cv
1178.92 382.218 1178.92 382.712 1178.92 383.203 cv
1178.92 385.588 1178.92 387.973 1178.92 390.358 cv
1179.61 390.358 li
1179.58 389.671 li
1119.75 392.482 1059.87 393.887 999.995 393.887 cv
940.118 393.887 880.241 392.482 820.414 389.671 cv
820.382 390.358 li
821.07 390.358 li
821.07 387.973 821.07 385.588 821.07 383.203 cv
821.07 382.712 821.07 382.218 821.07 381.727 cv
821.07 366.427 821.07 351.128 821.07 335.828 cv
820.382 335.828 li
820.349 336.515 li
870.93 338.892 921.546 340.264 972.168 340.632 cv
981.443 340.699 990.72 340.733 999.995 340.733 cv
1009.27 340.733 1018.55 340.699 1027.82 340.632 cv
1027.82 339.943 li
.376471 .521569 .65098 rgb
f
830.849 390.805 mo
829.473 390.805 li
829.473 336.275 li
830.849 336.275 li
830.849 390.805 li
cp
f
843.898 391.362 mo
842.522 391.362 li
842.522 336.832 li
843.898 336.832 li
843.898 391.362 li
cp
f
856.948 391.875 mo
855.572 391.875 li
855.572 337.345 li
856.948 337.345 li
856.948 391.875 li
cp
f
870 392.343 mo
868.624 392.343 li
868.624 337.813 li
870 337.813 li
870 392.343 li
cp
f
883.052 392.767 mo
881.676 392.767 li
881.676 338.236 li
883.052 338.236 li
883.052 392.767 li
cp
f
896.106 393.146 mo
894.73 393.146 li
894.73 338.616 li
896.106 338.616 li
896.106 393.146 li
cp
f
909.161 393.48 mo
907.785 393.48 li
907.785 338.95 li
909.161 338.95 li
909.161 393.48 li
f
922.216 393.77 mo
920.84 393.77 li
920.84 339.24 li
922.216 339.24 li
922.216 393.77 li
f
935.272 394.016 mo
933.896 394.016 li
933.896 339.486 li
935.272 339.486 li
935.272 394.016 li
f
948.328 394.217 mo
946.952 394.217 li
946.952 339.686 li
948.328 339.686 li
948.328 394.217 li
f
961.385 394.373 mo
960.009 394.373 li
960.009 339.843 li
961.385 339.843 li
961.385 394.373 li
f
974.443 394.484 mo
973.066 394.484 li
973.066 339.955 li
974.443 339.955 li
974.443 394.484 li
f
987.5 394.552 mo
986.124 394.552 li
986.124 340.021 li
987.5 340.021 li
987.5 394.552 li
cp
f
1000.56 394.574 mo
999.182 394.574 li
999.182 340.045 li
1000.56 340.045 li
1000.56 394.574 li
cp
f
1013.62 394.553 mo
1012.24 394.553 li
1012.24 340.022 li
1013.62 340.022 li
1013.62 394.553 li
cp
f
1026.67 394.486 mo
1025.3 394.486 li
1025.3 339.957 li
1026.67 339.957 li
1026.67 394.486 li
cp
f
1039.73 394.375 mo
1038.35 394.375 li
1038.35 339.846 li
1039.73 339.846 li
1039.73 394.375 li
cp
f
1052.79 394.221 mo
1051.41 394.221 li
1051.41 339.69 li
1052.79 339.69 li
1052.79 394.221 li
cp
f
1065.84 394.02 mo
1064.47 394.02 li
1064.47 339.49 li
1065.84 339.49 li
1065.84 394.02 li
cp
f
1078.9 393.775 mo
1077.52 393.775 li
1077.52 339.245 li
1078.9 339.245 li
1078.9 393.775 li
cp
f
1091.96 393.486 mo
1090.58 393.486 li
1090.58 338.956 li
1091.96 338.956 li
1091.96 393.486 li
cp
f
1105.01 393.152 mo
1103.63 393.152 li
1103.63 338.622 li
1105.01 338.622 li
1105.01 393.152 li
f
1118.06 392.775 mo
1116.69 392.775 li
1116.69 338.244 li
1118.06 338.244 li
1118.06 392.775 li
f
1131.12 392.352 mo
1129.74 392.352 li
1129.74 337.821 li
1131.12 337.821 li
1131.12 392.352 li
f
1144.17 391.884 mo
1142.79 391.884 li
1142.79 337.354 li
1144.17 337.354 li
1144.17 391.884 li
f
1157.22 391.372 mo
1155.84 391.372 li
1155.84 336.843 li
1157.22 336.843 li
1157.22 391.372 li
f
1170.27 390.815 mo
1168.89 390.815 li
1168.89 336.286 li
1170.27 336.286 li
1170.27 390.815 li
cp
f
999.995 355.248 mo
939.974 355.248 879.951 353.848 820.349 351.048 cv
820.414 349.673 li
939.575 355.271 1060.42 355.271 1179.58 349.673 cv
1179.64 351.048 li
1120.04 353.848 1060.02 355.248 999.995 355.248 cv
cp
f
1408.7 441.733 mo
1136.44 433.491 864 433.732 591.764 442.458 cv
589.861 442.519 588.273 441.123 588.217 439.337 cv
589.47 435.117 590.723 430.9 591.978 426.685 cv
591.922 424.899 593.422 423.406 595.327 423.35 cv
865.19 415.263 1135.24 415.502 1405.08 424.066 cv
1406.98 424.127 1408.49 425.512 1408.44 427.161 cv
1409.7 431.06 1410.97 434.958 1412.24 438.855 cv
1412.19 440.503 1410.6 441.791 1408.7 441.733 cv
1 1 1 rgb
f
820.382 497.192 mo
999.995 497.192 li
1179.61 497.192 li
1179.61 390.326 li
820.382 390.326 li
820.382 497.192 li
.376471 .521569 .65098 rgb
f
820.382 497.192 mo
820.382 497.884 li
999.995 497.884 li
1180.3 497.884 li
1180.3 389.634 li
819.69 389.634 li
819.69 497.884 li
820.382 497.884 li
820.382 497.192 li
821.074 497.192 li
821.074 391.018 li
1178.92 391.018 li
1178.92 496.5 li
999.995 496.5 li
820.382 496.5 li
820.382 497.192 li
821.074 497.192 li
820.382 497.192 li
.0588235 .27451 .54902 rgb
f
860.296 491.13 mo
906.488 391.018 li
952.726 391.018 li
884.43 490.922 li
876.385 490.984 868.341 491.054 860.296 491.13 cv
.470588 .592157 .701961 rgb
f
952.726 391.018 mo
906.488 391.018 li
906.807 390.326 li
953.198 390.326 li
952.726 391.018 li
.2 .384314 .615686 rgb
f
894.939 490.845 mo
963.181 391.018 li
982.102 391.018 li
902.22 490.796 li
899.784 490.812 897.375 490.828 894.939 490.845 cv
.470588 .592157 .701961 rgb
f
982.102 391.018 mo
963.181 391.018 li
963.654 390.326 li
982.656 390.326 li
982.102 391.018 li
.2 .384314 .615686 rgb
f
1076.22 490.799 mo
1066.2 490.735 1056.2 490.681 1046.18 490.639 cv
1097.19 391.018 li
1157.48 391.018 li
1076.22 490.799 li
.470588 .592157 .701961 rgb
f
1157.48 391.018 mo
1097.19 391.018 li
1097.54 390.326 li
1158.05 390.326 li
1157.48 391.018 li
.2 .384314 .615686 rgb
f
1179.61 438.917 mo
820.382 438.917 li
820.382 437.533 li
1179.61 437.533 li
1179.61 438.917 li
cp
.0588235 .27451 .54902 rgb
f
856.967 490.34 mo
855.583 490.34 li
855.583 390.325 li
856.967 390.325 li
856.967 490.34 li
cp
f
896.003 490.34 mo
894.619 490.34 li
894.619 390.325 li
896.003 390.325 li
896.003 490.34 li
cp
f
935.039 490.34 mo
933.656 490.34 li
933.656 390.325 li
935.039 390.325 li
935.039 490.34 li
cp
f
974.075 490.34 mo
972.691 490.34 li
972.691 390.325 li
974.075 390.325 li
974.075 490.34 li
cp
f
1027.08 490.34 mo
1025.7 490.34 li
1025.7 390.325 li
1027.08 390.325 li
1027.08 490.34 li
cp
f
1065.82 490.34 mo
1064.43 490.34 li
1064.43 390.325 li
1065.82 390.325 li
1065.82 490.34 li
cp
f
1104.55 490.34 mo
1103.17 490.34 li
1103.17 390.325 li
1104.55 390.325 li
1104.55 490.34 li
cp
f
1143.98 490.34 mo
1142.6 490.34 li
1142.6 390.325 li
1143.98 390.325 li
1143.98 490.34 li
cp
f
1423.19 517.531 mo
1142.65 509.062 861.914 509.339 581.394 518.358 cv
579.434 518.422 577.793 516.82 577.728 514.781 cv
577.578 510.014 577.428 505.245 577.278 500.477 cv
577.215 498.439 578.753 496.737 580.718 496.679 cv
861.694 488.197 1142.86 488.474 1423.82 497.505 cv
1425.78 497.569 1427.32 499.146 1427.27 501.027 cv
1427.13 505.429 1426.99 509.83 1426.85 514.232 cv
1426.79 516.113 1425.15 517.59 1423.19 517.531 cv
.74902 .180392 .129412 rgb
f
581.29 518.36 mo
581.29 518.36 li
581.305 518.36 581.321 518.36 581.336 518.36 cv
581.32 518.36 581.306 518.36 581.29 518.36 cv
.745098 .768627 .792157 rgb
f
581.338 518.36 mo
581.357 518.359 581.375 518.359 581.394 518.358 cv
582.027 518.338 582.672 518.317 583.305 518.297 cv
582.669 518.317 582.03 518.338 581.394 518.358 cv
581.375 518.359 581.357 518.359 581.338 518.36 cv
583.951 518.276 mo
584.516 518.258 585.104 518.24 585.669 518.222 cv
585.094 518.24 584.526 518.258 583.951 518.276 cv
585.687 518.221 mo
594.744 517.933 603.802 517.654 612.86 517.383 cv
612.86 517.386 li
603.803 517.655 594.744 517.933 585.687 518.221 cv
615.747 517.301 mo
615.747 517.298 li
626.963 516.966 638.208 516.647 649.423 516.343 cv
649.423 516.355 li
638.2 516.656 626.971 516.971 615.747 517.301 cv
652.31 516.277 mo
652.31 516.265 li
661.797 516.009 671.322 515.763 680.809 515.528 cv
680.799 515.548 li
671.303 515.782 661.807 516.025 652.31 516.277 cv
f
680.799 515.548 mo
680.809 515.528 li
682.539 515.485 684.256 515.443 685.986 515.401 cv
685.986 515.422 li
684.258 515.464 682.527 515.506 680.799 515.548 cv
688.873 515.352 mo
688.873 515.331 li
698.771 515.091 708.673 514.863 718.572 514.645 cv
718.593 514.669 li
708.686 514.887 698.78 515.114 688.873 515.352 cv
.796078 .823529 .847059 rgb
f
685.986 515.422 mo
685.986 515.401 li
686.945 515.377 687.914 515.354 688.873 515.331 cv
688.873 515.352 li
687.91 515.375 686.949 515.398 685.986 515.422 cv
.0509804 .247059 .509804 rgb
f
649.423 516.355 mo
649.423 516.343 li
650.4 516.316 651.334 516.291 652.31 516.265 cv
652.31 516.277 li
651.347 516.303 650.386 516.329 649.423 516.355 cv
f
612.86 517.386 mo
612.86 517.383 li
613.819 517.355 614.789 517.326 615.747 517.298 cv
615.747 517.301 li
614.785 517.33 613.823 517.358 612.86 517.386 cv
f
577.287 500.076 mo
577.341 499.327 577.612 498.638 578.036 498.079 cv
578.036 498.079 li
577.612 498.638 577.341 499.327 577.287 500.076 cv
.875294 .904314 .930196 rgb
f
579.549 496.92 mo
579.549 496.92 li
579.913 496.776 580.306 496.691 580.718 496.679 cv
581.682 496.65 582.644 496.621 583.609 496.592 cv
582.648 496.621 581.678 496.65 580.718 496.679 cv
580.306 496.691 579.913 496.776 579.549 496.92 cv
.329412 .470588 .603922 rgb
f
578.036 498.079 mo
578.036 498.079 li
578.427 497.564 578.947 497.16 579.549 496.92 cv
579.549 496.92 li
578.947 497.16 578.426 497.564 578.036 498.079 cv
.0509804 .247059 .509804 rgb
f
584.05 496.579 mo
584.319 496.571 584.581 496.563 584.85 496.555 cv
584.593 496.562 584.308 496.571 584.05 496.579 cv
.329412 .470588 .603922 rgb
f
581.281 518.36 mo
581.273 518.36 581.266 518.36 581.259 518.36 cv
579.36 518.348 577.791 516.773 577.728 514.781 cv
577.728 514.781 li
577.728 514.781 li
577.578 510.014 577.428 505.245 577.278 500.477 cv
577.278 500.477 li
577.277 500.438 577.276 500.398 577.276 500.358 cv
577.276 500.264 577.28 500.169 577.287 500.076 cv
577.341 499.327 577.612 498.638 578.036 498.079 cv
578.426 497.564 578.947 497.16 579.549 496.92 cv
579.913 496.776 580.306 496.691 580.718 496.679 cv
581.678 496.65 582.648 496.621 583.609 496.592 cv
583.754 496.587 583.905 496.583 584.05 496.579 cv
584.308 496.571 584.593 496.562 584.85 496.555 cv
623.088 495.413 661.332 494.451 699.576 493.633 cv
718.572 514.645 li
708.673 514.863 698.771 515.091 688.873 515.331 cv
687.914 515.354 686.945 515.377 685.986 515.401 cv
684.256 515.443 682.539 515.485 680.809 515.528 cv
671.322 515.763 661.797 516.009 652.31 516.265 cv
651.334 516.291 650.4 516.316 649.423 516.343 cv
638.208 516.647 626.963 516.966 615.747 517.298 cv
614.789 517.326 613.819 517.355 612.86 517.383 cv
603.802 517.654 594.744 517.933 585.687 518.221 cv
585.681 518.221 585.675 518.221 585.669 518.222 cv
585.104 518.24 584.516 518.258 583.951 518.276 cv
583.736 518.283 583.52 518.29 583.305 518.297 cv
582.672 518.317 582.027 518.338 581.394 518.358 cv
581.375 518.359 581.357 518.359 581.338 518.36 cv
581.337 518.36 581.336 518.36 581.336 518.36 cv
581.321 518.36 581.305 518.36 581.29 518.36 cv
581.288 518.36 581.285 518.36 581.283 518.36 cv
581.282 518.36 581.281 518.36 581.281 518.36 cv
.654902 .164706 .121569 rgb
f
1423.31 517.533 mo
1423.31 517.533 li
1423.31 517.533 li
1423.31 517.533 li
1423.33 517.533 mo
1425.23 517.521 1426.79 516.07 1426.85 514.232 cv
1426.99 509.83 1427.13 505.429 1427.27 501.027 cv
1427.32 499.22 1425.9 497.693 1424.04 497.519 cv
1425.9 497.693 1427.32 499.22 1427.27 501.027 cv
1427.13 505.429 1426.99 509.83 1426.85 514.232 cv
1426.79 516.07 1425.23 517.521 1423.33 517.533 cv
1423.19 517.531 mo
1423.19 517.531 li
1422.64 517.514 1422.08 517.498 1421.53 517.481 cv
1421.53 517.481 li
1422.08 517.498 1422.64 517.515 1423.19 517.531 cv
1423.19 517.531 li
.875294 .904314 .930196 rgb
f
1421.53 517.481 mo
1421.36 517.476 1421.2 517.471 1421.02 517.466 cv
1421.2 517.471 1421.36 517.476 1421.53 517.481 cv
1421.53 517.481 li
.145098 .301961 .509804 rgb
f
1418.77 517.398 mo
1409.68 517.127 1400.58 516.866 1391.49 516.614 cv
1391.49 516.611 li
1400.58 516.865 1409.67 517.127 1418.77 517.398 cv
1418.77 517.398 li
1388.6 516.535 mo
1377.38 516.226 1366.15 515.933 1354.93 515.653 cv
1354.93 515.643 li
1366.16 515.925 1377.37 516.221 1388.6 516.531 cv
1388.6 516.535 li
1352.04 515.582 mo
1340.82 515.305 1329.59 515.041 1318.36 514.792 cv
1318.36 514.774 li
1329.58 515.025 1340.82 515.291 1352.04 515.571 cv
1352.04 515.582 li
1315.48 514.728 mo
1304.6 514.488 1293.73 514.261 1282.86 514.046 cv
1282.88 514.025 li
1293.74 514.24 1304.62 514.468 1315.48 514.709 cv
1315.48 514.728 li
.745098 .768627 .792157 rgb
f
1420.93 517.463 mo
1420.21 517.441 1419.48 517.42 1418.77 517.398 cv
1418.77 517.398 li
1419.48 517.42 1420.21 517.441 1420.93 517.463 cv
.145098 .301961 .509804 rgb
f
1282.86 514.046 mo
1282.51 514.039 1282.15 514.033 1281.8 514.026 cv
1281.8 514.004 li
1282.16 514.011 1282.52 514.018 1282.88 514.025 cv
1282.86 514.046 li
.796078 .823529 .847059 rgb
f
1281.8 514.026 mo
1281.6 514.022 1281.4 514.018 1281.2 514.014 cv
1281.22 513.992 li
1281.41 513.996 1281.61 514 1281.8 514.004 cv
1281.8 514.026 li
.0509804 .247059 .509804 rgb
f
1318.36 514.792 mo
1317.4 514.77 1316.44 514.749 1315.48 514.728 cv
1315.48 514.709 li
1316.45 514.731 1317.39 514.752 1318.36 514.774 cv
1318.36 514.792 li
f
1354.93 515.653 mo
1353.96 515.629 1353.01 515.605 1352.04 515.582 cv
1352.04 515.571 li
1353 515.595 1353.97 515.619 1354.93 515.643 cv
1354.93 515.653 li
f
1391.49 516.614 mo
1390.53 516.588 1389.57 516.561 1388.6 516.535 cv
1388.6 516.531 li
1389.56 516.558 1390.53 516.585 1391.49 516.611 cv
1391.49 516.614 li
f
1423.31 517.533 mo
1423.31 517.533 li
1423.27 517.533 1423.23 517.532 1423.19 517.531 cv
1423.19 517.531 li
1422.64 517.515 1422.08 517.498 1421.53 517.481 cv
1421.36 517.476 1421.2 517.471 1421.02 517.466 cv
1420.99 517.465 1420.96 517.464 1420.93 517.463 cv
1420.21 517.441 1419.48 517.42 1418.77 517.398 cv
1409.67 517.127 1400.58 516.865 1391.49 516.611 cv
1390.53 516.585 1389.56 516.558 1388.6 516.531 cv
1377.37 516.221 1366.16 515.925 1354.93 515.643 cv
1353.97 515.619 1353 515.595 1352.04 515.571 cv
1340.82 515.291 1329.58 515.025 1318.36 514.774 cv
1317.39 514.752 1316.45 514.731 1315.48 514.709 cv
1304.62 514.468 1293.74 514.24 1282.88 514.025 cv
1282.52 514.018 1282.16 514.011 1281.8 514.004 cv
1281.61 514 1281.41 513.996 1281.22 513.992 cv
1299.21 494.098 li
1340.75 495.05 1382.28 496.17 1423.82 497.505 cv
1423.89 497.507 1423.97 497.512 1424.04 497.519 cv
1425.9 497.693 1427.32 499.22 1427.27 501.027 cv
1427.13 505.429 1426.99 509.83 1426.85 514.232 cv
1426.79 516.07 1425.23 517.521 1423.33 517.533 cv
1423.32 517.533 1423.31 517.533 1423.31 517.533 cv
.654902 .164706 .121569 rgb
f
910.188 737.042 mo
949.964 733.719 li
967.394 734.093 li
973.272 737.03 li
910.188 737.042 li
.67451 .752941 .819608 rgb
f
898.768 737.044 mo
914.62 732.096 li
948.909 724.857 li
967.394 734.093 li
949.964 733.719 li
910.188 737.042 li
898.768 737.044 li
.74902 .807843 .858823 rgb
f
1026.74 737.021 mo
1032.6 734.093 li
1050.03 733.719 li
1089.42 737.01 li
1026.74 737.021 li
.615686 .705882 .784314 rgb
f
1089.42 737.01 mo
1050.03 733.719 li
1032.6 734.093 li
1051.09 724.852 li
1085.2 732.055 li
1101.16 737.008 li
1089.42 737.01 li
.74902 .807843 .858823 rgb
f
973.272 737.03 mo
973.272 737.03 li
967.394 734.093 li
999.459 734.782 li
999.464 737.026 li
982.81 737.029 li
973.272 737.03 li
.576471 .67451 .760784 rgb
f
999.464 737.026 mo
999.459 734.782 li
999.712 734.788 li
999.807 734.79 999.901 734.791 999.995 734.791 cv
1000.09 734.791 1000.18 734.79 1000.28 734.788 cv
1032.6 734.093 li
1026.74 737.021 li
999.464 737.026 li
.537255 .643137 .741176 rgb
f
999.995 734.791 mo
999.901 734.791 999.807 734.79 999.712 734.788 cv
999.459 734.782 li
967.394 734.093 li
948.909 724.857 li
949.573 724.716 li
1000.01 725.8 li
1050.45 724.716 li
1051.09 724.852 li
1032.6 734.093 li
1000.28 734.788 li
1000.18 734.79 1000.09 734.791 999.995 734.791 cv
.627451 .713725 .792157 rgb
f
1414.18 746.265 mo
1414.15 745.419 1414.09 744.579 1414.01 743.745 cv
1413.83 741.874 1413.53 740.035 1413.12 738.234 cv
1413.14 738.234 li
1414.07 741.874 1414.72 741.943 1414.42 746.251 cv
1414.18 746.265 li
585.814 746.263 mo
585.602 746.251 li
585.312 742.097 585.907 741.884 586.783 738.613 cv
586.243 741.097 585.909 743.652 585.814 746.263 cv
.843506 .879923 .912403 rgb
f
949.649 768.524 mo
949.263 768.524 948.879 768.512 948.493 768.48 cv
914.896 765.673 li
911.109 762.395 906.036 760.394 900.438 760.394 cv
896.134 760.394 892.096 761.588 888.682 763.644 cv
585.814 746.263 li
585.909 743.652 586.243 741.097 586.783 738.613 cv
586.815 738.491 586.848 738.365 586.882 738.234 cv
680.838 738.234 li
895.354 738.234 li
895.719 738.234 896.084 738.22 896.448 738.19 cv
910.188 737.042 li
982.81 737.029 li
999.464 737.026 li
999.528 767.454 li
949.87 768.522 li
949.796 768.523 949.723 768.524 949.649 768.524 cv
1414.01 743.745 mo
1413.83 741.874 1413.53 740.035 1413.12 738.234 cv
1413.12 738.234 li
1413.53 740.035 1413.83 741.874 1414.01 743.745 cv
.74902 .807843 .858823 rgb
f
1414.18 746.265 mo
1414.15 745.419 1414.09 744.579 1414.01 743.745 cv
1414.09 744.579 1414.15 745.419 1414.18 746.265 cv
1414.18 746.265 li
.750588 .808627 .860392 rgb
f
1050.42 768.524 mo
1050.34 768.524 1050.26 768.523 1050.18 768.522 cv
1000.03 767.443 li
999.528 767.454 li
999.464 737.026 li
1026.74 737.021 li
1089.42 737.01 li
1103.54 738.19 li
1103.91 738.22 1104.27 738.234 1104.64 738.234 cv
1318.46 738.234 li
1413.12 738.234 li
1413.53 740.035 1413.83 741.874 1414.01 743.745 cv
1414.09 744.579 1414.15 745.419 1414.18 746.265 cv
1111.09 763.66 li
1107.67 761.595 1103.62 760.394 1099.3 760.394 cv
1093.69 760.394 1088.6 762.407 1084.81 765.702 cv
1051.56 768.48 li
1051.18 768.511 1050.8 768.524 1050.42 768.524 cv
.67451 .74902 .819608 rgb
f
909.286 765.204 mo
894.837 763.997 li
894.498 763.978 li
896.357 763.401 898.337 763.088 900.386 763.087 cv
900.391 763.087 900.395 763.087 900.399 763.087 cv
903.628 763.087 906.655 763.854 909.286 765.204 cv
.290196 .427451 .564706 rgb
f
914.896 765.673 mo
909.286 765.204 li
906.655 763.854 903.628 763.087 900.399 763.087 cv
900.395 763.087 900.391 763.087 900.386 763.087 cv
898.337 763.088 896.357 763.401 894.498 763.978 cv
888.682 763.644 li
892.096 761.588 896.134 760.394 900.438 760.394 cv
906.036 760.394 911.109 762.395 914.896 765.673 cv
.137255 .337255 .576471 rgb
f
1090.39 765.235 mo
1093.04 763.866 1096.09 763.087 1099.34 763.087 cv
1099.34 763.087 1099.35 763.087 1099.35 763.087 cv
1101.42 763.088 1103.42 763.406 1105.29 763.993 cv
1105.22 763.997 li
1090.39 765.235 li
.290196 .427451 .564706 rgb
f
1084.81 765.702 mo
1088.6 762.407 1093.69 760.394 1099.3 760.394 cv
1103.62 760.394 1107.67 761.595 1111.09 763.66 cv
1105.29 763.993 li
1103.42 763.406 1101.42 763.088 1099.35 763.087 cv
1099.35 763.087 1099.34 763.087 1099.34 763.087 cv
1096.09 763.087 1093.04 763.866 1090.39 765.235 cv
1084.81 765.702 li
.137255 .337255 .576471 rgb
f
1318.46 738.234 mo
1104.64 738.234 li
1104.27 738.234 1103.91 738.22 1103.54 738.19 cv
1089.42 737.01 li
1101.16 737.008 li
1103.57 737.758 li
1103.94 737.727 1104.3 737.712 1104.67 737.712 cv
1318.82 737.712 li
1318.46 738.234 li
895.354 738.234 mo
680.838 738.234 li
680.48 737.712 li
895.386 737.712 li
895.751 737.712 896.117 737.727 896.48 737.758 cv
898.768 737.044 li
910.188 737.042 li
896.448 738.19 li
896.084 738.22 895.719 738.234 895.354 738.234 cv
.843137 .878431 .913725 rgb
f
1413.14 738.234 mo
1413.12 738.234 li
1318.46 738.234 li
1318.82 737.712 li
1413.01 737.712 li
1413.06 737.894 1413.1 738.068 1413.14 738.234 cv
.74902 .807843 .858823 rgb
f
680.838 738.234 mo
586.882 738.234 li
586.924 738.068 586.967 737.894 587.011 737.712 cv
680.48 737.712 li
680.838 738.234 li
f
1026.74 737.021 mo
1026.74 737.021 li
1089.42 737.01 li
1089.42 737.01 li
1026.74 737.021 li
.556863 .658823 .74902 rgb
f
1089.42 737.01 mo
1089.42 737.01 li
1101.16 737.008 li
1089.42 737.01 li
.654902 .737255 .807843 rgb
f
982.81 737.029 mo
999.464 737.026 li
999.464 737.026 li
982.81 737.029 li
.52549 .635294 .733333 rgb
f
999.464 737.026 mo
999.464 737.026 li
1026.74 737.021 li
1026.74 737.021 li
999.464 737.026 li
.498039 .611765 .717647 rgb
f
1017.31 231.395 mo
999.995 231.395 li
982.681 231.395 li
972.18 339.946 li
999.995 339.946 li
1027.81 339.946 li
1017.31 231.395 li
.74902 .180392 .129412 rgb
f
983.504 331.247 mo
983.103 323.472 983.113 315.721 983.271 307.978 cv
983.309 304.105 983.503 300.24 983.618 296.371 cv
984.201 284.778 li
985.007 273.199 li
985.35 269.344 985.623 265.484 986.044 261.634 cv
986.81 253.928 987.719 246.231 989.038 238.558 cv
989.434 246.333 989.421 254.084 989.264 261.826 cv
989.225 265.699 989.037 269.565 988.919 273.432 cv
988.341 285.025 li
987.541 296.606 li
987.195 300.461 986.927 304.32 986.504 308.171 cv
985.739 315.877 984.827 323.574 983.504 331.247 cv
.87451 .592157 .564706 rgb
f
1022.56 339.946 mo
1000.01 339.946 li
1000.01 231.395 li
1014.04 231.395 li
1022.56 339.946 li
.521569 .12549 .0901961 rgb
f
1434.98 1745.28 mo
1428.18 1633.74 1261.98 1761.14 1258.55 1748.26 cv
1360.94 1622.6 1187.79 1710.03 1126.32 1760.6 cv
1174.73 1676.19 1090.68 1685.73 993.573 1784.4 cv
966.933 1677.95 822.394 1620.6 842.661 1753.24 cv
806.928 1728.73 693.2 1647.05 725.437 1745.05 cv
738.396 1784.45 546.902 1625.78 618.042 1747.51 cv
556.521 1711.64 517 1718.6 535.838 1770.19 cv
541.837 1786.62 471.893 1760.6 485.035 1783.88 cv
582.643 1829.38 794.663 1854.46 986.971 1854.52 cv
1179.28 1854.57 1446.85 1826.32 1501 1774.01 cv
1521.7 1754.01 1436.1 1763.7 1434.98 1745.28 cv
cp
.85098 .85098 .85098 rgb
f
1406.37 1761.39 mo
1400.02 1669.73 1244.59 1774.42 1241.38 1763.84 cv
1337.14 1660.58 1175.21 1732.42 1117.73 1773.98 cv
1163 1704.62 1084.4 1712.45 993.588 1793.53 cv
968.675 1706.06 833.508 1658.93 852.461 1767.93 cv
819.045 1747.79 712.692 1680.66 742.838 1761.2 cv
754.957 1793.57 575.88 1663.19 642.408 1763.22 cv
584.875 1733.75 547.917 1739.47 565.534 1781.86 cv
571.144 1795.36 505.735 1773.98 518.025 1793.11 cv
609.303 1830.5 807.133 1854.47 986.971 1854.52 cv
1166.81 1854.56 1417.47 1827.99 1468.11 1785 cv
1487.47 1768.56 1407.42 1776.53 1406.37 1761.39 cv
cp
.376471 .521569 .65098 rgb
f
1378.19 1781.99 mo
1372.23 1713.95 1218.43 1790.69 1223.27 1783.81 cv
1280.02 1703.29 1161.14 1760.49 1107.17 1791.34 cv
1125.41 1736.38 1075.87 1745.66 990.602 1805.85 cv
967.209 1740.92 840.292 1705.94 858.088 1786.84 cv
826.711 1771.9 735 1720.85 755.155 1781.85 cv
763.497 1807.1 618 1704.78 660.854 1783.35 cv
606.833 1761.47 572.13 1765.72 588.672 1797.19 cv
593.939 1807.21 534.96 1788.8 546.5 1803 cv
632.208 1830.75 814.538 1854.48 983.401 1854.52 cv
1152.26 1854.55 1388.61 1831.43 1436.17 1799.52 cv
1454.34 1787.32 1379.18 1793.23 1378.19 1781.99 cv
cp
.164706 .333333 .54902 rgb
f
687.006 1675.17 mo
689.396 1677.49 691.562 1680.95 693.067 1684.78 cv
694.59 1688.61 695.455 1692.79 695.717 1696.53 cv
695.988 1700.29 695.729 1703.58 695.371 1705.9 cv
695.212 1707.05 694.981 1707.98 694.854 1708.6 cv
694.71 1709.22 694.629 1709.57 694.629 1709.57 cv
694.629 1709.57 694.371 1709.3 693.913 1708.82 cv
693.442 1708.34 692.837 1707.64 691.992 1706.85 cv
690.375 1705.22 688.045 1703.16 685.498 1701.18 cv
682.945 1699.19 680.137 1697.32 677.611 1695.69 cv
675.08 1694.06 672.824 1692.67 671.377 1691.26 cv
669.531 1689.45 668.355 1686.97 667.84 1684.19 cv
667.609 1682.77 667.529 1681.33 667.726 1679.84 cv
667.922 1678.36 668.38 1676.87 669.213 1675.48 cv
670.046 1674.1 671.157 1673.02 672.502 1672.27 cv
673.844 1671.53 675.438 1671.09 677.102 1671.07 cv
680.468 1670.97 684.237 1672.46 687.006 1675.17 cv
cp
.85098 .85098 .85098 rgb
f
687.454 1683.82 mo
688.91 1685.23 690.229 1687.34 691.146 1689.67 cv
692.074 1692.01 692.601 1694.55 692.761 1696.83 cv
692.926 1699.12 692.768 1701.13 692.55 1702.54 cv
692.453 1703.24 692.313 1703.81 692.235 1704.19 cv
692.148 1704.56 692.098 1704.78 692.098 1704.78 cv
692.098 1704.78 691.941 1704.61 691.662 1704.32 cv
691.375 1704.03 691.007 1703.6 690.492 1703.12 cv
689.506 1702.13 688.087 1700.87 686.535 1699.67 cv
684.979 1698.45 683.268 1697.31 681.729 1696.32 cv
680.187 1695.33 678.813 1694.48 677.931 1693.62 cv
676.806 1692.52 676.09 1691.01 675.776 1689.31 cv
675.635 1688.45 675.587 1687.57 675.706 1686.67 cv
675.826 1685.76 676.105 1684.85 676.613 1684.01 cv
677.12 1683.17 677.797 1682.51 678.617 1682.05 cv
679.434 1681.6 680.405 1681.33 681.419 1681.32 cv
683.47 1681.26 685.766 1682.17 687.454 1683.82 cv
cp
.376471 .521569 .65098 rgb
f
575.767 1686.99 mo
576.059 1688.92 575.918 1691.04 575.877 1693.23 cv
575.812 1694.23 575.847 1695.38 576.015 1696.56 cv
576.187 1697.73 576.487 1698.94 576.915 1700.08 cv
577.342 1701.22 577.894 1702.33 578.55 1703.26 cv
578.71 1703.5 578.885 1703.7 579.056 1703.93 cv
579.228 1704.15 579.403 1704.37 579.586 1704.55 cv
579.773 1704.74 579.955 1704.93 580.13 1705.11 cv
580.313 1705.28 580.499 1705.44 580.68 1705.59 cv
581.042 1705.92 581.4 1706.15 581.729 1706.37 cv
581.896 1706.48 582.053 1706.59 582.198 1706.68 cv
582.348 1706.76 582.486 1706.83 582.61 1706.9 cv
583.13 1707.17 583.422 1707.32 583.422 1707.32 cv
583.422 1707.32 583.143 1707.49 582.586 1707.79 cv
582.447 1707.86 582.289 1707.95 582.113 1708.03 cv
581.933 1708.11 581.738 1708.19 581.529 1708.27 cv
581.309 1708.35 581.075 1708.44 580.827 1708.54 cv
580.576 1708.61 580.306 1708.68 580.015 1708.75 cv
578.85 1709.06 577.379 1709.23 575.694 1709.14 cv
574.004 1709.06 572.128 1708.68 570.237 1707.98 cv
566.442 1706.6 562.595 1703.88 559.871 1700.18 cv
557.249 1696.73 555.771 1692.97 555.337 1690.14 cv
555.057 1688.31 555.159 1686.53 555.549 1684.93 cv
555.937 1683.33 556.626 1681.93 557.506 1680.76 cv
559.281 1678.42 561.854 1676.99 564.827 1676.93 cv
567.805 1676.88 570.401 1678.3 572.298 1680.31 cv
573.253 1681.3 574.026 1682.44 574.616 1683.58 cv
575.204 1684.72 575.597 1685.88 575.767 1686.99 cv
cp
.85098 .85098 .85098 rgb
f
822.187 1673.17 mo
822.336 1675.08 822.048 1677.44 821.801 1680.1 cv
821.544 1682.75 821.333 1685.71 821.388 1688.53 cv
821.432 1691.34 821.691 1694.04 822.004 1696.01 cv
822.066 1696.52 822.157 1696.96 822.232 1697.35 cv
822.307 1697.75 822.373 1698.09 822.426 1698.37 cv
822.533 1698.94 822.594 1699.26 822.594 1699.26 cv
822.594 1699.26 822.286 1699.13 821.737 1698.9 cv
821.458 1698.78 821.118 1698.63 820.726 1698.46 cv
820.527 1698.37 820.315 1698.27 820.09 1698.17 cv
819.87 1698.06 819.645 1697.94 819.404 1697.81 cv
818.924 1697.55 818.395 1697.26 817.824 1696.94 cv
817.254 1696.62 816.69 1696.23 816.068 1695.82 cv
815.759 1695.61 815.443 1695.39 815.121 1695.17 cv
814.813 1694.93 814.499 1694.69 814.18 1694.45 cv
813.545 1693.94 812.859 1693.42 812.234 1692.82 cv
809.627 1690.5 807.083 1687.47 805.23 1684.21 cv
803.37 1680.96 802.238 1677.5 802.026 1674.71 cv
801.871 1672.92 802.127 1671.12 802.632 1669.5 cv
802.913 1668.69 803.251 1667.92 803.641 1667.21 cv
804.027 1666.5 804.528 1665.85 805.032 1665.28 cv
806.034 1664.13 807.296 1663.31 808.605 1662.85 cv
809.919 1662.39 811.312 1662.3 812.74 1662.58 cv
814.167 1662.86 815.447 1663.46 816.56 1664.22 cv
817.677 1664.97 818.596 1665.87 819.424 1666.85 cv
819.834 1667.33 820.159 1667.83 820.495 1668.34 cv
820.828 1668.86 821.107 1669.38 821.326 1669.91 cv
821.821 1670.97 822.084 1672.05 822.187 1673.17 cv
cp
f
819.353 1677.25 mo
819.459 1678.62 819.254 1680.31 819.077 1682.21 cv
818.894 1684.1 818.743 1686.21 818.782 1688.22 cv
818.814 1690.23 818.999 1692.15 819.222 1693.56 cv
819.266 1693.92 819.332 1694.23 819.385 1694.52 cv
819.439 1694.8 819.485 1695.04 819.523 1695.24 cv
819.6 1695.65 819.643 1695.88 819.643 1695.88 cv
819.643 1695.88 819.424 1695.79 819.032 1695.62 cv
818.833 1695.54 818.59 1695.43 818.31 1695.31 cv
818.168 1695.24 818.017 1695.17 817.856 1695.1 cv
817.699 1695.02 817.539 1694.93 817.367 1694.84 cv
817.024 1694.66 816.646 1694.45 816.239 1694.22 cv
815.832 1693.99 815.43 1693.71 814.986 1693.42 cv
814.765 1693.27 814.54 1693.12 814.31 1692.96 cv
814.09 1692.79 813.865 1692.62 813.638 1692.44 cv
813.185 1692.08 812.695 1691.71 812.249 1691.29 cv
810.388 1689.63 808.573 1687.47 807.251 1685.14 cv
805.923 1682.82 805.115 1680.35 804.963 1678.35 cv
804.853 1677.08 805.036 1675.8 805.396 1674.64 cv
805.596 1674.06 805.838 1673.51 806.116 1673 cv
806.392 1672.5 806.749 1672.03 807.109 1671.63 cv
807.824 1670.81 808.725 1670.22 809.659 1669.89 cv
810.597 1669.56 811.591 1669.5 812.61 1669.7 cv
813.629 1669.9 814.542 1670.33 815.337 1670.87 cv
816.134 1671.41 816.79 1672.05 817.381 1672.74 cv
817.674 1673.09 817.906 1673.45 818.145 1673.81 cv
818.383 1674.18 818.582 1674.55 818.739 1674.93 cv
819.092 1675.68 819.28 1676.46 819.353 1677.25 cv
cp
.376471 .521569 .65098 rgb
f
1040.09 1701.61 mo
1038.84 1705.86 1035.9 1710.51 1031.93 1714.25 cv
1029.96 1716.12 1027.76 1717.74 1025.49 1719.07 cv
1023.23 1720.4 1020.89 1721.42 1018.65 1722.16 cv
1016.41 1722.91 1014.26 1723.39 1012.32 1723.66 cv
1011.34 1723.78 1010.44 1723.9 1009.58 1723.93 cv
1009.16 1723.95 1008.75 1723.97 1008.36 1723.99 cv
1007.97 1723.99 1007.59 1723.99 1007.24 1723.99 cv
1006.53 1723.99 1005.89 1723.95 1005.33 1723.91 cv
1004.78 1723.88 1004.3 1723.82 1003.92 1723.77 cv
1003.15 1723.67 1002.73 1723.61 1002.73 1723.61 cv
1002.73 1723.61 1003.02 1723.27 1003.55 1722.68 cv
1003.8 1722.39 1004.11 1722.02 1004.45 1721.59 cv
1004.62 1721.38 1004.81 1721.15 1005 1720.91 cv
1005.18 1720.67 1005.38 1720.41 1005.58 1720.14 cv
1007.2 1717.98 1009.09 1714.9 1010.47 1711.54 cv
1011.17 1709.86 1011.75 1708.13 1012.21 1706.43 cv
1012.67 1704.73 1012.99 1703.07 1013.22 1701.54 cv
1013.69 1698.46 1013.84 1695.82 1014.42 1693.9 cv
1014.79 1692.67 1015.4 1691.52 1016.24 1690.4 cv
1017.08 1689.29 1018.1 1688.21 1019.34 1687.18 cv
1020.56 1686.15 1021.97 1685.18 1023.55 1684.38 cv
1025.11 1683.59 1026.88 1682.98 1028.8 1682.8 cv
1030.72 1682.63 1032.55 1682.94 1034.23 1683.78 cv
1035.9 1684.61 1037.38 1685.97 1038.52 1687.76 cv
1039.65 1689.54 1040.46 1691.75 1040.74 1694.16 cv
1041.03 1696.56 1040.83 1699.14 1040.09 1701.61 cv
cp
.85098 .85098 .85098 rgb
f
1029.8 1710.64 mo
1028.76 1713.29 1026.61 1716.1 1023.86 1718.27 cv
1022.49 1719.36 1020.99 1720.27 1019.47 1721 cv
1017.94 1721.72 1016.39 1722.24 1014.91 1722.59 cv
1013.43 1722.95 1012.03 1723.13 1010.78 1723.2 cv
1010.14 1723.22 1009.56 1723.24 1009.01 1723.21 cv
1008.74 1723.2 1008.48 1723.19 1008.22 1723.18 cv
1007.97 1723.16 1007.73 1723.14 1007.5 1723.12 cv
1007.05 1723.08 1006.64 1723.01 1006.29 1722.96 cv
1005.94 1722.91 1005.63 1722.85 1005.39 1722.79 cv
1004.9 1722.69 1004.64 1722.62 1004.64 1722.62 cv
1004.64 1722.62 1004.85 1722.42 1005.21 1722.07 cv
1005.4 1721.9 1005.61 1721.68 1005.86 1721.43 cv
1005.98 1721.3 1006.11 1721.17 1006.24 1721.02 cv
1006.38 1720.88 1006.51 1720.72 1006.66 1720.56 cv
1007.82 1719.27 1009.2 1717.41 1010.27 1715.33 cv
1010.81 1714.3 1011.29 1713.22 1011.67 1712.16 cv
1012.06 1711.09 1012.36 1710.05 1012.6 1709.08 cv
1013.07 1707.13 1013.32 1705.46 1013.79 1704.26 cv
1014.1 1703.49 1014.56 1702.79 1015.16 1702.13 cv
1015.76 1701.46 1016.47 1700.82 1017.33 1700.23 cv
1018.16 1699.64 1019.12 1699.1 1020.17 1698.68 cv
1021.22 1698.26 1022.39 1697.97 1023.63 1697.97 cv
1024.87 1697.96 1026.02 1698.26 1027.05 1698.89 cv
1028.07 1699.52 1028.94 1700.47 1029.57 1701.69 cv
1030.19 1702.89 1030.59 1704.35 1030.63 1705.91 cv
1030.68 1707.46 1030.41 1709.1 1029.8 1710.64 cv
cp
.376471 .521569 .65098 rgb
f
481.615 1728.55 mo
484.917 1729.55 488.548 1731.71 491.73 1734.55 cv
494.928 1737.37 497.666 1740.82 499.63 1744.17 cv
501.608 1747.52 502.865 1750.68 503.577 1752.99 cv
503.771 1753.55 503.905 1754.08 504.025 1754.55 cv
504.138 1755 504.236 1755.4 504.317 1755.73 cv
504.462 1756.36 504.543 1756.72 504.543 1756.72 cv
504.543 1756.72 504.184 1756.59 503.543 1756.35 cv
503.227 1756.23 502.84 1756.08 502.394 1755.92 cv
502.173 1755.83 501.938 1755.75 501.688 1755.65 cv
501.433 1755.57 501.163 1755.48 500.88 1755.39 cv
500.322 1755.21 499.713 1755.01 499.063 1754.8 cv
498.42 1754.59 497.703 1754.41 496.986 1754.21 cv
496.627 1754.11 496.26 1754.01 495.886 1753.91 cv
495.505 1753.82 495.118 1753.73 494.725 1753.64 cv
493.94 1753.46 493.164 1753.26 492.335 1753.12 cv
489.085 1752.46 485.657 1752.05 482.606 1751.74 cv
479.545 1751.42 476.856 1751.22 474.89 1750.62 cv
473.633 1750.22 472.451 1749.63 471.364 1748.8 cv
470.816 1748.41 470.292 1747.96 469.795 1747.46 cv
469.299 1746.95 468.822 1746.45 468.382 1745.86 cv
467.504 1744.68 466.745 1743.4 466.214 1741.96 cv
465.685 1740.51 465.382 1738.93 465.475 1737.27 cv
465.568 1735.62 466.059 1734.1 466.928 1732.77 cv
467.793 1731.45 469.042 1730.29 470.559 1729.48 cv
471.318 1729.08 472.153 1728.7 473.027 1728.45 cv
473.901 1728.21 474.827 1728.03 475.784 1727.93 cv
477.683 1727.78 479.704 1727.95 481.615 1728.55 cv
cp
.85098 .85098 .85098 rgb
f
972.081 1650.66 mo
973.388 1652.43 974.485 1654.89 975.318 1657.57 cv
976.153 1660.25 976.724 1663.13 977.068 1665.77 cv
977.414 1668.42 977.548 1670.81 977.587 1672.54 cv
977.61 1673.4 977.602 1674.1 977.599 1674.58 cv
977.591 1675.06 977.586 1675.33 977.586 1675.33 cv
977.586 1675.33 977.356 1675.17 976.944 1674.89 cv
976.535 1674.61 975.945 1674.2 975.222 1673.7 cv
973.782 1672.7 971.813 1671.32 969.688 1669.84 cv
967.573 1668.36 965.315 1666.75 963.317 1665.19 cv
961.319 1663.62 959.577 1662.08 958.517 1660.64 cv
957.162 1658.8 956.498 1656.49 956.594 1654.23 cv
956.7 1651.97 957.572 1649.74 959.432 1648.18 cv
961.284 1646.62 963.664 1646.17 965.987 1646.66 cv
968.311 1647.15 970.564 1648.59 972.081 1650.66 cv
cp
f
772.862 1656.81 mo
773.818 1658.11 774.62 1659.91 775.229 1661.87 cv
775.839 1663.82 776.257 1665.93 776.508 1667.87 cv
776.762 1669.8 776.859 1671.55 776.888 1672.81 cv
776.905 1673.44 776.899 1673.96 776.897 1674.31 cv
776.891 1674.66 776.887 1674.86 776.887 1674.86 cv
776.887 1674.86 776.719 1674.74 776.418 1674.54 cv
776.119 1674.33 775.688 1674.03 775.159 1673.66 cv
774.106 1672.93 772.665 1671.93 771.112 1670.84 cv
769.565 1669.75 767.914 1668.58 766.453 1667.44 cv
764.992 1666.29 763.718 1665.17 762.943 1664.12 cv
761.952 1662.77 761.467 1661.08 761.537 1659.42 cv
761.615 1657.77 762.251 1656.14 763.612 1655 cv
764.967 1653.86 766.707 1653.53 768.405 1653.89 cv
770.105 1654.25 771.753 1655.3 772.862 1656.81 cv
cp
f
510.308 1702.44 mo
510.821 1703.97 511.034 1705.93 511.014 1707.98 cv
510.997 1710.03 510.748 1712.17 510.396 1714.08 cv
510.046 1716 509.603 1717.69 509.244 1718.91 cv
509.067 1719.51 508.904 1720 508.794 1720.33 cv
508.681 1720.67 508.618 1720.85 508.618 1720.85 cv
508.618 1720.85 508.493 1720.69 508.269 1720.4 cv
508.048 1720.11 507.729 1719.7 507.338 1719.19 cv
506.56 1718.17 505.496 1716.77 504.348 1715.26 cv
503.208 1713.75 501.995 1712.13 500.955 1710.59 cv
499.915 1709.06 499.046 1707.6 498.63 1706.36 cv
498.1 1704.77 498.155 1703.01 498.728 1701.46 cv
499.308 1699.91 500.412 1698.56 502.057 1697.88 cv
503.695 1697.21 505.453 1697.43 506.959 1698.3 cv
508.469 1699.16 509.714 1700.67 510.308 1702.44 cv
cp
f
1197.04 1694.3 mo
1194.91 1695.17 1192.12 1695.7 1189.01 1696.35 cv
1185.91 1696.98 1182.49 1697.74 1179.31 1698.72 cv
1176.14 1699.68 1173.18 1700.8 1171.04 1701.75 cv
1170.48 1701.97 1170.01 1702.2 1169.59 1702.41 cv
1169.16 1702.61 1168.8 1702.78 1168.49 1702.92 cv
1167.88 1703.21 1167.54 1703.37 1167.54 1703.37 cv
1167.54 1703.37 1167.6 1702.99 1167.69 1702.3 cv
1167.75 1701.95 1167.82 1701.52 1167.9 1701.03 cv
1167.98 1700.53 1168.08 1699.96 1168.23 1699.35 cv
1168.38 1698.73 1168.55 1698.05 1168.74 1697.31 cv
1168.93 1696.58 1169.19 1695.83 1169.46 1695 cv
1169.6 1694.59 1169.74 1694.17 1169.89 1693.75 cv
1170.06 1693.33 1170.23 1692.9 1170.4 1692.47 cv
1170.77 1691.6 1171.14 1690.68 1171.6 1689.79 cv
1173.36 1686.15 1175.88 1682.35 1178.85 1679.21 cv
1181.81 1676.07 1185.2 1673.64 1188.18 1672.43 cv
1190.08 1671.64 1192.14 1671.29 1194.09 1671.27 cv
1195.08 1671.29 1196.04 1671.39 1196.96 1671.56 cv
1197.87 1671.73 1198.76 1672.04 1199.57 1672.39 cv
1201.19 1673.08 1202.57 1674.16 1203.56 1675.43 cv
1204.56 1676.71 1205.19 1678.21 1205.43 1679.89 cv
1205.66 1681.57 1205.49 1683.21 1205.07 1684.73 cv
1204.66 1686.25 1204 1687.61 1203.21 1688.89 cv
1201.6 1691.36 1199.51 1693.29 1197.04 1694.3 cv
cp
f
1193.91 1692.22 mo
1192.41 1692.83 1190.45 1693.2 1188.27 1693.66 cv
1186.1 1694.1 1183.7 1694.64 1181.47 1695.32 cv
1179.24 1696 1177.16 1696.79 1175.66 1697.45 cv
1175.27 1697.61 1174.94 1697.77 1174.64 1697.91 cv
1174.34 1698.05 1174.08 1698.17 1173.87 1698.27 cv
1173.44 1698.48 1173.2 1698.59 1173.2 1698.59 cv
1173.2 1698.59 1173.24 1698.32 1173.31 1697.84 cv
1173.35 1697.59 1173.4 1697.29 1173.45 1696.94 cv
1173.51 1696.59 1173.58 1696.19 1173.69 1695.77 cv
1173.79 1695.33 1173.91 1694.85 1174.04 1694.34 cv
1174.18 1693.82 1174.36 1693.29 1174.55 1692.71 cv
1174.65 1692.43 1174.75 1692.13 1174.85 1691.83 cv
1174.97 1691.54 1175.09 1691.24 1175.21 1690.93 cv
1175.47 1690.33 1175.73 1689.68 1176.05 1689.05 cv
1177.29 1686.5 1179.06 1683.83 1181.14 1681.63 cv
1183.22 1679.43 1185.6 1677.72 1187.69 1676.87 cv
1189.03 1676.32 1190.47 1676.07 1191.84 1676.06 cv
1192.53 1676.07 1193.21 1676.14 1193.85 1676.26 cv
1194.49 1676.38 1195.12 1676.6 1195.68 1676.84 cv
1196.82 1677.33 1197.79 1678.08 1198.49 1678.97 cv
1199.19 1679.87 1199.63 1680.93 1199.8 1682.11 cv
1199.96 1683.29 1199.84 1684.44 1199.55 1685.5 cv
1199.26 1686.57 1198.79 1687.52 1198.24 1688.42 cv
1197.11 1690.16 1195.64 1691.51 1193.91 1692.22 cv
cp
.376471 .521569 .65098 rgb
f
1027.29 1632.77 mo
1026.65 1633.72 1025.65 1634.73 1024.54 1635.86 cv
1023.43 1637 1022.23 1638.27 1021.19 1639.56 cv
1020.14 1640.85 1019.23 1642.14 1018.61 1643.14 cv
1018.44 1643.38 1018.31 1643.61 1018.19 1643.81 cv
1018.07 1644.01 1017.97 1644.19 1017.88 1644.33 cv
1017.71 1644.62 1017.61 1644.79 1017.61 1644.79 cv
1017.61 1644.79 1017.53 1644.61 1017.38 1644.3 cv
1017.3 1644.14 1017.21 1643.94 1017.11 1643.72 cv
1017 1643.49 1016.88 1643.22 1016.77 1642.93 cv
1016.66 1642.63 1016.54 1642.3 1016.41 1641.94 cv
1016.29 1641.58 1016.18 1641.2 1016.06 1640.78 cv
1016.01 1640.57 1015.95 1640.36 1015.89 1640.14 cv
1015.84 1639.92 1015.8 1639.7 1015.75 1639.47 cv
1015.65 1639.01 1015.55 1638.52 1015.49 1638.02 cv
1015.2 1636.02 1015.18 1633.74 1015.53 1631.61 cv
1015.88 1629.48 1016.6 1627.52 1017.5 1626.19 cv
1018.07 1625.33 1018.82 1624.61 1019.62 1624.05 cv
1020.03 1623.79 1020.46 1623.56 1020.89 1623.37 cv
1021.32 1623.19 1021.77 1623.07 1022.2 1622.98 cv
1023.07 1622.82 1023.94 1622.88 1024.71 1623.12 cv
1025.48 1623.37 1026.16 1623.82 1026.73 1624.45 cv
1027.3 1625.08 1027.69 1625.81 1027.94 1626.55 cv
1028.19 1627.3 1028.3 1628.05 1028.33 1628.8 cv
1028.36 1630.27 1028.03 1631.66 1027.29 1632.77 cv
cp
.85098 .85098 .85098 rgb
f
1514.21 1742.23 mo
1513.07 1742.04 1511.74 1741.53 1510.25 1741 cv
1508.76 1740.45 1507.11 1739.88 1505.5 1739.46 cv
1503.9 1739.04 1502.34 1738.75 1501.18 1738.59 cv
1500.89 1738.54 1500.62 1738.51 1500.39 1738.49 cv
1500.16 1738.46 1499.95 1738.44 1499.79 1738.42 cv
1499.45 1738.39 1499.26 1738.37 1499.26 1738.37 cv
1499.26 1738.37 1499.39 1738.21 1499.61 1737.95 cv
1499.73 1737.81 1499.87 1737.65 1500.03 1737.46 cv
1500.2 1737.27 1500.39 1737.05 1500.61 1736.83 cv
1500.84 1736.61 1501.09 1736.36 1501.36 1736.1 cv
1501.64 1735.83 1501.94 1735.58 1502.27 1735.3 cv
1502.44 1735.16 1502.61 1735.02 1502.79 1734.88 cv
1502.97 1734.75 1503.15 1734.61 1503.34 1734.47 cv
1503.72 1734.2 1504.12 1733.9 1504.55 1733.64 cv
1506.25 1732.55 1508.32 1731.59 1510.41 1731.04 cv
1512.49 1730.47 1514.57 1730.33 1516.16 1730.59 cv
1517.17 1730.75 1518.14 1731.14 1518.98 1731.64 cv
1519.4 1731.91 1519.78 1732.2 1520.12 1732.52 cv
1520.47 1732.83 1520.77 1733.2 1521.02 1733.55 cv
1521.53 1734.27 1521.83 1735.09 1521.93 1735.89 cv
1522.02 1736.7 1521.89 1737.5 1521.55 1738.28 cv
1521.21 1739.06 1520.71 1739.71 1520.13 1740.25 cv
1519.56 1740.79 1518.92 1741.2 1518.25 1741.54 cv
1516.92 1742.17 1515.52 1742.44 1514.21 1742.23 cv
cp
f
1389.61 1678.12 mo
1388.46 1678.17 1387.06 1677.94 1385.49 1677.72 cv
1383.93 1677.49 1382.19 1677.26 1380.53 1677.18 cv
1378.87 1677.09 1377.29 1677.12 1376.12 1677.2 cv
1375.82 1677.21 1375.56 1677.24 1375.33 1677.26 cv
1375.09 1677.28 1374.89 1677.3 1374.73 1677.32 cv
1374.39 1677.35 1374.2 1677.37 1374.2 1677.37 cv
1374.2 1677.37 1374.29 1677.2 1374.46 1676.89 cv
1374.54 1676.73 1374.65 1676.55 1374.77 1676.33 cv
1374.89 1676.1 1375.04 1675.86 1375.21 1675.59 cv
1375.38 1675.33 1375.58 1675.04 1375.79 1674.72 cv
1376.01 1674.41 1376.26 1674.1 1376.53 1673.76 cv
1376.66 1673.59 1376.8 1673.42 1376.94 1673.24 cv
1377.09 1673.07 1377.25 1672.9 1377.4 1672.73 cv
1377.72 1672.38 1378.05 1672.01 1378.42 1671.67 cv
1379.87 1670.26 1381.7 1668.9 1383.63 1667.93 cv
1385.55 1666.96 1387.56 1666.39 1389.17 1666.33 cv
1390.2 1666.29 1391.22 1666.47 1392.15 1666.79 cv
1392.61 1666.97 1393.04 1667.18 1393.44 1667.42 cv
1393.85 1667.65 1394.21 1667.95 1394.53 1668.25 cv
1395.18 1668.85 1395.64 1669.59 1395.89 1670.36 cv
1396.14 1671.13 1396.18 1671.94 1396.01 1672.77 cv
1395.83 1673.61 1395.47 1674.35 1395.02 1674.99 cv
1394.57 1675.63 1394.02 1676.16 1393.44 1676.63 cv
1392.26 1677.52 1390.95 1678.07 1389.61 1678.12 cv
cp
f
1347.65 1686.27 mo
1345.82 1687.64 1343.29 1688.84 1340.5 1690.11 cv
1337.72 1691.37 1334.67 1692.7 1331.85 1694.07 cv
1329.04 1695.42 1326.44 1696.78 1324.56 1697.83 cv
1322.69 1698.89 1321.49 1699.58 1321.49 1699.58 cv
1321.49 1699.58 1321.51 1699.22 1321.55 1698.59 cv
1321.61 1697.96 1321.65 1697.01 1321.81 1695.88 cv
1322.09 1693.59 1322.68 1690.44 1323.73 1687 cv
1324.78 1683.57 1326.34 1679.89 1328.29 1676.66 cv
1330.22 1673.44 1332.54 1670.69 1334.76 1669.03 cv
1337.6 1666.9 1341.18 1665.95 1344.3 1666.36 cv
1345.86 1666.54 1347.32 1667.08 1348.54 1667.89 cv
1349.76 1668.71 1350.76 1669.82 1351.47 1671.19 cv
1352.18 1672.57 1352.53 1674.03 1352.6 1675.47 cv
1352.67 1676.91 1352.47 1678.31 1352.09 1679.66 cv
1351.29 1682.33 1349.77 1684.68 1347.65 1686.27 cv
cp
f
1487.1 1726.25 mo
1485.14 1728.72 1482.11 1731.1 1478.65 1732.92 cv
1475.2 1734.76 1471.36 1736.03 1467.85 1736.71 cv
1464.33 1737.4 1461.19 1737.56 1458.96 1737.51 cv
1458.4 1737.52 1457.89 1737.48 1457.45 1737.45 cv
1457.01 1737.42 1456.64 1737.39 1456.33 1737.37 cv
1455.72 1737.31 1455.38 1737.28 1455.38 1737.28 cv
1455.38 1737.28 1455.6 1737 1456 1736.51 cv
1456.2 1736.26 1456.44 1735.96 1456.71 1735.62 cv
1456.85 1735.44 1457 1735.26 1457.15 1735.07 cv
1457.3 1734.87 1457.46 1734.65 1457.63 1734.43 cv
1458.97 1732.69 1460.65 1730.22 1462.24 1727.56 cv
1463.84 1724.9 1465.33 1722 1466.63 1719.41 cv
1467.93 1716.8 1469.05 1714.49 1470.27 1712.95 cv
1471.06 1711.97 1472 1711.13 1473.1 1710.45 cv
1473.64 1710.1 1474.22 1709.79 1474.83 1709.53 cv
1475.45 1709.27 1476.06 1709.03 1476.72 1708.85 cv
1478.05 1708.5 1479.43 1708.29 1480.86 1708.35 cv
1482.29 1708.41 1483.76 1708.72 1485.14 1709.4 cv
1486.53 1710.08 1487.65 1711.04 1488.48 1712.26 cv
1489.3 1713.47 1489.86 1714.94 1490.03 1716.52 cv
1490.11 1717.31 1490.15 1718.15 1490.06 1718.98 cv
1489.97 1719.8 1489.81 1720.65 1489.57 1721.5 cv
1489.06 1723.17 1488.24 1724.82 1487.1 1726.25 cv
cp
f
1227.74 1643.91 mo
1226.7 1645.84 1224.89 1647.83 1222.74 1649.49 cv
1220.59 1651.16 1218.1 1652.49 1215.77 1653.37 cv
1213.44 1654.27 1211.3 1654.75 1209.76 1654.98 cv
1209.38 1655.05 1209.03 1655.08 1208.72 1655.12 cv
1208.42 1655.14 1208.15 1655.17 1207.94 1655.19 cv
1207.51 1655.22 1207.28 1655.24 1207.28 1655.24 cv
1207.28 1655.24 1207.4 1655.03 1207.61 1654.64 cv
1207.72 1654.45 1207.85 1654.21 1208 1653.94 cv
1208.07 1653.81 1208.15 1653.66 1208.23 1653.51 cv
1208.31 1653.36 1208.4 1653.19 1208.48 1653.02 cv
1209.19 1651.67 1210.05 1649.77 1210.83 1647.76 cv
1211.62 1645.74 1212.29 1643.58 1212.88 1641.64 cv
1213.47 1639.7 1213.96 1637.98 1214.61 1636.78 cv
1215.04 1636.01 1215.58 1635.32 1216.26 1634.72 cv
1216.59 1634.42 1216.95 1634.14 1217.34 1633.89 cv
1217.73 1633.64 1218.12 1633.4 1218.56 1633.2 cv
1219.43 1632.79 1220.35 1632.49 1221.34 1632.36 cv
1222.33 1632.23 1223.37 1632.27 1224.4 1632.57 cv
1225.43 1632.87 1226.32 1633.41 1227.03 1634.14 cv
1227.74 1634.88 1228.3 1635.82 1228.6 1636.88 cv
1228.75 1637.41 1228.88 1637.98 1228.91 1638.56 cv
1228.95 1639.14 1228.94 1639.75 1228.88 1640.35 cv
1228.72 1641.56 1228.36 1642.79 1227.74 1643.91 cv
cp
f
637.105 1664.55 mo
638.677 1666.08 640.106 1668.36 641.117 1670.88 cv
642.139 1673.41 642.744 1676.16 642.962 1678.64 cv
643.186 1681.13 643.067 1683.32 642.872 1684.86 cv
642.834 1685.25 642.773 1685.6 642.721 1685.9 cv
642.667 1686.2 642.62 1686.46 642.582 1686.67 cv
642.499 1687.09 642.453 1687.32 642.453 1687.32 cv
642.453 1687.32 642.276 1687.15 641.961 1686.84 cv
641.805 1686.68 641.615 1686.5 641.395 1686.28 cv
641.286 1686.17 641.169 1686.06 641.046 1685.93 cv
640.918 1685.82 640.783 1685.69 640.641 1685.56 cv
639.531 1684.51 637.944 1683.16 636.216 1681.87 cv
634.483 1680.56 632.586 1679.33 630.881 1678.24 cv
629.173 1677.14 627.651 1676.2 626.673 1675.25 cv
626.052 1674.63 625.533 1673.92 625.145 1673.1 cv
624.941 1672.71 624.771 1672.28 624.635 1671.84 cv
624.499 1671.39 624.376 1670.95 624.3 1670.48 cv
624.15 1669.53 624.107 1668.56 624.251 1667.57 cv
624.396 1666.59 624.717 1665.59 625.288 1664.68 cv
625.858 1663.77 626.61 1663.06 627.512 1662.58 cv
628.411 1662.09 629.471 1661.82 630.575 1661.82 cv
631.127 1661.81 631.711 1661.85 632.279 1661.97 cv
632.847 1662.09 633.423 1662.26 633.993 1662.49 cv
635.11 1662.97 636.2 1663.65 637.105 1664.55 cv
cp
f
589.22 1649.45 mo
589.22 1652.65 586.624 1655.24 583.422 1655.24 cv
580.22 1655.24 577.624 1652.65 577.624 1649.45 cv
577.624 1646.24 580.22 1643.65 583.422 1643.65 cv
586.624 1643.65 589.22 1646.24 589.22 1649.45 cv
cp
f
864.615 1635.64 mo
864.615 1638.85 862.019 1641.44 858.817 1641.44 cv
855.615 1641.44 853.019 1638.85 853.019 1635.64 cv
853.019 1632.44 855.615 1629.85 858.817 1629.85 cv
862.019 1629.85 864.615 1632.44 864.615 1635.64 cv
cp
f
989.198 1617.09 mo
989.198 1620.29 986.603 1622.89 983.401 1622.89 cv
980.198 1622.89 977.603 1620.29 977.603 1617.09 cv
977.603 1613.89 980.198 1611.29 983.401 1611.29 cv
986.603 1611.29 989.198 1613.89 989.198 1617.09 cv
cp
f
728.412 1676.93 mo
728.412 1680.14 725.816 1682.73 722.615 1682.73 cv
719.412 1682.73 716.817 1680.14 716.817 1676.93 cv
716.817 1673.73 719.412 1671.14 722.615 1671.14 cv
725.816 1671.14 728.412 1673.73 728.412 1676.93 cv
cp
f
1291.61 1653.75 mo
1291.61 1656.95 1289.02 1659.55 1285.82 1659.55 cv
1282.61 1659.55 1280.02 1656.95 1280.02 1653.75 cv
1280.02 1650.55 1282.61 1647.95 1285.82 1647.95 cv
1289.02 1647.95 1291.61 1650.55 1291.61 1653.75 cv
cp
f
1125.41 1678.13 mo
1125.41 1681.33 1122.82 1683.93 1119.61 1683.93 cv
1116.41 1683.93 1113.82 1681.33 1113.82 1678.13 cv
1113.82 1674.93 1116.41 1672.33 1119.61 1672.33 cv
1122.82 1672.33 1125.41 1674.93 1125.41 1678.13 cv
cp
f
542.412 1709.57 mo
542.412 1712.77 539.816 1715.37 536.615 1715.37 cv
533.412 1715.37 530.817 1712.77 530.817 1709.57 cv
530.817 1706.37 533.412 1703.77 536.615 1703.77 cv
539.816 1703.77 542.412 1706.37 542.412 1709.57 cv
cp
f
1449.41 1697.49 mo
1449.41 1700.69 1446.82 1703.29 1443.61 1703.29 cv
1440.41 1703.29 1437.82 1700.69 1437.82 1697.49 cv
1437.82 1694.29 1440.41 1691.69 1443.61 1691.69 cv
1446.82 1691.69 1449.41 1694.29 1449.41 1697.49 cv
cp
f
782.698 1687.32 mo
782.698 1688.92 781.4 1690.22 779.799 1690.22 cv
778.198 1690.22 776.9 1688.92 776.9 1687.32 cv
776.9 1685.72 778.198 1684.42 779.799 1684.42 cv
781.4 1684.42 782.698 1685.72 782.698 1687.32 cv
cp
f
655.926 1644.79 mo
655.926 1646.39 654.628 1647.69 653.027 1647.69 cv
651.426 1647.69 650.128 1646.39 650.128 1644.79 cv
650.128 1643.19 651.426 1641.89 653.027 1641.89 cv
654.628 1641.89 655.926 1643.19 655.926 1644.79 cv
cp
f
909.177 1642.85 mo
909.177 1644.45 907.879 1645.75 906.278 1645.75 cv
904.677 1645.75 903.379 1644.45 903.379 1642.85 cv
903.379 1641.25 904.677 1639.95 906.278 1639.95 cv
907.879 1639.95 909.177 1641.25 909.177 1642.85 cv
cp
f
995.321 1571.35 mo
995.321 1572.95 994.023 1574.25 992.422 1574.25 cv
990.821 1574.25 989.523 1572.95 989.523 1571.35 cv
989.523 1569.75 990.821 1568.45 992.422 1568.45 cv
994.023 1568.45 995.321 1569.75 995.321 1571.35 cv
cp
f
1371.79 1647.95 mo
1371.79 1649.56 1370.49 1650.85 1368.89 1650.85 cv
1367.29 1650.85 1365.99 1649.56 1365.99 1647.95 cv
1365.99 1646.35 1367.29 1645.06 1368.89 1645.06 cv
1370.49 1645.06 1371.79 1646.35 1371.79 1647.95 cv
cp
f
1427.61 1661.41 mo
1427.61 1663.01 1426.32 1664.3 1424.72 1664.3 cv
1423.11 1664.3 1421.82 1663.01 1421.82 1661.41 cv
1421.82 1659.8 1423.11 1658.51 1424.72 1658.51 cv
1426.32 1658.51 1427.61 1659.8 1427.61 1661.41 cv
cp
f
1251.51 1666.33 mo
1251.51 1667.93 1250.22 1669.23 1248.61 1669.23 cv
1247.01 1669.23 1245.72 1667.93 1245.72 1666.33 cv
1245.72 1664.73 1247.01 1663.43 1248.61 1663.43 cv
1250.22 1663.43 1251.51 1664.73 1251.51 1666.33 cv
cp
f
1170.44 1653.75 mo
1170.44 1655.35 1169.14 1656.65 1167.54 1656.65 cv
1165.94 1656.65 1164.64 1655.35 1164.64 1653.75 cv
1164.64 1652.15 1165.94 1650.85 1167.54 1650.85 cv
1169.14 1650.85 1170.44 1652.15 1170.44 1653.75 cv
cp
f
539.513 1676.93 mo
539.513 1678.53 538.215 1679.83 536.615 1679.83 cv
535.013 1679.83 533.716 1678.53 533.716 1676.93 cv
533.716 1675.33 535.013 1674.03 536.615 1674.03 cv
538.215 1674.03 539.513 1675.33 539.513 1676.93 cv
cp
f
1074.51 1658.51 mo
1074.51 1660.11 1073.22 1661.41 1071.61 1661.41 cv
1070.01 1661.41 1068.72 1660.11 1068.72 1658.51 cv
1068.72 1656.91 1070.01 1655.61 1071.61 1655.61 cv
1073.22 1655.61 1074.51 1656.91 1074.51 1658.51 cv
cp
f
864.614 1778.42 mo
864.735 1773.77 866.21 1769.04 869.112 1765.25 cv
869.777 1764.25 870.654 1763.44 871.451 1762.55 cv
871.887 1762.14 872.343 1761.75 872.789 1761.36 cv
873.464 1760.77 li
874.189 1760.24 li
874.675 1759.9 875.154 1759.54 875.648 1759.2 cv
877.195 1758.3 li
877.972 1757.86 li
878.78 1757.48 li
880.4 1756.71 li
884.806 1754.87 889.549 1753.97 894.28 1753.68 cv
899.023 1753.41 903.777 1753.81 908.426 1754.67 cv
917.72 1756.46 926.599 1760.03 934.662 1764.85 cv
942.791 1769.59 950.063 1775.63 956.585 1782.29 cv
953.001 1779.3 949.478 1776.26 945.635 1773.63 cv
941.861 1770.93 937.958 1768.41 933.889 1766.21 cv
925.798 1761.74 917.094 1758.34 908.058 1756.63 cv
903.548 1755.76 898.946 1755.37 894.374 1755.56 cv
889.803 1755.74 885.255 1756.56 880.983 1758.16 cv
879.416 1758.83 li
878.63 1759.17 li
877.878 1759.57 li
876.374 1760.38 li
874.944 1761.31 li
874.228 1761.77 li
873.562 1762.31 li
872.232 1763.38 li
871.437 1764.19 870.563 1764.94 869.876 1765.85 cv
866.836 1769.3 865.185 1773.8 864.614 1778.42 cv
cp
f
1148 1783.88 mo
1154.21 1780.4 1160.47 1777.01 1166.86 1773.85 cv
1173.23 1770.67 1179.7 1767.68 1186.3 1764.96 cv
1192.92 1762.3 1199.65 1759.81 1206.68 1758.27 cv
1210.19 1757.54 1213.81 1756.96 1217.47 1757.38 cv
1219.26 1757.62 1221.16 1758.18 1222.5 1759.53 cv
1223.15 1760.2 1223.61 1761.04 1223.83 1761.92 cv
1224.05 1762.81 1224.07 1763.72 1224 1764.6 cv
1223.96 1762.84 1223.45 1761.02 1222.13 1759.92 cv
1220.84 1758.81 1219.08 1758.44 1217.37 1758.35 cv
1215.65 1758.25 1213.91 1758.42 1212.18 1758.7 cv
1210.46 1758.97 1208.74 1759.34 1207.04 1759.79 cv
1203.64 1760.69 1200.28 1761.77 1196.96 1762.98 cv
1193.63 1764.17 1190.33 1765.46 1187.06 1766.81 cv
1180.49 1769.47 1174.01 1772.37 1167.52 1775.26 cv
1161.04 1778.17 1154.55 1781.09 1148 1783.88 cv
cp
f
722.614 1788.6 mo
718.125 1786.25 713.571 1784.08 709.002 1781.94 cv
704.423 1779.83 699.837 1777.73 695.21 1775.73 cv
690.598 1773.7 685.949 1771.75 681.265 1769.91 cv
678.917 1769.01 676.563 1768.12 674.168 1767.38 cv
672.975 1767 671.766 1766.66 670.543 1766.44 cv
669.933 1766.33 669.313 1766.25 668.708 1766.3 cv
668.413 1766.33 668.103 1766.39 667.875 1766.57 cv
667.64 1766.75 667.569 1767.09 667.614 1767.4 cv
667.522 1767.1 667.525 1766.73 667.769 1766.46 cv
668.006 1766.2 668.341 1766.09 668.657 1766.01 cv
669.305 1765.86 669.959 1765.86 670.604 1765.89 cv
671.895 1765.95 673.159 1766.18 674.414 1766.43 cv
676.915 1766.96 679.368 1767.66 681.788 1768.44 cv
686.632 1770 691.352 1771.89 696.011 1773.9 cv
700.653 1775.95 705.235 1778.14 709.699 1780.55 cv
714.159 1782.97 718.56 1785.54 722.614 1788.6 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.1.0
%%Title: (travel-11.eps)
%%CreationDate: 3/11/2020 12:32 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4fNehI#NmWJ1e3),Tu!Ma@%g18&&:*=)#%*`V(J:k+`D;*J9_t2X?2+ZGJ)`.+MD,8K!4n0s+,[">To3,=$qqAI?k[_3X
%+7;'Xs&uQWAkM-l7;\<CTCfaKhgbR_g9o!"=1u^e#Id2b-V(l/oYl'^e!j$7UVUV+=g#/]mga,/]DKt(Xo6Ze$qA"^RY1%R+ag2m
%Q@8#i#JJDrI+4_<CgBl4r^'t@4b7Of"Sb'd].[qid'VJq:16:>2\*Url;=nc88+jG_M;4+rVg=gmS<YSiMW/)['=4glHS1*QTJT\
%jdLkK!d*#I]tNjU@*6fs'r0^=l-1,AEP(rB(gA?Z/IN)PoF^'"In?7Nib)-Js,(6_J&C/D:"Ke<kJ`?;5""i?.r$D`DABl.:H\\^
%(2/g5_=?aaW&m25S;/m?\CEZ%*d";C7^#\+f<a2*JcYZHe\C-G!+fS`->_LQk@%h.A3G,S4sQE"XsLM+,t)$L=aXC=,e[R^^#,,k
%O*f^=hDikK@m&T6rt"$-^*Vu5k]h5*k`&p[qbu.-V7)m+q/j!u)ZZ7_#s*\kO[]XLoJ;HYlAkUc;]tDRhurS[>k@2/cVBKY]"e!$
%C8D>7H%+NfDN3N"=r4=2$@nI'>n_>_W5o",4sPI86YoIX;^-iR0i!=!`7\Gd%rqOLM#-qW^Y^+ca+_)XO2h.SK$p3iH2^+!WVb+n
%H2K<H)'CW(p4a//;LN7B/b+du5Ma8UXq#Y[UE`1H"TN9>[g[hM#,D.D>Ppd80ZD.RfFTofGrC7-oS5ErO$>be56'``hul(_NCPA:
%CW!j5O$>0PG":<#g.$SEX)Vd3H>h@MW3&.Qr\bZ:_OkVU]l"u(lJ;I0bmPlS4R>dd%VDUJXoH\bDgFLod27[Z\+Y4H)uP8nT_,4#
%NOq9VA,&-F\]f_WQ#YSDI$ahks*pI*K4okU(DCcRlL<E^@!#YBR)`KE`YX9qYWGTFMcffjHFeXW@S.WmS%cMaS3YuP!#D$"MNeJR
%Pe&L?W:'9X1eDVq4%ZdMT>erm2r&SE)-bq5TYE_Z*Zt#uC<c:jjIiq=)@b-]F8F@Lb'hcnhn0X,s*h=<)Y>CIkqV:c(I5n:SO%2c
%pW9dd3NOFrO,)&:%%l"\#QnZt!2>[lo7pBHpHC0WCYk8Jo=sN=Rl^b@H-`F4V<<NoJ)F6LP#ll)+:uk,r,]nprmh70^!Y`OJ5Hp&
%Hi5+T%(4?Drj5brk32"G%Fs1p62.lZS.eD1(/ngP5d-IGf&G\M5KI#L=Oq8K`nfH7W5[lP_X$0bHNYg+5;^otKSehLK3D<`k3e9p
%I/*5eHU%KP0(Vle7ggUOHntP#piuYroNq\a:!nV3>O_Z0qQ.Q3,<D"f.JRTO)#@e4Z1N&*naL8>V[8trqQsfQ2Vu92K#cmc$NC#!
%_ZO(*Hr\f/I+l#?)`EJ4Zdp%qiM3Ku3a!CcXfRrPn8Xl@9W$dD11=3X)uaW@VTFgMO#:=m)MMDFX1GF&\tO34[=cR0I'f3>UY9H_
%[8]NTb/)+J"3Z6q_$X7X`D)c<IW/Wup'N<=ciG*t.QP>f`mrOa10TeAE8ZUm9t6o%XNAq[11T8$$:#q[LXt"-:Qnh7CW"\6ZoWFI
%J60N)=&fnt\4-uN>\+-*eF:;^+rgcf[iJl3"K:MQnR:70),22X]n4c:%LJIRr6X^4D4lO]<oMM^:Q%D2pb_2u_oK[8d0HoZf]X1K
%^eQqJ5)<@3SYl5QLK49(L/3^k:&$R/PJbGYa3hrE-_h3h%%so+kQ<f[Fgc!M36dLK[/"&:5#(f/g5QC;L2NAJ"s;T=%H#7cdqCQW
%XTf8=D01;sOW"tMg,+A4R^VIL*^4kUd;1^Fn7fcA3s6;O!al%@!.1iLAQu>!iKL_h0F[uh@65Lh$JAHsh$,tDA_OS.Hhc[k86fF.
%<k=0(LL%u$R$%)S@%WbYm8rnhqV2'>gYCmScXH(_]Tor,80-VUfhc*qEG'8uEE@-U]Hc.VO$BH=^g:\%E?B0:E=[$oEW*QHY]a>5
%Xr:?el\8CA#+L.h2QbicY'k#E8HO`0$3Y;b_#%$L\.!jAR1ttCLWnf\4*.Bl_TlEJ7\Y6tJb&rg(X.P=_O#b!U*b+$3"i_q$QK.?
%Vnn?:[g[Z)>bMs>cb+d8q.lh)s3WLZe!fYjejikl$,;2j8F6R\<>+p2`4i0-E$t+'qsfFTqHr37^\]&O>)2"L6/-<8;gV^Fn4D,Q
%iCiWGrV48SLcAVjf'$;7AI]4C&N35`^9u:(CttCl'FnA\E&0FbAiQhS:,9c<4@^U"\Q?Wk\=<Sf7r\'cT]pQ91j0JjYQ[EmAomeP
%YZcD*jlsU^c]+nT*$eWl!L%JtaXoRPfP#r_:,R?k6DMa\?#/s==ZnQ9@_8Z[Sag*86AFC>!Or!ogj7:nc8%'5[p`=tF)Ep;QnVWf
%R;nu9Yc#Y7,LjR=5YkB."6af)=%;AL)1Ert\.$7m1t]^t.%2?^!_2[d"&W,0T^da@CY/b&/FPsBNWW0H@g:#qI$h`pY8IO"1BBD,
%.d@)t$*X^ljB:;#jWbgq:V1S6MN+O]"\[SHnV>^=ehB#SmOeB4j:9C2-2%_7+;g!lkq"KXbm74kEe9LjXIubF*OILt'=Zm1Uh;%d
%RXT-Ir78leH'mf,X`7U-^6?F,J,j9dFp@jG<g#t)([s#;JJ7E%Os%i-8GP/r5,N]]J2BkZ?3i2`!*q*,\LB/dA9A'7oK/,Tl<p4u
%$S+pbRsq3U[B3(EQ-.1TEsYemZFnU$*j\e!O]-C:JI'FTo&;.Bhhbl_-L0bt`g;mWCo)3;,e4%O/5NmqmQT:gcc9FKhn5noG-2du
%"@#\*%d%jdd2-`P@)WNFh)G*]GQhS"il0V%F;'sTF+$3C,CH>,p#OQG>.joBFi/\0nE,%ifNYE_s-0pfg*u/hWl7bW%Z)jhC:r/k
%:Lg3mr-eQ_eiX'0fl\fJ//VFh$]>&Y+B8>Hd%;$T_O[2_I_6tGrsTc-pn&[In1Rsoc@$N\TDh%<J]4tfA2sF&8:T0U@5T.D3Q@td
%[A@L9k1UgmZe7Q(*q[l'(6b"^$^?"4p'RXo1V$FpB/pMGA2lOLD.qi6O@:c/r5Kfks7@#pOdA&EGk]6#C.kd3r.R$5^aO'c@edV"
%%XK88GU"lMs2`>qc\Dc5n,<Qc2g]N9@L#sE`\+cJ*bU]TG_LAH!5:N5_I,WRY=Q\nY`4e$a=Kf20"eb+2T_`k%ZJm6i,"/Dcsd1m
%#/:T'U!%F6==u.m$uG,nX',T!dK;?)S"1CtQ:L[t2Dam<WVKq.Y_sRYQgd,)f\/0eF<2tG"=1brF:h7j*(BpC"F"kh,hq?m7?Sl,
%@?=-L':.1]YB;RpB$1iGC^C0[Rp6-C!Z*]js'[ehbBQE>S+ne`pS(g;9VRJ1`_7>%p^.+o-;5KO^Z8ZL\<CF837\$FgL7D@f!CqZ
%(**q7g>-HZ]qqRXJGbCVp32UO]Aqd9_n2fccUPO[1V3&+(B/G5(rCel0FYu"m?;7&EYE!h$uV$Eh7n*$5NsVnEB=F(_="fl%&6d=
%Bam=m](*i5GDmP?pVQU^jNFa_n`2;.d7nl&E5+I-fC%QB%E=FM)$<a`KlLNYPNne?oq34`L:tbqBe\7$m-S*d9QB9eJ&DQ#qih.*
%0=+6CREaU\)=?Q!)_DU#1Pt,K#DtVc.$k$)^UlYm?&CEjKB`Cq+oH>RYl*hK`<)(uB+R2nF6@'h*?G(\`8=ooU<A`Qg;U!XJIaD0
%WIG01:tF#YCH_]AZ1;Go[snC+rte5sae6E?IubEOGVm795A.acUFF9uNS`NV'=0<FqpSpK7gO1*Gm1pT['c`3^$^0X53V\6%k]/K
%da3K^%OLn#VX?0\J'f$]lgIRZ0"&SNnfP-Q`=-#G]!ps6*<,8E@d9Sk0l;TE/)f$4)uKS3)uKRUA6Y/Bg`2lDGC#KArQd/M5j/(j
%eoB3/G'Cdfq@aX.s4`IB\f3s`QQi``BEj1t$YZV5=\DU/b*];JFGK`@QoOqOFH!b*GNNpL;G!)4;4L\*[dKe1C"Ge.g-+lU6X+s7
%c=emA9f`T<j6l@'m!M=Za^MHD``fKa1*+nOFXPWZVR+RPDIY9%9ul)KjL>R?htaso5OS!k-H/6>AND=NmZ+4"U[EB9[R4d$ZF4%(
%>+R`lG*)pN#j>HA1;YSbR&WZZGSlG92u`/6X4k(-CA0^U(f)Gc%n@uL$M0khnAF3ukAYMuKq48;$8:1Wn`U?^\NfL.@_Qg<o&'mg
%Y(FBp\JO;_Uc8:\=53$=CJ%`Th<k375E,_D>4$I$3RW#M48cKJfdq*WTN#4J7>Yjk)f)"._'"3e9lE/1HPY*#=en8,N]2<;a5&1l
%I:KY5*FN8c63H?Xmkbpug)I6'.q?d$>Nil\UZ\:ReFkk7*bYW%4M\&j.=c!T:g4jl*DZJhi6C]NP&jBqj3_:56^\aQ8P?&/R.pXB
%'cL/Ss-a]Ik+'8$E)st2I!FB"m@PBKMJE]o8dLk5UcN4l6l4<U.3KqCoOoMTVnL2<Oqi@+VKbiM5GI_6k9n_gi1:=jKEl-]N0_:=
%VXH,99'Q&WmI$W/gmL[^jmVOEqT$ASkh?%E3,p%Dls0%Fj2_h-?[LgCN4;[/,$?%i'RY\=V:C&9O2b+oYf6g=2gNh%8.a^`1E,`U
%G3@(L>C&2r<r8r9L9_\rXFX>OLqS^$XRN:R@C>_I,mn[;dJm9d!#2ln9:Sn7(JWXNfX:it?d6Hr:kYl&2J^WO@9FL7PKb%CIGFG0
%4e!2SWJYG<e2b^@+atDZ0#a/W`Gecf7'/[!U)H`Sp\<6a/PSA=A!]GBo?1$?XtK+#GO,%j62.m<;!a\02`ko_F$/*3<%$r\RlB<r
%rm>/&\$q.^/GhA(SGE'h#iT+gdK=t^B:8C60Vs:oG%[c4oOL&$an-;@:<iKLZp!eP#JH%e3l.#lS!O9NYNJ(c*a(.aK5/[VE<st8
%Ftig>`nXs,:Xle3f-8NYS>P[K[enOKmdUH+0cFQej,ACBG9da<n\Jo:58UEn#V=p_J_Ie#+JR]Gp@#E_(f\oXjr%hn*ga_)nWoi:
%9:IW>O#O0**(PjC0@/q[JhN'UZ&#^d\(dDEpP1Q?3,d70kkJD7_3)Klp@]iHl,D[T]J^S93/DD;$`?%qj<H/URPXa@=KuZbT*LDX
%Ql-^%d1d#1,k:"mQQ?LgW.K9n!fu<frScVsU2a`4DKj,;1#'ue#dcW]0C-9E4QlLpod+c$mIedA0%F677'/:l>fo?(9#$VA1QU&d
%#(mt2RAql$on:G/J6Ds9U(-b7k=RiV*l\X>#/hBgFM(s]"(r.%*0HdX:8DK[rS'+o9,F-2ZrJ$X#S@kL1m1%pJR&O%*d2pYSm!WH
%4UjLYi5`GXD?n)N;2L2>Z^(`kEnPhR>t,SMeY=EQRN<a&R&d3ETfYcZ8(E;;hKqpOSA0T3A3*5i1Jg`W2,Dc>&s+gEan`IMQ'<._
%c5St(*DbtJ0pnIh,#=3c%YphN8;S]V)=CbTIP63D?cVghe'4MtC0&T3'ML>D3C\BjIQIQ$oj$/SK1Eto-Pqc0S@:*hZ#cMtL(WW:
%GH7V34A(6gkg<Zi,04ru'?\Vd]YXL*=o\)PJRR,-4@"f\L5o'S3L@C=RCGkbjlVCbR'>lAl?W:l!AX:`DfEuCp4cM]r:U<V1f7+=
%gmp=Smbi?&2`g?RSK:k<([&rD8U\43*mo7"GZ#XWp:D1.3.DXRAOtS=j-'\!`ZAG?gHabGh$V0b,'%^Sodb@Og(H*>2k@e[_W97B
%Ao2CmAS#cHU8lDCPWHt>ZA!9)!E[oRB1VD&@a;8qfYa)s,T!H1MYV^XeQ0]9V3B'o-^.k`[*urX9*ai-VMRK_,CZt"$MV(TUrlO<
%%Rr$i%>S,n_Is`Glgklp3+mm8Qk>+IS^s?<KRh0Qrtml8iSh=`997&-']%aIl19qgOYJt'*duW2`unF&PMV+5B3]?3EVfKU=W_M@
%/ah=16.c`%\hMc8M$\%DO4%(l.LiDr(jXVVKV7=b2dfH,lu&pg)u8/,G)tN%!/j#]r<dND1?n1)?'U>fJUfa?2/"n\MdM?.__4Vb
%M=YS-J*fB&gTQ)hkf*3h?BqaA&LfA\=;qZDaO>[qs&fg9U?P+Yo4<!s*U^e-c4_7T#TQJW]ht0XB?Y.1C_Qm4ODnIAf!p'SI*kJg
%!#62_(,"Yc$_XaRC3bZ@]WqJ*][0CngAs?^gY9_W5nW9a#@LulY]pRYj0`:\f-[2a:[PWDhQSp&,!FJf_]!"U-7bI6;cFdFmK>U=
%-&-Rj*Gs>BY9u.]r1*9N.MMhG3iO,%8(:#G)Ha)n6d+CZpUgB4XZtn8eOkL:VZmZ,'+A=L[HRrEg?I/a'LhE?#$q5bms)&@3#_F5
%pg@K]f5+j2CVr'LCl6@0al.M18"^3(UV1,&rCQBeG_gQPl=Wq4U^EK7BA>_c8?l/kpo<U;S3oe_M#]bH!opJ1qbL'&?@!L6ZF[\n
%pt!!!IN44kW7K6)Zc&PAj8Mo$`TMdr*\s$PA!O$leNN'd`d[A],PVch"jK!Lj&2J/L81;ln`U7[LYmiVoQg9=l5W+,LKJfF82]gs
%i(scp(]iSb$eAQt!Nj4<IF94/(GhG4@q0.6g?q_HNnAUm<g$Aq/F:/N)dEfP+:"agJ9N.F$V4.ZX2aksfCNj<$Xe)`.#62c_]>Be
%!)Nj3B707/UXh4,j+;>ZKgCsp+bZ]]8uLWt$l@0H%,^j)8)s%+-),[1dOcKhTAc:;JTKF-a>IOtSa0RR5sqPGM(]F7Yhj+e_?D'N
%^Vk2i_C#&sJ.ll.?QjMDKm8!p%,T;d5X</KrOXp#*'`0^@%,k#V;,;[!(b)e<GW\G*,Q4urBX"=>aDTd?oqkL(Ss?d,JbdWN/D,G
%P)+H3gk^8['RVne#lY[5Q&NlW`E'MDq0P\6?"c]X1@+o?Mn&D=b)S)!:B;<Ejad,/VnB@)qJA7NC<gBnjS*_krqU/%L"g7:`-_l6
%R:MIF&1jA\+mA+,r=X-''^97DkB"I?Ps1P"Ya<R8q*Us_[L4Ro^Xl7Fq]B=5bM0O,86&[<q5-Rq=Joj!0"A^a%ca[V*7!cn2Z(me
%D/?Z3epQ$QGBT<j\6h$&T3qV;qqg*)2stkHh-&@]T.`*(`fH,iQM6/9eiQt$/DOq3]Cj:lp@[HGHZaVqoqMafc,8Y&O#NZ5N)+V%
%B2q+ff;(-&Kp]6^[J0-GT3(H0Y2<EnGNX4V13oU[i%Za+2m/,"W:akGs7+9lQ$]C;g$7IEYg]c,DsX*Bf#I,2n3GUn>[)C?+&1MI
%4uLU^`B0'SdDc=%q!#W^#PRFSVepm3g\`t>nJ31ph@o50F(bC'ja6F?b7>[6>HRakZ_(DB\,9t%hI5Trb4;?WFLutag.>r9dI&&<
%L>^VX$?XeSqt/Gs#:kFNbBqKdC$WRJQPG=(^#%V.)rF`b4hU<N-\=c_>+bORO5RM5hqMqYCKHs_rnGbYc,H_N?GsJDmKl!&s0cln
%B6>SK\^3Ak?gccd>gq;C2kSq%H@)K2j)q9M41Y%Bc2,tC]/r+16i='9HZa8eJ0-A^;V-p*5CZu,IpV#L%^%t-YrKJrnYEFpH2TgB
%i9&2<o`GYaZ$5)Q>%nChDB.KHs7G`B48O3:n(c?%:H-9TC\%2XZ:n3b[+?[D!-7Kscb7k<GIcU7l2m.1e,'N2GC%MbHZ?uNpgrL>
%8o*hNe[MT'ndGm>[+@LoWt/HNo_J3o2nL/teb7Nh2"-(U2;$=ZHg</Ujb%ts?OdZI&"884m:%3b2nL"qI_,B_^!s`>]lW</q_::S
%@`N,MKndBQ`:cuBLAn^]TQ;daG44h`'-?&BZhfr";no7gT\t%Rp4EUNG?"Iurr"Oug\^a5mXBNVRBW)[%.cW#B(7T0Wk"^en>TNA
%>e'e@8+d:uAQP>f0*H1>@LnHHDnkZr[bBVV\+c2[Hsc8aDuACtgTOuH0<W!8h0@dk^1ctPp:meYs0R_rKU_+jXY1+0pNH<0l5+aC
%:"-aj4R]Yl^&?CEJ$VdlpPuEDG?T@&,f&oc=6EoWNf")<c0n.u)UC?[4mB=lmQP(C6s)5Q+:1`&lS!0@I+/&>>C'\*GNJ8DoV]^[
%qXik@k%9-JJj`#H]CD.GeL#7^o+p3_?[]\9D-q_)pTQ51+'1;H_7d&H3c1OP>BasD8,;=NHrY`%7W(TuPL%.!aU,ciG>e^rqSo;M
%QZYlAF78hmh63B']dNK-\@;-;h>I*?4^L\p,51(thWl^t5JGf3YceO<Df=,e"hasZr%]I)ZamZ*KXq6?F`\W^GP,Q`s'U!/md@`:
%eSt!-gK?YOGW^4LRJ`sQX,D21o6G#k%sq)Un<h5He(rb$C`_[)k/K'0o@?Q%9B.)liq@nJ<g?LBbgY&%1O[Z]q-n<Pe'?gNgCG?R
%`<lpjemMiHH_&]1k*gJ`q&>J[FntgW*I;IIl0IlAk-sUC;0+F=1MU_H]_`T/G]Gl?E4gL0oLsD10=h[R=*k02i+nsf2sp!lK-33n
%[eFZ%[]nW9!K4nH2t%eXM%3=+nnCa@<qc!s6[A^>]kn892I9bFR8h44DnOg#0_!s(Mt]cR'm]m&;[aMFMgN^dL#[XFhBTR-'(t^#
%h<L<B!kP3R\u"%C=^AQ;rGA6RApTT4(T)'l(>.A(28F^TI<TP6#P*6)C=\UsK+EsdYNr=;RlA'agj@hV_iV'?5TX`HDp%f%?Q,C]
%>GgV\_'md*j_/5<Z[A<@<bBjX?g^()hASHLUjH+C:Htq:-OWGFn7/pVT#f^ls0hpMr>^95pAipY/*/\"hkY2KA'.0NiL<UYp07'V
%hr(u5q$[1"pj.;h:W0R[G@94D=7FtR2@g+HO2GJU!c_1b,'qI1HZkFto$]PK%sQc:3P6\D*R+YDTZ?OsBhDX]c/p@^L"U-HoGIN&
%/<nSWB:lbT00n\IeQ[\k5!1BEI=:ti*fPFD&:T"?PbC[p?hh8H!I=-F#m^sfpG\\_=["bOi8S7HfU@lY5DkC;9GEOb<useT_,A2G
%%hBk_.M1QY`Lfg\6pCD0du-2$2jZf<m=BbF;hj/OT1BoSRkr.G*85XeAYZoAJmM3iM`U&VoAIUB-"',sP]i%=kJEJiUpTFf_ZFMX
%)i$)##GsM]b:.E]Dtq5&b#<:DId4NMbVo^JWi0LuiKQGGJ2**r!b^NEO:TL09$d>LE.\8l.(CoU)M7fIhHYoc')%5:0gG*8r`@$/
%BF,ViTFju[dr3t'nMf/7DM7b1j($Ud][bY\o46KV\^B.55@@9PogdjUK(e!Wk^7gTbAudgXZEI>dG&"$d/mGJ)=3dbiQBoUYP29"
%cX0Ynac\YD*`&6u#$=nb?^<7)Xn@n4B8q6Ik%M2_QH_P<W,/otJ)=QShtfCo)<$m!PAbu3iZ3!XhVYBtCiOUZc&IEhHZu^a#p)IV
%D!!J?me_u=,?n;sh1!!j]\7W$bN?%Wg\kg+0->,8gfnkb[F]>(bpr]8pn$]^(2BCVkS_q+gtluDDQRg'G2ln9FZNlI?9-q,XF8at
%hKZ;KoAb5ShV;`;q"B?@GMbljPFSak147V_)tL0dWSoQf<qTg/;T!!VXD6Hon0R/UO6uB)d9H*#edjjC')][BRk#XPf7c;rg&nQ]
%HRlYP%iSZPHa<]P0bkV9cSo[HF)U_]4o&FWo6mgc3aOe2F0@h$SrfrNEjE7*J+3R7GP-<@2m1\,+3o'X0BGj@rMBramIdm)?nYj?
%nL0$i]t\g`+]HKUrI*1?o(Lnc^dbfJ(Qa9i"?_'L5"-01+eNT>G$;LJ^C]c;)D/(epUo<r[!RYU?NlB"8Di92/GPlW,`k/bq&H6-
%5&(SoreJ@M-isFmlY:EJAmR047shB;Ui5"7M]Z9(Roe2_j,g)cD">Jupoq?qG<UZ)kWW$Sn(rAA"2scud6NN\7rk/RfQmD&j]:e5
%q;nMEa$1SL8L1O!^;4ld[*;+Qhgj/CO4DD=.lfE.SY)64gg<$<^#n@Wl[.ELB\j9bj2^`967]6#Pb"*0pu&P_Iera]c#QlJ]_`G7
%+nX@(?J\in!JZeFJA.)6O.5:-.HI&OPN3@+We1l]n@=\=IBo5$[`nJl^Cd"2X]mrnrqND'!:]jP]A(L6Y';dXmH-P0c[I^*m1O!U
%`a[Hp_lKnlO&qX`p\XNX13rgioC2!]E!ft=R497A2\4I;.n'[l_Vc-.G43SsB?``G.9la$+)ZUZD8'hET+;j@4,;^s'1VP2j1Nk:
%]XN3^ds/D-o)@%["X\G))qT_DI^e/ZT6fbdX,d^[=]89R;VGirBui7jE,p*09="*J78esJ[#6q)+*9u!QXSqF8q;mC*FA%4+2#7A
%C2L11d.1'"a^B9aN&$VXDQ2<-*IMN$a4mM!:X<7)#5n&V<Z(Dcq[nT*p91QFJ%3sc\@ch0nCu"\*"i6\fE1d!s/!D1^QL<Bn#qd"
%@dV(.HRTB1]"HnUY/_s21BGhU])DF'8&I5X$9tK0+)a!E>0f.^oiJb`/'H6Kqh5A-W/ouBf,qbRf5R@*5HN]Z4[!N?97pH&AJ68B
%jMX8)DG_Y[8YA0#ILVM0P\dHUZoQ!ZNrIa]nmljOp%>P'^rEV)gM8m[?UEM5%/)u3rghX>6"^cLp4].:k2#(lX4p9V++Clk_df")
%mGI<7DJrh\?8ZXl_0k`Vf72ZDI(=S%<ThP``Y@Ifg[gcHJ*dedR/_iUVoLLKC=XB7Qab)t6/7RP_tqL3>?DarjsQ.T\(Z2R`T>tH
%bYsk)^[eIIo9U7l0WO2OlI`Ups2hV'p?ke,Vg(&bE+&dS`c[6?"$>BrQ+e1B9*`/V?fN->;D6ttd1p'8h9RV/S+81&-@L#ZnOhW_
%DQY`)*KT<q`fhe5N`rdHQgUkP6O'%33aWAJ.:7I)s1#Z3n9WZ7Z?Be8IrXj[B4\B_nVtO'_WE[,[JE,dC]cmSYJMKPa*2,%,b/a'
%*NZp,Heh(`+.(6l0\,P\TA3.?CQ7]NVmWQ#)R/]-c0jl[NdBN+H2$^6P(=SaR4kr!-SI09bLRb@Hh?i$A,,81[i2s>WQ5htg8j\F
%j9HbG"(:<ce&JGjQ1&:j4KNB+m+RG'%JTC1CM!>/pV)!TFg&(#(nDj5PoY<lAiK,S`piN#mq<*alg.;;,kKs.eR;c(+&,Q-o4*JR
%*j3bc&ps:!=@@(W`K#Crf6hj\K^U<o*8]@@B%DA>ma8qiQ$X%%T/Bq.4h8&5I3Z(2%=&&%iT::9@j=PlK]_<qSQ=e"55\O\dV6I@
%WocKWEbAsj\Fg]+kO-/;H^qXuFI#apj[8ni=;fdJ54Nl::gaYVoTQE.5rO-'A#Moro&O`X)c.BT-EFUoftF]Q%R1_i^GJ0Y]_Qh6
%Xmk^Z3[T0Xrr,i1cR=tL[@JOHJ=E\:!0LogYrVd0Dspt]4Rh&!mTV`o\_I#Zia<8D=B&pK)!fu6\ok^8C?E"PL3j+/?Xpb&rVBrr
%N7FJaPP5"+O2$3`ZEU[H@rL4>L^3691N[uQpKHskf:Td+#D2X=,*;MR8&RlZ4iq.5(AmSWRpJ2FT'aA:+&0T:I.t%^IUB/+cd0'b
%[J.+aojZd)O5""_Ool&;@<k!USUi"_ne'pXbldi#D`f-/*9YYR0C+.Si@?TK=19)#J$iWpb&;):_/BS#mQs0F4`'?HX`iaTn7d5l
%Hgf/V\W;;=Ag)X6\ja8:h0HWlB:2Ifm_#H*1mg3\hT\t9p8?3bl\L<sHi;*Y39r<Pqig2Ucgfr$=`%[[pGP&?:EJUDfBO?A/Q7/;
%bukHo'?lrL@WeUG^=VZ-J*:<8:[7'5Y/MoHC%*]..jg2A[5G=KQC<GLn)!6")D>F28%o"6WVNp&#4ohH=:B+t%\?-Lc[=X&gcjT\
%Zj3lceGW^[[+A3W,.mm35$39*c1q*G8h6l]R/G6Y@r(DagCgATHZI0mDs3VG3^JN6k[il17d%tel<[ma(!EcD)gVohlc63uouG*<
%p>;@;/<I!Y6NEDI)5PX"_p7GmZ[?nBZ#R3P?lpBW^4Uj9U$m90Ts=FglDk.2N5498kDn:`IZt[O(d>O^maYqk9eL=2HN*iEIYS'^
%8I#%8C`gr55iQ?cR/n`R&=@7Z.Vasbq"i*PO$"8a%\>.pJYHKaVah,De/Zt>#L.2E?ECNcG$e#!lO+(@PQGVNDmn6.S]7<qP]LV_
%H@>0QI.[7AR?qHa5PoV+AVD^D[UC\VOr*,%I!'YphEu>hE:[Y=e(QgFAO3tX1(=F@I3Tb]L>=ELmd=mC5Pr*AdeW`B*J(d$:g\g5
%.E9;f\0_\MTF\:-;Z$6hSN`IumsH#&Q`?*T)Jr8f\`M/H2p#$h,r0miW'QT6DSt8>1!8V4-VFpKBJSZ`KNDC6iOqa6+[H!FGB_oq
%aKkVQeFi6<lS0%%:B8blT2tBne=V;:merAFX:(0g!*m.r4*\4,#)GRhQ`_L!Eo5U>1@N"gBW-@KrRQ:AVq!qHhs)l^/3ghM56-%:
%:C_i<<Cok1nas)L>k$adg\Q5=N,BUhe7\=%IMWYSeQ^p3l6VQDe;NY%ml+9k/a0gdg\/AWF9lD>>q*bmGf]IqT2lc1"$J,OrP["1
%rUopNm-^)LrorKoCk:EM)sFSU"P*.fe`L<;`jaLm4595e9K?RafQ_OM*7?Slo7CcPA?0e;k+d&Sl&4ChBm4pIfC,$@\,EK($@(XJ
%j%!<\DEUR":4i+":uTI()m9I@AbR+!-3d?S?>jCrYUHt%^%Ya7)m;^M?ZA8W9]4W8':oC+KV1ohk0&HmB47ohcb=k5]*)C6qG&p?
%C;K)u>f@!;6OMT(G^(6?jT0$jgKb]*?9W4UqGqO[N;(X?I;:*:o=j&N&)PX)gcd`3^23^`Rq=F_c>=Tj#)@URN"+DUpMR)#SGWLJ
%7WWkW6P`1'&pX6B.d59WD`iMilRaIKoRVa79P5E6B)+dm9lk]W0l$&,Pf^%pkjt"g:4&HSicF;8?Ffsoq%Up;cF[48i.6:_p?0oM
%%=$*lCRrM,r:@>H/:sN7?S>pmql"^.mq!XhX,kQBg=&)N\gdW8D&@^fIC$4&G<;l)e`.i;F77CGHb6VgF_/D&m;Mqi9EEjTnX!^9
%TN5t'EMC)=D>g/Ekj^:o-J=DDo2Hhkf$Wd<a`^A,Y3aZ]gN>[FN^!Jj`+HoN\#nfK:A<Jp5C\1EVV(dOpiPcba6so"`9V#E7diC?
%:Ufc-EaCB8f"[dVc0sQ(-8YT$IcR<#=.e?p_=2>k"84i@=o&'dk*uDBi5]p]:Z5$\p_s$5Rn>C*"UsR'G3#W2jcXQ$2'U>o_^[bn
%*]I;VW]\85!__cI>^P9)Xca_Gn++`:iHF??RlfG(Q?B$E).+AB0*JA!LV"`,o\AG;r%34j3PKnJ^I8=t:?Qk&T#Fb=s7!r$CR9;"
%70%'2#+IbLSNM&d%<`s*f?1sC9h20p@*65HI7pg:I\)soNo5iT:V@X;m\fR/IUmi4'YXuHe9j`8dCU;U[X\3`JVMbF<o_2]&j0S1
%o?'M:?>J/YCHVM&%VJr\?XWftF<_INq$#X[FQukc`LGiK]^k:WYHQD-2tbrD='JYXWOh++,%@Tmpr5UrXi#?-i]I$BT%/P?WDV3"
%PD0um?0<7J1OSLqT$ppDN"i.LDq?RbCf!Xal^>-f4%r\1=Yt=NOk5<FV&3E\\W7b6Nc30)r=(?$h3uQ[HA5G*DC)IS</6(m$=2<e
%[-Dt7_p77bWE&-pBQe%nG\55t0M^3*bZGi8n^To@GACXI#%(U?Xn_<PS)Z9*#<7(L075SoCfP52n?j.J-qV:Z7U+N82Rjd.9\nh@
%IP$2k$==%>=Iqok$K'0?/&QK>A%]]\3gQYoc?TEKloMKiY+BFj/'EZJ'AbZNg>Zg=iKs'4g[AdlAlU&-s$r:QO!am4RQO;BoIPT6
%HJ26\Bj's_?T_'.I@:I<ZT2E4VaQtg/npX@WY951G8>11B+_$m853-@e".m]JN+DpG'I47B<)EQjlMNH(*,$$RJ(d'eWe'c($(jB
%ODen*&^hlaS](QIf:SA:fqL43WdB+l)PG+.$gMb]M(`rN_\a9G]skBMdkr6q2d,>u$=Rj.?l=?e4LSu290pFM<h,\!!8FSjj>>l#
%N*aLSE6kb%fY5PGm.c09Xb\<E=nfJ(f`_q^@[?]p0iPsn6GLU"7KDBWY?]XI:)"d2$r:b'^4/ln*FM]0.oN0R[*t73LK;`SCuFPa
%_Lm)V+B=Eiq1B0FfCKtmdi`g9A$Z.:+Vi-)j'a"p,IjPc:!\N>j>Fjgan?(5&7QbFkSqTQq#9?LfHG:tg"ZU4jB7'Ob>[jq&0Vo'
%A?;$#;0iuN"G"UI8>G]6Jq18QT"nmIOV'3+o-UWX=V:Fg!2^$C#VZsObR4hd+Tm+o;7%$uDsT*<-WO7j/DZpb.;fBYX,MNP($2_T
%Y9U&Ub-H<2Rl+W"7#K^ZJJ9[I))(GXLPaJFX%f^!2Qt[-@eNskC_/dKSbsE[LHNh_\fO+Q!0UXn?HquQ_Kk91LBi(NC-cNH'H05u
%YWh/SBN;.<E">]SE=3]a5h]kdTaoe4*BIlZ>QAujS-TO-R8JORF`&C!)Ne*)"4r'P-S?g.G.;lsL,cLubV9Ub^$YD^8=;8r_XJS:
%3^R2K;3WJ&Bce0F#65"K;jijN-3/I'p<sR`0e$o*-p%hD*LID&<c1n?Z,?ggd%Ts*jTlejQZTkB=K?LgBSDif.$<Ln;7_<%Q"UW6
%AV@>,pO':55Y*#M&WAMWBsh>\#Us$2![r$iK*GUX0JRN9VIaFr?]!+!W=)A#K/4I1E@W0dl*q;OVhp<44rKbm"FMJUN@<V'CViOu
%5*]P-9r9/BI%JsP_iTFslSZ@eRL"66`uf,Fl$,c][K!TmFMg-pg^=/jqE`mOW\";jL>9Qb#,ig22NW!jL`M5O83dYg#rIVe&ar(3
%0K]CD8HWZZBJot*:,HgD:83'M%`@ER!Z;[dnL/?/XITo@FksBg`qR]t-89o?W7R+NM@O%/W7Oj,OtaibTTt=CO9?gC!-p'?<1jK#
%J;C'bYV<jNEi;:$2ma_.3`]o6`/\6&+dlr@X7;Uf8>?Gi+@boeS#8Q$O^:CjL!1EZ,ei<i7(n?'Mg5Jb)_a'qJsR]1=r?\7$P:4B
%i_lf^3fVcWaEV>a]*jc&!0\(q_TWM*AKmm_+UP`Q"'&s=a:\J-j%8:IF<G0qA-iAmX$V3]\n1pe)bO^G7##,k!c[=N$$U[CCgbfA
%\sNK5'!=Z4OV)fJ(/]1#8W8A5o<<`n=+D,.$@O*fT?ALlWC*KlQ"\b]BXq.+o3/Kaaim&u?_Z=2+@'s'1N;;."ht8hlVIVOd,@iE
%j/O(+*#ai$,"kUDdB565&$Xjm+c@c!&TkP/"<k-h!tMX[GbIu-_CW28JCB0=_ZCTW'tV>7aoGZa92kIV1q@pC-or*6*\E'VXU]`F
%851T*--<3p%/^@1+YUnF,dIpN-dWNC_Qma40Tjr_g3aIWW&K\o',)`)*nk^+dAeSDEJIH.Ib1NkAWU&\e0u=>JN+7-&e'h36KC1c
%d.`rb0Et[B`=3*0i$MSWR$1Bt#jl`d60<D!YcaNHZl>AlRV3d)N6E0Z(@2LP;[ZQ$5-tBuD$2.%mh*Pn]?bU&^+V$n%,FT!q2LAU
%O7H=+=q,?s;Samis"i@<\UmKmMkk6eMV?<"G]`:;\Nbl^#nUt/!Rr8MiB`("Z[sT^#X"<%]>,a@_1;Y^bG=#8kWP4[Y^HWNO89<U
%%n0@tZj8p\FXR"kP*d@J#)s@`f9U8,DM8fq:.!3qna+oe[#HQ\T]KlSLWG1.Lj$H)N4]E:M1Xi9L*@@3D,bKjER($TC@P%g'aL3P
%[f`3B>]bA63j>!n!Z[2.jY7#,(MPi6(hE2-dh[`eC,hGcjJ-9'rc2$dLhYRW7T<du`'DNXq3r@K%ecOi!gu2n(fnPY;9_AP>gshI
%#`=`k-=nT*j9h:/OeI<p!di3_XoRssm>0].R_]A-";>,i<+J0D&0;]$9eWI&M:+I1pPK6l\O^%Y9e)eNp6:E>1+r`@#nqr!7#Qrh
%ILq-SiU\>,Wu\`EUoR%]EiW+0>.#ekT1.(5U>7poe8piZjekaNJ3b0EKb!V5)&OLoN+A)>YQa]c_`&HeYR(WY.rGD.!=hL@m(e1=
%&O[`Ma>M*qHn$#$i*h8BQV91Xirj_iJ3i;<YJ=2#T-f^<YVSqbbQ&NjTZBgTar,FWlju.8dIGFG8mm'Z--==?@"s]0(T*;,?l7S4
%HTnoion3lZOAoQUjE!RGUYUG)X^N-dB`XGgdB<5$2h6':!%'6GB<KS%BK)V")JPl\m@LsE+@%f_83[B@NS*3AZpE"h<rp0gfI2B+
%2)]>;deYNYV$n5*5T"02H5AVqB3uCt?>'%qkYc](67[H"#=sFHNY$AMmkErSij'.XXNk@L!Q,Q&j#.!DAuK-KD*@sGf58m#Qh9'?
%V!8MEL)kd5K;B3s8&,UIPtrEG#U@3M33^RHati2-Vdl?QHsrN/cmjlp0V/MFNt)c52(D#*5[C,L)T3,Q-3al13>h6V,\t^,!dM9i
%e1,EY0!ta3G]oY@F_`E-arR^%RN2KLcK%D!aaXcr8hbGYR2O[-e>f7HXt`VqF*e$N.2L^%_ViZ]G*'\b!"]jp0c56<.ETC2O0N3S
%ml<Wt?dU$%49t[Jk(E(3[O&A79uh#SAoSgV6[3/c,QrK<U^usX*(0rCJ[K#@mO>>\m"a:HW[lea1eram/Hlif<TcDt-rj^g!gefN
%'dd,:%,;C\Q#qgKBZR$k$T,At4LSU0d##@8lLm$d-V=tj@^*mQBQ\mc"Sr^%&L/S_'hL,MVVIQnTb?<FRAX'qq!cqcBPa4:'R'H_
%22@K\B'U:0#67VP#f&AQ_T%D@,qII&;4Rt$$"$Xi$a%2^2JrO+YJM%hHK'2OS9"j]4J*Dj/N[Gd6\6TH0N<oi,2Wu4bsj+<#d)T4
%_a3!gcGZ]!7`U89lEthmP%:@B#OE5O!*GUV&q^\`SmiNhV\f^P[7N&\lCA0rWg6!j/7NK6]F#2cd21dPG,Sdd6D_JgZCt!<p.Q'Y
%8GWa&ZoW;45!a*3G3"%H@MG3%:AY$"QZ5hh4*7L?qS>JeU!\EE*@2bqg`.&_%SOO=6#P))j&$/C?tVj-$pbS\,=X'_$VLn28)=:0
%e3k@tGb't*T>26u!8*"sAqUK0q<('55N9N,aVRC9cqMo5(k35]S72jF47]=p^lJ[q9SR`2&2\X;c"E"R*Ds/FTeN"0Lph=4PdqW"
%"=A-iq$:Q(a3ud,J>)<3K5Ai$Ho+;&g"Sqn$!Iea^g%4k'OEgChhhu:6WZJ[rYmSQ&KLh6iD>Vtk1SM0i-m">X$Th3nHC$^n,sqn
%@SDFM"\^@ZikZ[m>X$e-b:BK<!J;R4]\`uaY]cBt:IG()]r%MH5snBAA:CK@'IiU_S4b!2XCNnR>/M[=;JR>jJuFp0.^=]uEB*/m
%)'G.+iHu\@BB]M/:`IkU^c+'[Nbj7h,DQU:f(.&-Jh;As&a8&4[%V,YTaGU<'0%q[/k]<3O_!s#=6g\5;j*/gR9m1d,p>.d?BDf>
%#KcJgg;V\P&u=ZT!'u2hN#htAW7\7A,%&S6U/pN9<gR"=Z,I[sr?^/LpbX-TKlQ`-HS[L[3CG=cA<g.L7a@G$cj9t>1ME;TS_4\W
%KFX(d.RFVt/."SPA20!%F:;gk[ZS$"83td$d0%6/"gk8ZRQN+eVjnb]m,2+fZ@"VVKYluAp<eDr?:JC%VBgQ,_)_afn=1n(RC;HS
%iJZpQ%*Pp'q>`(+6([lpS5F2AJPj'5*,Cae;rm=b48;!BY]`:kks0pYLci'05WoBF@C*hfEh8[.J8[,"YRq14YUZM(=iML1Sr$Xo
%U=If%FD2+.*Yl^MUlDI7%]n['=k$AdU`s,Ji!9b9)2:8Hc`s#FYQT-2&]h1:bPUHF<Qp-5iu5lnNr15g$W+9`1FW;T.R]]f!:`:K
%i_i*?L4M-Cp'<-#"8K)M_[\LnK9!;%dSW)^Gi/Y?-Urf2NZN`.'X@lV#&W%K79:?o3]iIf^sj[;Tm.5bEp1Rqa.+pt_n:6^_6ugf
%B>TZqhmd^BYn*rdpX.F06Wk4p;:5mtmPDc..ko_p+U-lL;9B,6kEPHJpH^J50.N38JOp=A#u(J-4-4;WE-+'0Ns5@A/b<[OJftXi
%Peha="7qEb*.EP#V%tj0I+3(hZa(-I=Z@9FGVL(F0I7P%6jl+hAg3#]9Oq:_-T$T)%#3k\KT!;p`a2?)7o#1k+;lARf%Yd(EmNoQ
%)4I2;'g1GsN/FnZ_^@KJ+<lZ5>g%dZ&=68'AZ-4KluNX<&W2U%!mgJ3eJf7f$A3+kXCQ"A&ClB+O0X(ADS(mMX#[kT>M\(8T+uZ\
%#!7<kC;\Lb`DhIBK6L2ZJdl4$li9tS[?s>AS'[$FQ]MV6)cI;e%n]qApL"$a+XBiraM*1$mdh:_(6Ugb%)NkletQZM!f^n^-UC[`
%2Np2@;TSgCTd(6!6t==nN>[\,MJ,=fL(=oYP[n*&:jL&CM5LBB.Z%HM[VeR.)&YD0K`_b5KU+dH3A?uND*We@T3rp%$:?rC<Le5_
%O]TNYQ.!KWT`D,jH*m9fO@pAFeA?U[GR3O9m"O%?G^s$6,2^b0n^.Xi2<82J-uq*_G<e2))jN'5)kK05Ho]5#H8\Z<#d9FkdPgl*
%)(^GP'csQjkZqYQd;0A)kh!l1''rF]7N.rH)M'l39M5T=(P6UqL#>0<5,e_^dsNbYSo'LM)FCMpInZg)$Nnnq;4L[#Uk`mhB&\qA
%%7UMuZ'!U,?T;[Z<dDnb1`5A1_#YtlrAklRm\H+&bbm-",%]P\Rn$mN0Xj0`0/u@2f[4)Vai%4#P&RBfZ!S,)Jencc)<f8<SV/U(
%"L\X\(`C2/eESm2GL/$4H\WqL'[<BfigpS@/du3E@TG`*#bF0!o*S7?_`.`g7-=RKHo6]K;LEe"0[U,h?&iA!=Q^[$ZPXL%!F@DA
%b]D:E*7@3Y=O1skCsA\qMI=OcV2@;^4@Bab3i'9:Ml9'tMru<g>_u)S(]p)q&R\X0$_-+U@^76VaD1WH_s&0B(KjjL7YXj[>RYUD
%[%4K?!^L5:>U1).l^>14-^ipj^5PX.7#d)NO-(=<L1!<>l>VT)Q-<.,TA,gh@eNq=r<:=RBubtaJ\odDPX#N\oTX?.K!a,B/Q$Bh
%0qk!83K=onY7d&8GSAG470p(oX<Y;J)C5^1_$/tC0[jO;<Q5/1EQ:3$d&K]R+>\st4'N`.d-8fW%9%n\b!N-9WN`T['r(rbDYa'm
%,`5-LmRXi2#7</Io<AU")(9_GJ0Ji:Rh*AnXs6Du+TpEeEFKK:.%U.m#'T&AP6AHapQGn'I5-I=ZoX`mA/MY4O_TTZ1!D4DbVmHN
%jk1eFb*G>JMKkd")Mf("_]E>ZON#-:Gk@bO4>l*-PX]FhZPZ#ag;^*`HrHeKF-C"2j8BMTOM";>^59!>ME(+jipfmkN]YBC(!\rR
%>*M0)%u1)j2\,MJbLql;Qt#,U`2-.")E[G93N+&o0JVqlgCS<K7aa>-<u@"S3LYup'bhWa[l<iC!:l$UYk<+g+fHOM!1SdS!N7$l
%[):oe+ZPVh)j!Hh(_tY]1lQd[jHor<S[:,#Jn[>5]jYf3MX=$`Bc&!f1G;mod4QO`d).Ir0S.HBIRC-nHOjL:Gta,6`-*=\"9>;O
%H"O9#O,tT26.KPSq*;\[_-uVJi(:K_&jn#lOYVqW\TiOTi2'/hEm)h8NK9?b%uR#;_is-!'LE#nAf(OT&.fhEV@51pA#kc,+i7u$
%@L=H'4NGapG:T&4D*rtpk-Dc9\MOI>JmP=$=:&p9@Kp]TfYf-/ZNlMd6MYsr.[oh]&7sOVfS0DWVkWOtF$/#_3@,M32h4!\fTD(_
%cn[")C6bVrRp)(-1rCkrrX/=QLQNapR0$@18+i`6F$1$SR]Z\,W\AS<EoO";e8640fil<W!:6H]!:<DB8Fml958&Wi:2I;O*ddts
%X+dpt$roALj+P7-NBCkhGeUU"Gn7Q:6?qW)<'FDW-<PTFiSfKNQ;pc(84k5#&n4A&oC2j;'8]\PBM>[PK?(jcahW6'CDR*g\3VZ'
%:.)7ch2k9]AT':0_+'V1&%dOS*MB!f3>GEun^<&0=_Q?Unk#L=d9Xa%lgb=/&1aV3ZFo@R2meY0$5$-a`];k>26CuSKAu5LB[q?W
%.S)b7jq?B6YnK)ol%Y"QT[XM75`%LJH%]bs9k7dkQfr6f\e$UWJK5nL)qg2R/.8t,cAV*TB,JjFiI=>/iFs(n.W@F+`dWP`_t7#r
%^t=3PeNph+I7=\b@15nea@A8J36XL]Z22OIRSt+jp3Os[hhd9p`Yq>k5l&H"7r/E?P(OjL,VpH$M7F"q,bQh)0V%b1.lL!7h(.gt
%WPk7.F+pt<`4V6N7o4`"<%pHh:p4@s:XDC2^b@k3(6cI;jA@t-@/!u[KG5p$2P_H;PLH%5aqka<,tKHr[+mVGiYSRP4D\KD[s2OE
%-8(KAEh%-8J]+;[:(/]l1;5G@RTfeD2@j5mE0?GF_DiJjgq^abE%rL]PY!tJ;k_a149f2P&nRBM3:<5D11W"1/7E$d<R)DC1a`Lh
%&J]]/7J9\?6(k_Q2#D8[S-DJ(nGK@'8]=(qTf^t%=$@mk3kPktP2+?%licpN;;H-6m7;?Beh/oDEuL$7`S@fpq+EO``caB/B(/E+
%1iRsg?-YHJGQl%i8:[h[q6f'gi*V7/anJkN$[KBQTs]VD11DtR(?AO"Nt,SoiXZu+'L8!gc6>LV8s`'Wj<>0:3Z9DZPP(11D+3g<
%Cn6aB,=G5CPAJ='PnXiE0deb(5EJk_6BT'0##F#4P$+b%JTt(c3-PPf]FLp+#+Z?/Rg[(Nc%^F1RD7,Q[OT+\pfiI_Y>c8h.37u?
%4Wdf0h`)JL8:rtH$i:8rXoe5AT"ZT<+Uc?]BGqa-JLp'*",W(4"RV/158d[Z8kF.B#4jT^9_*H;5R.rJ>`_Su?D'cipf8&7YjdA(
%<oaK.)uH"2U?Kn*:lu1]edT\[::EQ_:u^ki(g]C$GrfR5QfpTZ8JmN]1".OVrIte)%%3a!q[Em/LIcFLmPj@6$r^3[>E3pBWRW[s
%<pkE88+&]GU3-,K3`'S&Qn?@&^Yq+n6Ls,20O993G4%e-bheB&ZZ>dZ6fqciqU1(-M=]YJIZqaT)W1Lj<nJ?]*D1OjTd,Jn8<pgE
%e6uoZQAg%&iL-!kL;hTsn$uh=jYsreblY2$"9DIOT%%R7G'6W@?B(i<;UqD6]ZiPZ8q?Xc"P67Ia9h@aEXXp5+V0)6@DmDES0/@-
%n'i@ufIS@rj_6\0$:-H-MoipYEbYb`OGAOc46-fpm:'C-\jObfMHJjWjRg5m(9+]`-qrrr<u$7o'2G&jFG(p;<K+od*HJ%(>X\M1
%460)`+X=LEL\u7LM:5;6@Bjp0r,c_a6Tu;L)h02?r0`uj0S5'j[OCMSc3pVhZU'n[D[.8.]FGmuT7#C_psQ]npbVKMB:3&IdKCg5
%]RAmRL?"E*Z8#"9YGbAMBV1Y6D.?Q\kg8jgDnH.d&_h04*M+n-PL'tJ#GJY4:L#I'W[lsPB<l'-?<fQ>TErL[iH.M:/dts6-H92b
%PB6jB,pl@7V=&l7E)UDS\-BYZ42=BZRIYGb"C''$+tYF7'-O(`0mh\'GsKK/3p,Srj`P%B/7t0fMsf*[X\AYFpYl:P*2(+n'H.^C
%$0?n=0s-]ohP70SRrC2!n)tE:JSuFdc1*hU@nLd#ZFISC^f%_&M55OJI4bg*<)igu/h_$7a-nfLX7=PfKj"1q]R2RX5V$?tLuN/3
%TE.j;q8,\6)c*TokE:6o\f4HCAO9[Uo%eQUE."0^gl5sdj*MR3DEO=6Jj%c/j`n4:_F[&hE]ar9'-SAP?B/[@k?q,+3M+?!UmnLN
%E]eH:Z-U-iq/ST?-r)-C0#tjcBpE5-Vp"UOJc7SWIPcC3<Npkk4p\f_^`)[o#IoQUd!3U&!">[AJ^i*gHNLGF2?s.cP\i,0$,.B$
%0A.#Kngrj9Q7giHj?nBDq3$.k'\`uZP!)G^'1.<@P!(Bo]+PS68bZ`Mdmb869D3r%I&$eW-HSYjCb1[00%i$\qbq_*6b=c7c)\bb
%?L$%?o:iY&O!!fBcUH5G=o"i`MqgR!eW40dQDNot.\'gDHcWcl2rVk>2T!J8@_O]q3&K'S\mu=27#`0bcM:'r_,KsuN8j[t[>Mcj
%nZmXp1>].kY\l!&YRrr"f8NAA"Q5+:"3XB1l4/o/["=(!mas>E7jgE)aX?q-*"PfRpZKB]YL37;[UsO8r?uj9jjD',Jp]ftAlA0\
%_K;CkG,FfZ-=4jX]Cu^>DrQcSFB+qeV*^VU]%Km1R,Ggd725f;e]L:=pi+A@mG=`r,ue@sRG(9O.On\cJG;3-/fm`,o`>m6iH25E
%;kGf+2!<_mMu<bmP%onD%=ku3r3+]K8CEMOR[/g8!!Mg+N:pC')F3EH*,!Y670Bp;>?#kh,NE#c!64"-K9.Qa.N1Pm5%bI1/fI!&
%Va>>b'b+Qjj61H^)$#:7hO(^E2:W*X3n,m=<iR$&A?04;C9/:<(_u#62:W*X_KW)a.Q%=,6h(>;9$IA"_"<\,4#[oaJ7hd2NieS)
%#0[8Jhk^':/2p_24V.`;TD>>;!s.m2]hGg=#kH8\@)#rnJ,h,'j#bg5+FrQ7Y8/4Q<m+Qg.`DW0n=EEAb/FT&:[EZI`<TKZn`?46
%p].EMf80Q<m/bq%PGor2(E[%Z$V"p55!Y4P74`5:M@VC8o9HgXnUXUZ+eZcU5.)jtY>q'$p0%=kPLVj.<c]ND>iIt?<j;/"iWe6-
%fSCPFKuP;;C`Tie0'W`s%`?\+\blHC#d:N(jJc;`8Kb39][b;m%B.g1,hQ3(JH-,`4-o]!6"!T>)mLWOS=cA[/WeHqSGuk/AKWms
%SE+!/5_(otNCQ"qV0W:J0$P,S;e^lp0`5^.5E[#@*O-RaisK;jOq#l:5@>_EB9JZC<?$Hhb^Pm`mNbg[+@+kQD/H/3!TD2kiE/tO
%JBb5>>[rTnC32WfMbm4ng"AFChV\_Laj.>\YMH"#%HNioD.?OO"Ubkp"G]kj73)J"Pg9%(1mL3H=BRh0MZjaU_XDD?r-qAZ1AJBK
%'mmNdK"qXamS)o%'bs!KeM@lR^]bHpNp0`Q-n\$o'qc;*&_Vgj=&biQ9ZPSOWLs=#H^UVtTqI"Q":(96><2Wt([d20I_(">k%$Wu
%Mqll_:-h_MZm[s`2aV1"0-ce*.1")D(@b^Q;,@9T6:Ph"TE9:M/n8'7W$%>F6O3ls.]>$3k'rF(J6B`5O7a&^@0Yus$U,mbLVaIm
%dI@3q6`d7@!s2TIU&[P1b^][o.O@K<ap`ksY>no0<+\C7q,AZJ.*TJWpCZm`AHp.Q311&;)=W42'G5esb^f"XPef7N)=SonAWI0Z
%$7(tYM7GAD'54m_>HZ2c,gF3+;OJ\OpsbuM#B6B9U,#)PQ)W<d@eNq-rF;r0^^3JO[4U#mP^'tRUSLI`PU9io#<L%;"kc^?!?R4,
%73$bN"W%H*TdY/^4p-ZES]OJ/9-A1XA?B,5JQfnV;[JLV;,`%Y[!!oNYn9&aoWT`3+j^PW]4".Q$:,sB<@li8lSC6H]3NBTdn'"R
%A]VnWHDp]p%toF`&HL.^R$&*"k>X%l.!EZC5E#1L!ie$"R?%"p69,6HcA7^0O!U$.+@qU72H/i@;&(PnUq.*;@8(W`Z-WT>OJ(/u
%'aPC8@1(INj3">h76hR/?Tq<qodl3D6e%i0q1:"dK_*$SbQB(>bHc44^dTCX,`XCe'_N^5!V!kUr<JElYrF@p=K+8'Ud<8l@n42t
%,H(Z`*h'Xt"JEP<foKma$0!'>lB[YB:/H^c0nPSR9i/I.,$s*fH5"A?3BIYGH5!gV4C!iFe=.#6ZDgaDJlHXi.Fs4^jJ(K6U/Q-S
%W`3ngR"91h<U3@%1H8DUeTqn]@5s[J<,Y+],tD_p&4=-fGqf8fe:&/:Au0;I$c,YZU*s53OO$9+iDd5e!A&*1]e.B-+FnU5I8Q62
%5YrrRAn"WG!aA)a[BGgs@*&5oALeTpS@)XeXh\S<bS<[V-7i$A-'F\%'kjlSUVr6KQ`UO((IH-HC]tKOO!R:oeI&2=E$;8e[3Be8
%fV(`C!l\.T;V?rVXf=5T/;jGKMEg4RV",$daZS_V_l7%^7dTUkK_SJk$'`2.b*9`gV'ln73n,LW<3AL'e:pcK;kXR36JAZ(8OYA4
%<>\2NXJ$4KNB(<'TtmP#$+e4t_U>DSLHmMa?^almkCHOZ>EpDh=j2UicM&KeZm^'J7-nu<=Ar4YGsM:C<'T6qpCS]R7H,`(X-h9T
%l:u06%Um6-81IO]'U:[kl'4kE+<^5O0XXdZ6dX"B3!D>XbTLs81fY:k_8S:aFE9!!@P*Uj/'MgBG)=a2P-HTe(=/+0Yn(Ad-AlhP
%&<[Cbe2J/Y?rYf1O+k)2]aW\D-nef)XYC'8s4,8aNiG*R]j-I_aS9e8C+0XD@@L)Q,1YZQ,iGp<-cMue*7UE]%]kn1E=dVf=AQ8&
%Mh=',89I\830<TLULT^H:l>EWSm0K$Y12Gr3j^p)*3W?%5dChjiC,I26t[jWMF^U'K,B2U861Xg#g<P9^f%!E#I[jQRA32&%\ZE7
%W;sn6MdmgPs!Hig%h=:q9/Sk7&G!Gl8i8a;mT_KP<7D#d/%OSQ[AX=^f;MML+VjZ88F#!N!*q#<JZ[@>icCrp#6E\PY3A5c;IM/^
%W!>L@j0Z^%<=_Ci>*ufL<B\]HQ!A11W9Oscc:3uWWZFj-dR=L;<BZ_H"(RRqHCSl^M$#M;eG=-*>CBO#Ufdj!P>siuKjZ6aeM3)I
%M9M6#@l]OcO7].49.IZ,_Un;5]i(O6_P6-:[Rsg9Ue367fHc^_+cn0$iZT&'%"VHlI23<36A:O%BGn.k@nDiCfWI2*TN&`qi.4SI
%B3ds6'9nTMh]kuNm(lr!LI91X%L?rYKUhg:11VF3ru/k[@N&s\Z>gR?9TWJ`0#pHJ!0\Z=!\KZ,&.8#:paDseq14XK_mQ.0Kb-QG
%\h99Yi@JuSa.s"H?a9;1[@0po3gM6%\3^9JPd(_;9p2n93Pi.'$O+)rlTF%p$$B1.S5c^Y;MbrS<N(dSPS6>c0!]l%oZ0-+rneCd
%Qft]/Z6>KJ-.npd^/MFCM9)YY4pS>j[1\$:.8iaa:om%r]lS@<V-&TDK]nfW>neg*%M2/e`C^8RPL(bpT5.FtJQE1G3R;`N&h+"A
%3LVO#,-fK%f?c-M/!3qI7E4qR:om&_;$oM2W"^buN_k)3>cIpr7CWu%8sMpSluIPa.TJ57idZ^u5hO.f^qF"C6r8nH#_/b0-\=c(
%6SVS'6(hjC#6'O4-^$6-D&UY&:Co!VV..cEi!Hh1:+rR^4<^AQWfWKt-]Fd!,p<sb_.U?R`\uF1_$,R6f@>0p\=\_>dLm-H_<Hc'
%Y'34nanODeohL=9\UI\hhT;`,QfpY%1l?T,VcmTDPBdH1k?7nLap@d\gfQMr.!FZ0M\T$ddKj>[;f-[>ZrEA[@[.\I`GCDM-A9Co
%T.YD@ihq)kJ2)d+JM-*_LMA<k)JZIqdOP@F/llFS`EG0/LN"D24k4]fG\3do/9qln^`X_3JOiBj:RE]N"mhsM$3J1ci3-*RAKD9[
%$8XpsH<GiX-p\`l\AFCYHpKjF/(oaG<\bdqFV@?sUH)^c'LG)F=MC&%XdanNL[%*GKJG(!>Ihr:bb6;?^e9^H'm-^4$_n'6).%A"
%CVFW'%``,q8gRpL*XLi#b]bNa6c<NPje\\l8eB?p-;t-a>!ZgNQc^h4ROn&<pg5!@OEe4Toq/6a>U53fON:QWiZcb;1Z;n=WJCqt
%P0Y`sb=,ZtO(;)bPp.j5&SeaUC:IZ`$RL.X)D9*U50Hn'>04j-bfYi"2-bq\_g-+0L'o1c'/$_K)D6h@*HFZ.)D9Yl_u#rR2-c4d
%Hr/pi+tge_3Yc'/79h)U#9lJn'QKNGo=mlij*bm4<L$`A,U#T)_3/QL+P_#Ul8GGA0F2%EkL>)L!%U6c05A<7'87>@W>#d2O@ead
%9#2(oFf7l1/d9.+dda%4Q\*$YC6KAL-%cBQ-b1'u[2'1N$k_d1'X_>)jCG46O_V]DJ`a5#78XDH-ordO8h$.STje7nJdJPJd2+gP
%23ri^LS'(#k!p*;ne#$+WH+6i2]&L1KISO,rT7"ko2)dt'kO=H?.='A^Ool3>:g)47&`LVG>UL-jcAD1YXP6'C_W:s>YJ.3!h;&o
%F1)J_TK4tMZ,9ZR1DNo.:umIlmrK9[Efc2J\.r!n#K(($KoH^#<0&3K+?7J3V3uT_r+e,R>u&]I.&\uG;=)Z7jE)g4Z4T0/#i$0&
%?R3?&bAugHW"UC)S]8V!U8eVG.o_?U'qmnq=1_H$.MSs-f.jp81=io`m,=\IOA+hgkc]YurM"`N)2;:mm?DAQOAH4#CoOKE9B[o@
%lmo*_i9#G910.AUR0U\1C=S@MkZk3`;W:0oFUH\qPnH"W,<$K1:l>rFa>>@WKdK]S)f3d9X8aXqDQkA:MCFn%&R7;]"+.#c%J!h5
%m%VK/g*U"m"hRBd)raGS7MeL2,b;W<<*;Wn>7M2(6A_%.jG)'PT<<3%]Fp+n<3"_-YK3)%*3.dbC&)MZ@_'_-4K/9Sares>RHl?Q
%Ej-eOGAEPFjWNKhEO#L^W0W'tcU.U09!oWQ%*n/U8dj0i#f*.B=A^Z*!6d)_X&dE[%^;6mJ:(3GLCoftPfo2RpSh'P+tf479=3Z"
%Z;N:[G8(NsMJ>.FFW@kdeT-I6?+BH%Y*MFC*=aYOeT+E-,SlK8H?ZHV',l:89\"1GiTHi7r%Ye#Y`E@.Nfj\bY/%tB22)>Q?fRQs
%g)sld*QiK%&ibQ^S:dr/ME*)9Cq'[K'\F""ho>4):/QrT>7Cg[;XL%UBmT`'.W(E^AAhoa+$SI2M?=/I$f]9d1.%.%T0mUlU1=`I
%V,^["V%X4&OF%OFc!(nBR0U[F7f+"d7^7>85SbD\B<c=j'ti4U*O0:);'-#hRL!ha/kY@>-obkG>'U>j:3%f6;P>/m3#<?/'_NUS
%d]1A=<!0)'M1]FYWs0l.3t$b'MBYE>N0m^n-e'@bEoP](PY:I!Z9n8%WD\eQ@OtcO^*r8&%u>`4!C6JTOtdMM;ppG>om*@NOB3u0
%c%NE0O-Om0)7.dX6fTVoV^n:mC@Y4!Rp00uP=_$:q;r+^dem]=]U?uVVV!<79*qg42dakIk;gH#nJLK+=0f6n653c87f59kQZ[9#
%r/sO^'4rYq#H`eIY.B?h`'[X_g1>XN-L,rh:?0a$Q5$X5=>V=/"-P+(_b*Neb2OZNh*/EdK/hFJ*)MEt_uphXA99mL>'2qC[p$_>
%nCVLOAch`<-in.S*NRI_cj<5SdpcRP*G]@eW8&;mM..<XM@Br020f"Wf1mt4Vj3p@9!p?8'j.-q,AS^$b_O/N(PYil"rRC@MT:L;
%+:AtchuL@-isEjk,9UaH]!.X'e+h:YB9K_q26fi+M(H;p's"B51'h<Pmr2bp"X[42Tf&&35QJ=e"X\VE+-FOL8/%_F6s<@Vdd`lZ
%MQW7kN3JaiK9C%<DT.e?E`"C$Q:6KH^7OcmE,nO1("atKhp[!j*Ub.S0)FK@SH3?1GZsDXeKT\M$PP$3A.06X:I(>f//$;S3je#m
%,8=pAqNu9j.;+c;?/u\PC5&e<KZ(Vf]I'3kke2j9B^k_*>)<Q>Ub$+JTSfIE)=A/gHd&=(TG:H@?c(+t?AaTh8c.RVNm?t\pm7Wd
%'CRclk!>sHg/-(dd^?bc!=b&!M\Npl`4/-+plJ=T-n!Y;JInh"?lH-)D4VME/6l!M'OM)FENY_30HCm,2NM=&?k$eK4sZu=A5jSp
%ns))6Bhg8ih,=^W-?tK7a7CG?&:F-[:UH[h\-D4\a0.J!l\/<ZS6OZA`7VWJE=/]p`AS$g7o>ra*beAuko8c<A6H9rWIo,_UV3V)
%Zo#1ZOC+C&*D%&N1Tcj6,>1f9,:42@e/@L8C,K6^;UbTY3/?T/(CY)(*=Z(jDM3l>!>N4bP$2oZrKRs6o)"\,_hIQf)QNbtA-#"A
%6VNGR\A[>Do.jFBpkFW]*?WFRG`(b)Q\#;p<QG@;=I:eV:qD=//3G+fN(D?+290e.m<X"C+a&=q_U$#FGCE+Ajgd+FK=NV6=u<X%
%^/TW^bV!q&af&YhlVFT`X>N@7idDIR2C0dGS6E<0[?\#^QqfURQq8h2aK/01Vh1"8\sOu#dkmG@a0A&9];G'L[Ar`!/@'u(6\E6-
%2kfpNSk%0\4]Rm4%"EZT,OZ8?2BhX$3Kt2SE$5UEU`>a3]FGm\HOsW9G[,L^$.0k6O(eY=K?'(/f7?i#jKr+7eYK],2hmKeQlq[5
%f.16!]Le,r3TP\;b&lPjNQ9=aNf:#m+U_IhMCCkmSu9C_Cg%#."])5`-$@`&K,9]7ARZ!O$%A?tb)MqI8OT\eX;_moC2L[Q@YsjU
%9T*r]O2h<PBhEj/4POoUZbck,b``T^b,#=mYL2ZnYoGV*Dh2@piX/')m.!ELETBu3qKM?2EXN/ZSG;..(c#\L>*iP<kicm2F@d!*
%Hb:A[(ia5uOP(.n37\2jZ"R3ITh7p7`A&6C)ENFN!(i;59Mc/k"A0V!qV'>$e?P!bmjd.#7RNI-##Han,E*TObYOKA)_m.@8o.IO
%C;pj'1eEf'aV@]1L[h(oF/VFac"O91>]-B)c/]43k0S@LJhLVuSs[nFCgRsYZ^PcnS_B#gTR&5#=R7"8GN&G3Hj*,MDl6R\$;g9R
%)oN&fI";BP5dbFA(&3A]9%oD=o^X8LgdV<21iG5eKViFOF*MJ&;EGY>-Pm73*=('?`6%hWM[jHVop<]C&/^r!amjPJUjITY-#0E:
%'\H3KB91fsMG!hDWeeWQD@1<7"\39[@>/+cj+3l!%a<k/Q(Z5K*I1B5@VmPT%7$7(j"$\SdS&?S.tFi*(e(#R^=%qFr<>q.3S(Z\
%TnBD!&YVb$Bre@<g6<#B1^VR,VnurPr)?:aG#Xfo9(E[Se;d9q-oX5(Lg*Hbk-Os:Ldb)S.MuEd@=S\J3Zo$Ar5oIn#hnSYa$EB)
%XAq]QTYI52(bV;`A>E^NAgfQi8BrJl#$OdhomnBeaPY9G11G3_n"%<;<UkhXTs>l-i"]Cm;:sfHZR64HktHg=:H=KXalIY,\tm7<
%'6.k/DK9Ek,tBH*ZVsZ,mW1G(Mg)fc-_r44-fI]t</V<O$`*O=OeRYY^hBl]F@Lfa^`q#jLS.RdNN;W'(6Fbo8rt#[bDOK3kR?j*
%'h[nEWsX`=S3_jO0HF#_V7[S&_Iu6g/i5@N.VEnknOfj<"^VIfI(BR$!FoX[0)=%;LjujDk(<KCQq=![B&X]n<&-O5OCQlTSJ?dT
%f13(J4=q4;b>H6&VGA:;.2+Wj#VIbD>cU83W_@@NKi4(SY#:^hPHmN&<`G54KWQk+;H='8'ibk_3hEC:oK8tgC5,`A09hV_6RbGm
%j#+RoMNs?qBt^lOo)EL%j=5MKUQkCUV,Yi6fj((Yk3A`tEa+5iP%BW[_<nUKmQb]XU:7(a"D^:K1ee(N<H1ogV[>gH/_o<eDpE*n
%8;uNZRpn,m^R,.j/OUY!:i6R%B'?:PX>1DV!SWij%Bsl2N8euG3A/-lItk-iHVf7RUc;`&kto=g-rQ\t2`s+#\4t"RfZH'pQ*Y-^
%.Ml:!IPs`%/Dq:N4JVE,f`sZl[gmNLhiQtPQYQ&8:dp.0e;@Z@Cirk?N`*Ko<Uq"1<rN-:Me1cLAj2>Ta>7p1V+f#K&YT@`LfCY0
%PA(Q!K-gdo/#4+O>#@b2>$hC?aF=icH-sIuT[Z/]G(c`U\hb#YCGR@E'd&p6*UUVI84g4PnsKqaD,1d"1],3C%f@C41:ZO_(ia=/
%Znf=#3an`t(G;-A'CN^M"eIID)-#Y.\L\a><6-7KV')M`=k'hkj$kGP1gX'&:<2,j&PCdq6a]8&^!A-%*4ZQ#P6E6mJTehm$-M,$
%HLqmTY%h]t:BMF*f7kagQJ]?:d7#9F!56!s3$!p6n^/eqfl`^:Qe;ZrRR\mH4%qQH'S.=K`siNZi)tN^]uSi7Ch#Q.Yt#VkkA?F9
%*>X8BPm+!`c0uf9iT0*@7smIm`&F77"0g(.kI3b9YqN"<<EH0hE/4kVd&$r>!Y@pGdf]Y-B;iTL[Q:F;W[ZgEc"WaP?XHH]Ve"U%
%_=)E]^b!lJBEcbr3GV,(d<!Sdle./';5gg+j-)80=(Xmk6e6>f8W)3U;#J6m'5G>A/OU"A.8kd6K4M("0]PiIr.jPGOi9V)p^?ad
%.G,3n4so8cjVrgg.Qpj0E:iF@b-o4GLZ66E8!fN>O=%jn-ED(/a(9aVY=\tf"1'aB5_@Uf-k&l)fVGlu$jJa7e24k^K-jGt2:/U/
%LIKTP&e*Wd2NkrsFHgP"9!H5M^K1W!!6$Tla)aU#S8Rj+c#aS00SZJc_8gl/DKU@(22E9j04.#o_<'qKm$_9bC9`Agj0u:5PttR)
%jbrBq>#CAZr:1S\ZB2t!$=+p[3K1tOTf9c=>o:"(F8c6YZ&l?Nfoc8LiOq$h(18lA0YG?E;?^3l(K95^E#)i[lBS+M'9Z!`F[ln,
%M:_Z[3Wt8&r&SeM!oIi=":,`r"\,'Y%ZJB:/#R@5%;Iph_BReQ\B0>>`W`9^*>VM;;DF4l)NX@Ng0-tDp6mF&L3En@4F>DRfFCbc
%L>I!EZhPSL8,9][mm3(R0#N>hS+.J0V#4A]l&nBL!AWf!CYkmdGi29D_`BUT.DZXIMlM\OYW8e/;%u`$fk2W28.[@708Odc8HCFE
%(==78-TQL;3`n+8LKEOI@oUp`[)Z3.H_=E1L?>G,>A4RJ(cW@HC*U06:8O`r9P+bT-s;^4G>b7I1uFQ/*@;;0mM^p4*"$/1E3\7W
%P#<&8F?E+?66':+(ue/EUe`a5B0Zr022oPM=E:-t@U'u83i12XF!NSdq7[,DSoUtg3.[p@=L=NY+TRLdD&hpGLUH;i$EPYEk8[.5
%b=F`cQGn'.+JhZ@.]Ul(Y^$L4TZnJbF#kjP,D,4n0COG#S`--\BX%)tYWtPMR).c-e[('eXlL0M#gr(9Es#f#/5/VVL84&/L/%k+
%YCX"qd7L7q9KWVB6$s/.igd/Zn9Lt`.SM%bQnnmUnr.9XT\U2e9&VK&/9jjQOijUg"2],p'Fcnih>nr]e:"&cR`r`B0Yh)6E(mpA
%#RSq0dn0fUdTNbC&0%e%5elHd%L6abE5N>$BW89kZtb!a/JAH%[</.%0QSGj-[8iV>ijJr/a>k;)5f>7ogqpU,G@EfV%iFg*(tAj
%_8p_#Lo$QRN&5p!"]c"%%$C',0rr5q?Z;+hiZH5Pg)$jP@N?[`<Ph^l),90h(X#nn9Cl9rb6;b**ATf$-_EFjMp/*X*133?>V;+l
%Q^)M5oIh5=W0*i(2'6*h&C2aGnE)i&p]\3<3W5]9A8,rT(nK\H?e2-FOQ>pP#i<N1_l;4I?F4--X.hBj,Ot\;`hCDQR*ob)HV[+B
%Sc/TU]j&gYa)NGNDa=>rD[cDqm5uJ<VeKgQ@gfnTH^6J#1,otL-<?oN8KMCArT*Q<6lt3bC:9SeAM-7)W"niO;0gI.3'8>g>$kqT
%[1J3F!+.pbb&/mVXdW2;j(OMj-VR%UVJ7ee2E*)f-]9b"r?F9HA2KT'8tM`2W]>1mdX%]p8(",1h`QW%0pV)n)GVQT)%lG%Yq;dF
%/m2]*Bbp@FQ,QG56:R2<e8@AgRXf(uR+OfG77[]`^h&i.7g5$Bh-PP`e?%(k(m^p^<[6g0N`R.?Z9U]W=rr<20QSG6Um'MkOChjr
%#Qi=Oeb,)/GQ`r6QE7)\5qIcs6%jj"\[e\!Dlf,^UKNbID)Bu*XmdL``=h!]W"d/R;1RA_(!&^/1-c$,Ma0`Y?qE<E@;KKZok-i_
%OR]A:KpsN3:&n]0YVY?/joOV2"X-$!JPO8>nJ\;`W*r-Q$jMB0S]`,t,7(Y&Sb(V_d_6hM[G&KcX[AW]-TYmL(2qc@1H/6"ljK/-
%73G>[C6!Am@.1'd1!pBF(e(+V<>eg')hoP!gqY">@/=8T,>)X1++f80iBe8\2i\UUYgV0GrEhQtrokfB."D2r^EQ_F)#F:-Punln
%<-^b4CI.<TQk1)i7hbE'E((IC\tr<[PlYq=?V8&;nmf9.Mi_@u\*QTB%TSptPCY3jKa;`9`n&q/iC2k>q[M5T2;Bu;.^h3a-]61q
%;)=5Mm!itr>Q>dk]H=.DK0'qMireY4GIk6GFCd`*YghB<\kmdIc`U@Y9eHWHER5AWN)T9?E8FgC.AT&I/N`/eD!h28IudbXVM[)V
%aF'4uOCq2m%k;RF8#$&&=<_7NG5A]W]0,-!7KIIE*:ELR$'o]FBYNdh4_W6fbXaKfjfZ!F(eMBng%@nKN,U__\oR,%*fu2Cmlh72
%><:(biW7Rh(lB=rUV@PUII'R2RoC=KY-mT(r'9p'^!B[MBej^RG^WhIri`LTQFt]L[KJr!A"^+n#Wnpg5[l'5,d>[7GB@N@$FP%2
%:p@)AA)#!N,;PF<X5c5#pl0p22+f'r>.r>r-gIOiS&81T1\qC9\rlFLJ=-=&h22,Y04=<k"h]3.0dI8#G29hk!&</3HqV-I@X1hR
%Q96)`G9:qB):Zi"k%i%P(kMe[E`^(,ot?biZWQCLI_3t#U-d[;`Y.p.Yt=eAT'!:tX*f#m`pXYVI/@31$6^AV3]+sFAhPl7))(4b
%]E0t8_g_;,U'b,KmFn7nIPuQeoT\m7*Wc7HO?Ci1-"i7mZU]q&C%r>5Pjt1`_:-8Jo^!-Zr[%?O%P@ORh,DTTqFeDP!:*#\n_'Pq
%=oGp=qm4\rG&Mu(11&ES<)OGqjk6Cs>?8H'd@std^'$T1]V\2T3A*&Bor+;Iq9l$,^GL<EHHLJ(NsM.(^ro6/1>_a<CjbkgURr"Q
%"?g>/VFPTu[U/EKP_kBB\*>mJV;Y(o;oWU!K]mf'rgl9)nQA]5c5nS6V;Y(o;oXmmkT9QfVfpE[*ld$`kE,ofY.+Br5Pq\lHHLKS
%P^.L#leT\Gl+=U.AI&1^mO@<:rAEF$"Rj"l%jFlH[c#i27DH3V$$sa=8WOi(HR62ak`Gti^6F+/HF2)GL2V[811&G)a9UJU8WEj!
%[ALPG:%G.69?^>SC\iZMHr@'0ljq8-9#6n$6]6D-p_*4`nVSB]7MWR3f:-L$RB1GBR<JGSn6OC>`bTl7WoY"g4^rloS^+gq0+D9?
%ShaX#UBVZ(bh#iRkf>ZoHWBG)Zf.CHVi97"#QZV:`4I(%pfRFdD8+IP%:=^Y11&ES,^$UYFb,SHf^I=DSUP;J'(hFY([FG\Wr?o?
%Pc@n\HP>;1KWbsjiagiIN.qHLbt1#c4_8H(Sp0f[bt@jI[b"=?3/S!mo:*/EBrK?6\&qV[%=QW,iq*=G#A+A7h4-V6a%=b2>mMj?
%n,D=Ghrq$I$5$Jo[!9n>eF-AuaT*&i.S2gBk.i'cp8o_!IL$+5LZWYG>ZqoMPSb"mD.\/`>kC]_jH)*&Wm"sAmZA7hNYr[B$k=ln
%<T'[CUJXH@0P.p^5/.TFaU"hlS-1`P$4NiETghdOobPO5F#-4ko.RQ:4FVqI3Khg1Tu2k^)8(6'TX\SnkS!1A"AWS=:rGVs-4nig
%Sf6=GONWp`)7TtT+DH-pfRtuN/$?@g9^\Z%r;jq).hn9+\&[p]g:'T*kkf>]4*jAY-KuA;mPrd?`XnodYW(5Tb=.:&K/sl+eUI*$
%?+6$<!;lR2Q9GdJf@<V#Sb1Q_;9ESU.I-)]>-mNabm"m[bTiuhnug$E,O\lK\fl:oglL^IIZ/%sB[dF-g>o,c&^rXJ,g(p"rM63I
%7bPN]&]^gI,4_cT9;+aa"B>Z[J/Z%R2hqI8N>t'7?qb];;p\Am=pA^sS:E^0UIiU%"c@90VcG.O/KlpaVlA;FpfUu."W_`$W%no8
%aGmq,Mp!lOEsOlPZDI3"&Tnb1<-ulVEI=uN_m)5Jg!e2KpT=%+5CHqZc]?)Ta23ETE>,J:eUVBtSjs>i4tIBT+O[*X#P.bqT*IT#
%;pVf,IVmnP##bdr64B67H7HAn)_ne_e5+0^$ch5?:26OOI&.'$&dhN@B1qWN4UO_Wo>.G:$t[*:$4N]g0!.@J[T32Z[#au_*0nQi
%f2>Y&Ko9"s&5bICh$0t_s7ZGT\.en44O[dibFNMuN46`ZW/8s_=-,1KYS^kNa8!$CN$bAt$6j(t3Nf`7/K_I*?HWW3B.2WI4IA%J
%`[$E@\NO`)/Iit68=@Kn8(%LL+=-RNr!ahR-%C-^1*57uJ%oY',F[/KQ>tdI?p+;UWRQB9+prJ8+3R(JpKcDL`!?c6Jf/N&9u8.$
%8q!]fV,C$G9[2R^E:(1c.P)Fn@,l2s\MCQNQH6[$q2$2C\c)/l8pWpjF;)r7Y?Kj83L!ZG/HF2>RV48Z)1nnWL5*2?&.YpFF-26^
%rPA.S?ILn;1lQ_DGF_).Kn*!*3etJ+;V13t*726j6m/(lHh7uTko?38X\'&m$u?"^Q[_Ge,&hMaDAYTOSj<=<Nke.r,X`/4'bi"#
%dXrWdd@tH1;JQ&q+?YCipCO,Q(CMlt_\^:!F=EtZ7PGPc5f@u3_Fn+Bn#sLqR_D2natiF@^K^aI/FIOX_Tc#a`uA8B<^9Q_BJ.(A
%"BaM[4%"/AM:h-)h#GA!RnZ(XB1F&`6BaLk3''3$c)>'C#9j'jP`kKq:7j6JY212-O+-+H;osogEY=ta$_kP>S=ShWiKsTiL9^]%
%)7+,#NTYTZkU0]b3Pe$299HO*%7W;#_P;2M$R_WQHfp3WU+cpEk8sW@CHC'Dpn6E7SV%M_9'DVJOFIhS]IETmF(g#U.P-q8p>I[;
%VJeUQh"0t'*/oc!ICUDRr/2gdrQ!kW(pLOFlY67c-XO.@4KBFP]>G;C:JJ/VO$^KIL5pG,Ge3EeFKO=?[h!rI_p6O<&)Mej8R#;R
%=e8+l>.-h51%*+-a;FNr*Mk=_AEXt<n3TB_X;"1opCP;*!$Dfq+63a^bVKQmaT]N]BMZ#b!KCQt4cH)AGB]=0o<]$bJoMDj3CLM9
%*SJJPs.cr^<)LK5RF@U&<In;dU?tD,okO\RRupReJeLrr2r>&io?W&Bfdnl%ZZOn:S.'uR[Sc/&P71H,0`]nmQj^3X#4t!NV"TN[
%n_LjiV-:ZFkS!tq*Q;dU@9An8LSUaaa[jVsAol3DmPP<32E'IC*f%ttG"27aE9(?Y9:g;LTC`$uaoI6VR'HDg/5YGBqi1,ZMha/U
%\!j`&SSbe&A%;7*fE`i,plQJD3la!"SZ+\RflPpZl97oIA'X?_HEMdR>Ohm_7^+_EBX_:J9G]AZ?<4\I18Y5aL3>9CAF&Q&0DSNV
%=T(sN/@2*UR8nh!lNBo>\8>esO5`@'XnI/n:O8YKH`h-_%Vf['aJt2CAiOfAIP_ZD79,&U<<J*]IEqfX<+Os#J+d5mnhDP%,\\f'
%P4+-f8.?1K[u!DfDio](?4b%f3N.er2&*K5B->Z'0ZeLc7+QU([R4`>NK_0F:%E\pk9tOn5iKf4(W06%/dY#*LgXVuU`QLe^'gs-
%U,__GiA9^NAued=a9>dO-laMR]^md',Dp\QqZ3MIF\*+r)?X`;g4@gsh8R2".VDP<om`'C!p/fbA24t>/"_HB;"qL\(iq/;_/n<P
%m_Tb@4b4SJF9=NrNl+LEkF(X`GNQp]Dun*E/#Q0)%`j+F\3%[`Rn"i4ps9+@cI;FJl.Ps,;]g$Fl32F(n_\7dnM(sRDG<Wj%dKgi
%3#t.G7*j7@>%1HbQK_T(r>aoefR+e=Fi#2ClLo5LKuR$GYNtM?g%N5;Q:^gTB%paTp>Xo:'gRH[J8Dfpp>+M[^"eZLhsLE&n`-Z:
%O43KO^0cYAg(3&\8+cb:T'fDHFTH<!kMRCu0WM2Z@.]d^Y2)f#KAfJhkO:UtbQj*C#<sI4OslDf=P?6M<<X?ZeS/3.p:s's..J$!
%*CS]O&pY!5;hED%WP175M-l3]P9C*Wk/_EKjF\!GG5W\BRJ8^f""3a\CS2J.ipf$jGj8;u,&/p@I7Bjr^>77N0B_dE,B?"tmlkN+
%+Q+ES">?A\2Ah9I]gqrLF??KHHXBP52IhYbRB`<f#'Tt-4pS-FQRSt,Jk7Se"7Rl9X6>Oh9\Nr\B'j-QY0Pq;%*Nc-5OYsj7M"SW
%BcHLia3r4&q_FlqLg[L^jeQeC[MY?FgDOdCf5L*KYaTg)2S_0A'X"&=]qV@h<njUoZn9:/g.oZSlMSn:=RJ]Lo1iMWFaGaiL)elk
%/g-jnber,#PIaKC@U,dIB<8@D^U_\.C>rgY!b"g+k@m1YbBQ0rGNpo"MfG/nP;0[1J+GEHf2;IYdftWNGci*U2T3"ZX_VhsML'ug
%PN/HVe$^*[C"jM@CtEUno<=[.R5P;k.=XKZJS(1ap&*XFa0[G<A_Ko!m-=Mn@p&.hnZttpCRuiRYHnFZmH=<H'f[nHSR&d&f;rhJ
%F4Li@*89d=[qSqr4=:S[(L=_'c$Jd9.X@fWPI<3k8\6Zg:ZlX;UN/;JT6JRg?KhApJS\HiUX&!2C2'qX\oL]X8R%.sV!X*u[-K[F
%Bin*BbSk<J!]>,r4?DZ/U,V?lCQ!2#[?E>W3e-`<QMXPW][I)?\9]d!mu;>%e`&R*9"5l7([<noMfG/mS[!omro?6NX+?U/,91)a
%f?YVCorI/5H;*%%>UJiKbb!,;4@\F]$pX3VYqfWfX!CH0;]$%tm!"1"h+MJL23nNY:jik\1>ZOA>s#Q(ma%F)3s^rn\).<Ge(V;j
%EDjQV[O2BF]R9.*^Ihg#D9"^O+nXIWgHBt.F8k#N,kiPY=f2\t;4caW!D^eiX;7;bbP7WJ1IdZ+$Bp$'60*8F/tU?`5.XLhK1Vje
%If@HF?;TR'dBJ!jn`me68ptp8G%HIqW"[`A*-+SEK&<tbo1GQJ4;l_F;mc5si@$m^[_L1To$\a/&H4G'kAbebm^ac^@,;bf'u3hP
%f"rnT-dalRe$\C[ITaV<7OFWpHZT+T*/l2X3EeA@hu$+,Q<W\,YH`Y)^.R7\dYrAs6Kti0[g.lF8c-KME*Pp%F7)R,jA,HuPlSNX
%+/7=M<-2nS$+@",e8<&<j.*BF^'8cZj?<mNKpO5]Lh>9jAFjkrlSq:Ne:#UXrA&"5@s2tnj=r(WA,(<sXe9&qkkC8FXBr_]hqM4/
%MLF.lZnEeLS$^-o-Z,cbO^12^cbaGUA^X2">PG%HIZ?1irjj.ol98p?I[RR,0fqFGnhMWF1&S\J#/J0Er;EEK#4KK'qo8:?U^ZSG
%Q]o!Tg1$S9[aWjLY+OK^@C>S[BaqT/gQOofLZ^O"ceY/':YMOM-LG>G8(UQ)KCWCY5O5+VGk6!j^WfRq1J32qf"Oh=rahjq`&2+a
%Ia$G>Stimqgbo7=lcoe=6bpSm?\dIgV33e&2I@F%S?E<1G1(j0(lnL@qn1Am$Q[jndhQNWq7V1gfXpNk?<jG`KIt2(@lo)Jm/"hP
%&loAn;`5\L]dJ=.*)Y[o>X`S\IEiW,11qtEG'*`E0dud+pj"4r5hu=n8ht,%%of4JXaLI>D>eK]>c?DQ/]Keb4+3+TqT4.$<XURE
%L9r_.Y8]&,Q1]1[*n5Vd(B$"&-c8!VIW?Np#@mOS-Ol3a^=E*P,:_hu9atRh4JgbsPIf#l@[qMJe(;C\?ejgP[I5k^/Kj"->sCh.
%psQ@/2sNS<Mgh)"P;2qpJ+>?Af+Iq^;c_]+m]e<IS'G,%AMh/.,&A9U-+%5$QNF*5eT\pTh\]h!E#'h*1WD-D.:%FdjptM"g`&5P
%hcS'C(4=[(o-!R]LZj_t/U:tqPVLpAHbc"SS\M^rb2!VXegU\HDNsEmo$T0)T48l)`V#dqfj#q9(B)MiC<U*h(RV:Q:go=0Ee>0S
%7*5(ZA=,BOaOhE*e9?+2=2rK%;?CVI'7oW@8j7aq6CeQJkd*@_i7[]l,PYth,u<k+r6nH$Ykp:DS;AHt,[[fI@8Zlm:qP#Bq[V6]
%/.^k,$MLQt"101;I!`H:))4c8ic.OHb,F>WEm8@I/4KXYI*7l&)a\ai32eqb4c2:V&GsR88"g<V?'X!_iTY%l.rY.,?t[3mWm\0d
%>;'CmA$MSW>3f:UXA$$#;'CDVnXYeFRil$$c\UBM=/l_qq]IKijtEjPrb3Q.!LNo?p;i[=*i8QSO?td/Jn9VPc9N'R6]`gt3#LU8
%B7C(4FGp99oN:c>%Re6,2]*rXP;E:G1WX#T'^eT\]"Fhn"KCFc9"HjFlk4]uQC$((;8+:[EsEH!e_h,s&:!QlMW6R#](;ThmlbeX
%*C/$i)q:7BbB<`s+iK*)$IX:G(q5^f=^D,3*Oets;oU!G7oPFsHKPi<D,rW$e($M"6Cc?iN8)J41#aASG)CUg3(/2gc7s&cH8ROQ
%;QM2o0Lec82C@I-1>%@g1i[RMoosHPH9p^t7a,Vr+!.WUTUfjHbMDI/\=JT+#<IbpiGFHuauDf&TQ;Lsb0$+L@?u5,0n"oq1E!Zc
%JY]oeTa.(8.I&AB&G:Y#&N31<*2"3_[Ed_T951<]%Q\r5HVWmGmWsCI@2tG:d'\f>?lH%4`0tsE%8@ts[PMeK_t/p@mqWU0P];M*
%60BHaa>j&nF0a<E1&.TsST-_/lpGO(Y14ud.H;!4K$FOM)J/5%(qPpMoq=.CcTC011>%@[MWNA`;,8'bW#'Q9A_Zn-BRk`>cM<&S
%VR/-s-\HiG(AY]j4ej*N?I1PDMN3!Y=!TTU@H(BHH)KO0\o[onJD2O:.H?N^q7G46)B$0dE:T<ihbXd%pU2kq-\Higc'%gfW2GSA
%e-e<=To*W]<KVAB%IJ58nsjpDm:<F30mR8&;,8'bW#'QY$tZ+jlN:nK)ZTo3n+;K9`pI=+.dK5lBEAk?P];M*60F>djjYTEZ'MJ4
%j1-&-`[E@tFu%^*S@lfQ9i4\(LSu#2/g[GnAtcA.Tbob#fu:PMD^V*Uj1#W$cVr1h`\-KZ4c9?>I+*$s'L@ZGMg,QKST-_/lpC?1
%Kt'N6AK7F.-+^rDX\N=bZSrC(7cLPq7E]tFI0lTKW-0Q(HYSFa,B^V-e2Q>AYagY-(_Vk:;]C6M><8]!H]e;:=lq%,V":[$.&JDi
%ma&V;G,r<;SQ]WNEtE-+q"^*Z8:kO*f/G`5+B[Rn+NC,>[.reBGeVe`oEG)Es'BS\,(`e8IP\JNr"dE[VAsa`Hr'QTPH/D#RlG?-
%CVEuA^_fj)J$h1S649p@C2RLK>"klqe+b0M-4VB<q6'E<).hA=5OD/RXNF5*?1t-=*6$?)4T"`Kqld:aN<db`>l=6gAqc6dN,aWV
%!!"cl-UZ1SBE5G5e5O@1lLWc"dSR6D3FZc@G+ptY4L^l$3uN'uoGQ/QJtA&70e_`+WX6:NVSM2]6+R5TI)*6JDC7fSrZ(c<V'>1R
%it1m8c:*LbmV82V2jDQ$YtI^B)7PeqNRYLAW+q39auDf&TQ:Co.iR#-bggCCO5g5GgbNHr:55e'D,ps!;,8'bW#'P.-Tr^9FT^-$
%]tq$!%kP`fAEZC[9L`4+m:4-Zl33_/`;lP*/k(I/NIXD`8b5%(Fu&]Hg[&O>U7O+M;(q-<Kd1Z-PWTMbV/mA(X'Bhfm:</,,$&3@
%W2GSAe-e=hqV1/d1+CI%aRL2CD-9.$S;53_PL9jZ1eH$WLS2uN[I!hGgl"m&7):h0RfEXm6f&]iP9Hg=3pA!U)>t-=K!'A'Cn":I
%*,h\dneKb8qX():!Op`?>_8P&G"F@N=ifVli8QS[-S%qo`fm7oNIEtR@Wuak5e%,Hb1J#RTP(2sT$q_H"Ih7#R0C6L12\I,ga14i
%pd#SdP];M*60A64'D$<fKjsRb=B/[%f#kLn$upBSDC]X_HHJ38]qBFsd^&*4MK00_+sKm(]sXDN3uR%Pb^Kq@'N%XDLSu#2Xp,S=
%0Jd,,Zd`Lh?@<)@j*!2r\K#?@L5C6!3(1HQF"P4m=j<;*RWT)eNMn1LA_^#b_ZG4hP@:2W1(I1]Il0(YL?h!IHa8\k]G5]W0aA"L
%nYg(fUsBN\Jp8b1,s9d[^1C.F2U48"2"f&T5\nI3Jm>#PM@X/&D%.(#D5anJRo(?HCl)'>-tXd!/O3!MdGiCX:]`p7;Eeeu-AiTI
%=UjZ!5,e7A:ei/7Q/cX.r[K0a.Dk6)gek,E7^"6dTmc`fOE$\rBqLhn+t`YL&FX$8$&3F,9Fc@!p]?+]_I8JJ_%f;#D,cA!Or2#&
%aNdo&Gu//N%dMoAK/%_&U$>/he9t^@A"SOI]&mh,*`MD*aBl_e&VSs1j)piL(l[)3H*lkU*r,2rdZbQ'Rd[RFXc_u9P1c$g>B:?M
%dMTHW_%=1SBDo%`l7(a)p%]-Q=GC;HjMLCOp/)PI+sjA6)c5e.PKk5VBQrDJoTZURH9oj_8YisK+<4Z%!+Ji]>'J!RA;FAGc2!m(
%Sh^dQ0BcXtK]DU?#]9sW-56E$Vr%tFHdM\L,bBUZ1(Hl/kZYcM/H.5^19%;U!pV\#$dBNtP9FR.ZrcT,oosHPH9p^rE*6F#J:L?4
%,sjlL:j':5EB>%IVY=[]>,%TD%T/k5F(+8I/IJ6,pu,`h+@A$X5YqtQj*!31LRp*Z@>T<Q3(1HQF+cJ`9h:Ra!"agJq*Dt_J_Q`S
%gWACH'Tsb8/5]1\LSu#2%\\7gM$nk(BqZ#m$?WkFP]8c&lpI3pod/lPit1m8c4pTked#6;dfN8(oM0_Q.H>S,fS@mu(hOBQP];M*
%60H7WXa!Ff)*\O?<UCd^3iZ%*j*!31LR&>PHAQsj3(1HQF+D0MeWrn7puB1U%[$OcN,^osU(Yc53[Hqa++dhG[G]qSrRHjYL!m.i
%-)0jegW>Q/etQ*e6fK9K"[,1X:oOlD+0HCAO,%<<[I&q-a]K(sgF;D:it1nZ4#_%#=B;n.SIb(=9($D+geNSuNe+<.;,8'bW#'QY
%"Y5BXS%oNTnS!?O7TZAB%_?PT=`.aWHHJ2m]qB-Ej[K#,"Z>@#q<CcW,k$]Haj<u54QB)a;oU!G"eA#RNg_&0l(Fc.QHuRUo!b00
%3uN'gFZ7KVRAd$B6duK)Qf<6%(L&Z?Wg9B:;@JJ04/elpo\&+Nj=+T&o7B_+pXW=A>-jLl5UdDH2E)M_PG*l.R1!!>A*P5u"b#qV
%-aY>)gZdZo)a]UHZl^BRTut%d(RD"tN'l)&3p.]OV>6EDCt5U8'he'Yj*!17XNKfS/l>C^LSu$MY'#M!_>0b,(:rH9GilusC5goh
%O9`2hcBk>>oL$t5\lS.Oeg/ujedL,D^,Pq`QGoGSgW:!o8=7BjVPpDO6duK)=+I"aV?*_8!$HkFe7l,YgIW4Q<M%Yq"[-G`P$ZMA
%m)K31_F7i_XJQiHN:V@`,HL(?M]l]Qq.Np*Sh^dQ0BcYo.o]E1@,nXgPN:.O[p?1!j*!2r>hn[.>b[fF%T+<Kg@Ne,"K]l[C,V+$
%5kFR[l`p]a2&ZS:3(1\Cg*Z,fGDOaFY=\HQ2K7[p>b7;;j<[e$kakT>Nljf0KX:76\ENI.l6hjBghJQ#+j5Y'[4V6]19feOHVl`A
%Cnt]S^*k&'6]_*D=n*-=Ls7qjE:?s[!DB*>H&!;BJps+*qocfM)91L2e;@@E'`G1D,Q34u*sl)(!bR#)ak25$#j\$R!/0u4)Y"sh
%YmH@T6'90mM9&P%B97*$n`Cll\/)-PcG/aEZOcGB6$=YM&'_-JOARNndF!RnFjg's<2-7%!M0:tR["^g<tTF#ISBj3,O11VHFdLR
%;S]M&c&Uuq%2X)I+C>OZ)66MoB3bL07TG1U!CP-up(De;=ELtg<=7]E,lrX+1UL%*du%!:D?Qhi%r*&3QPa;pYV;Sn;#-L>[RU()
%<:3[.AScBac[chi6;o&4(IN>Eh-!CRCLf'@%psoQomEG,qr@0N`9U+tGtY=X94C3nok?m`Y3a-;c0a=7QMElPh5_2AC&<mfN*Xs5
%d!^5rU?Y?m.&do@T2D5F[j'+1_ba".ja>r#e?`o8\,1nCp^Ob8?l:H`?Br.[+--[A@1W+\TW?tZ$3c:TS+JtWrNZZQE\@)LpV;ll
%iEht68<:IaD27Bt$=n68p!HS%GMcM8@nM=g.XGG7_PaDfF9!KE5m*dJn$girG/ip00s7[!JfZGl^Rqc!I7?IJS5s*H`K8,NDfbbN
%V,6Ylgb'#+)09[I;,8(AW6a*F^b#2*hl#ug)^f:4n'b`NRQ`#\UVEZrn@&gcjh=B,h2H1hm^fb[cDGNSShaX%.007#I,?:O0$;Z+
%d\k'o1jquB7Xn-n&B&$h)YP5g`Yo#<lg3$=3*X*B4eocj8$K,'E.:'u8ltT^q62S+9jaWd11&HZa"35IPm;Y3M[J$[FD<N_D-s$/
%11&G/U!Y'8iN>s1(l\K9^RI.$g%6TT)>sY`o[CZ.LDJ96QlU`c]aij6]lc4,%/mN<gBa*hGfYhnKKf$0X/XI=9[O;/<*;=_g)>g8
%WADH'3qR%(q2JI4'-Q(d7h/tY8jIEU5Z#KR&UFcffWi#o1/dV[7RX@U-RHDL11R-<,cK]mp(?uf]L$LfOd(l>9*#MBs3-`64@9i"
%9<_6.:aump2(]]R.7dr=3%!Nj&N41=A$"]n+>5MbfM_WRiWMYr5G82h59<G*n#V/%;=Y(Y32ig^@Q"G@DhWJV.n:[57.$M3Zl-^>
%TV<'gPgp_V8=rLRC5o;:lU-c3OUCWb0%fAL_NR7'_p$lZaS$k/-`LU3E\ZT$2AtI*+:WH']U.7!BO6lp``rqS[l9A7aLg&g$D+SD
%9S["X5+Xm)kdi*%s4Fn"bG_OS'].K"PJ);q\KDFKqZRm+'9M<,H\+mT?'`4kP]XB51?VVYIL'Z<5bPe-s2Q<&SL8k05hQ;UNt!P7
%)6g3;*D!>foX;tIobi=g8KhX'KQMfLMf]+?^]GXPr9!NoJ+GsKH6956!D++1>J8V:6)jo+j98!=K)W.;$:RcB$E@`UV<_mk,$`K>
%mX+?*ZUd7=RZ&"0Ab76jBd,58APu[t3;=l%Gj`[pdG'*WY-7fO+)\!aS"+#KkiN7kk!$Ipe*El+CK$QL^s)Zn_"2#$_Y<QtGkn?3
%F0PuE]%fNX(<e/4X5X;PNn<C&_;<$1oL<R2]07Gc]u.3JNI+(GV\L4NK,-Ibck3^to1jmk?lEkDJ:-tso0j`Fi3KEREn\1P&g&a3
%r)?o%H68=KH8$-k&jlg:QZQjuf13Ru^Q,QIa&o!4IEp?Nn>g[Mf+Bbn7Q8)EMU0PK-TEC:rq6-nin;C9mF8I.GgOa8&^@/)re5`a
%<N^adm8e(!X5P'rCQ+BP2j5uHaeEjSFO<]d#r^G$5hi*OU1@4*l$bZNcW1l(\QQ(Y'/\s5L@Y:UUE:F:0tDdL,,iI.^Jb;aHJD];
%p%t>HEJX8,P;E>)KCrIS'q#Ic26_9[W.WSJFa@PsA!C8!`r^Xl>.qNo4OsC6'3VK=fV%'m\h+\sW<u,g0\^V^j\E\nWR=dCa77h0
%eN==HT2h1$&NO<(/#<RGn,/*cLfo$h#'2l1i**%u[P\9=P[)kqXtq#j,5>qla#ZQo\t8'ZD"JhsEZIlZ1uiM"k3L(romX$W]3F?G
%RFV,.[JR"!c?E66J+JA4JDTPVS=n-:mYk`-oF+1&0TbUr?ti;!YlO,beB*f*Q'oXt1%*a@B>R#71,?/&,STqXJ@MQCm/\Gu6:M!;
%#Q6]Z<_!$E<2jcZZ3"%RR8C)o)(6'\`'S0TBNq%=U\l;JZ!4+n,;9@=b^glR[]pClK_,;?A4[Y[6a[4V#T/G3(=WgB<c/+N#%YCQ
%<YW7se/o:rkc-V@6QY\gQ^+!BY&3Bh^rk%HNUYlt@n[=pF<MosQR0<W.pEsa;/jVWR"bf^BkdZd,t/^k4^o9`Td&Ve,Zi!gOBR9Y
%'%N95-DP6l;dbi3Sj-A[K-<r,;,`k%Gf8mB#ta1FPCXX-F03])U4?nhSVb`QHnuX->DP=/`&f8"'&&n_R@7#V;l8g/(\In;_fmFH
%ZjJlsPuKt$l,p<36Bo$+YR#`sSb+jJN+F'd\9L4PO9l_3I\/Nq]%&b?`mY,q_9ea"i]i/ac1Ae,"%$RH/K.s.*!o2g(%2Y:.M!%"
%KuLQ>nUgMd"3,uN\GaD'2`V3G@Yi*U"T92;BW4pC,nNqcqqhY!i)g[":0)&V;*aF^N3r^6Olbt?J8[E`m21s)lpBdrd/SB1&5"ih
%QluV&1EicR1_$:3ERf%k`Pt);OueCX,!DA,:J)Q#L]!ekfS=,nhhj3Ril^6CTo\@AF'9DD(0UPrNeIb@9[:/L)2Bpi!XfMb^*s/A
%ckU7d+-T0Un.]lLnP11no@?)67&3gnlj,k@APKI(Noprm%U=UQUg=]U;i^5q:kH(><n&ne**?+8!Z3*jGSmZA8Y=\W2<Y<R)(i,c
%O)[S)a]1b8*]I@8QSR-P^`JKO)rnrY?BQ*:;RWq[V+).Q`Ge43Il)N<Nt"4YSBaSHXIkKNHm.'N$3h58%:_*3[gDOjed*&#i9,Xj
%@U<20E/5'W5#p)lB\a/;Srof]VJZTAN#`js5q<]`RUO(o/Afb%o0['47Khe<F%m\4V2^+`egH^S_@)6N?\8Op6teI.EPXhBlL0'K
%qDWp$?iKPMhnSuVJ,JthrVM*?LO];is8CRLplE2hQZrK(5CN?so6>S\j':RR8q==3RkP`fDrYQmAYU@tK?K*RDr07$-$g:2'sh4u
%%T+1g6apkP2fR`+NP?PkJoAXMKUu<@P>%%%GR:%WMV0WA>\eM"+WR5#)U+:QVorj(iBno'UW.dC0q)r^$'N*X5q]_9fJ*jZM2\Hc
%&IGe63kl0G&WQoLL_9t1#P=n0EF[]bWq-g%K,^c;!A]+khB;5-k5fc/d4Ae+Rg!G/2gZ73RA=)G['6P:D!W`LqabD!inUBqeS%Mb
%2Qe4U]:qOm$&MC;GtL.O,6&V,N=g``V3!`ub/Dq0=N\\C?*0P(XC7(I)%FF=,HbBB;DtXmCDLk)N2*01TT/ZJB1!-pGRnh9TnGq&
%$A8o<?>Upao)<KqW$"c'O_m1G6g!E@Cg/GZY*X-L^kA'H]S#ZON''X,#t<tbqC4'q%Bqs@Y`6Oab8Pi6ir:fXmT;UX:a;trg'F@p
%Yo'`1a!H].]0R;rQS+WGs%ZWgCp8`+g2q(VG6SH`KsJin@+B;.DP:TB-^-M*.Nc,N-U;'73KF3On;We>kPcPBBBX*$[k09hF42pN
%,JQ@<Rt+a20OR36@WAodW&'KGMR"mA'(7&Cp:VN<V*qk1=V-Ck)co>K1"k.NLc47l$jcgIBKL)sf=4QXOVYL$&]`k@@1pfnBl72V
%O3!p\87gmWP.6TCUS6.I!`-[BRJP\icL+h%l3?*5@pm=Haidj_/*Q>"bfYa]9"F8$Nk=/l$j`LTePr)Z3JohEFL6k(K/Cgj!uHRu
%KG6/I%1CW:h_8l!3-rTHN:Y!0rW^0(pj>nuM]WkMB-$PG$^Vg?B"m9/`D_oh_F>gg"5XPu?`1;/XWYkJ(b5hp(d)h/G9"aaEV?(s
%Lc)W8Zs&X_63s(JdgRqX/B\J`(T"NZEAth=bOH4>e?4)$]O/EN5@-DU_N`*QWppQf85_5$0bhHIb%P9,&R]+-da7UI8fM!7bB,uo
%lqso%/@9]p,&+kT@6g>f)1HB^l@Ud9eKtjAY_b6"0n(?O/MPPj[5A`i\:(u;>@kG*MM7s0Mk>`AgT>T#kfEZ:h1np97GI%#-*boo
%5b_&KP6Wqs?M7cco7bG>mjWM[3[.^0L`*a3?eO&^'R\`KNKRdc0a_hQm=-RW,OMTKAO$L]kI@*NeeXPcRngcO5?5+E#4%khE-r>)
%fBtG)$.I(rZ)U/[jU0LnYWJN_WEQ:Ba?t#]e^_LOBodfee7L1.j=<XVPp>V8o*7E0-IKgp,(<LG"^S"F/FG(R,D/sd&:ofU3DcX`
%$Q*QBd;^PWEWDD$i/f30WC_".)92Q#:d*f2]e7'>:Kq`A,>&%YZS6u[SQ*"?8C+%i(fZ.qOGYSJ1C\lnG]H:7i(*<jZQXlaM'lKe
%COqHd8n6DbPhJ7Q,$nZYVA>iM1EMFE+$V%9.i2^FECqe&3N-'ChBk3obb'9C>*2s@i7Sj.;B="uS=A)4FGj*DT]cNrqk]p[fSdr_
%X=anfk&7+@U]'+a\2S&L)G`#8.uW.4if;%m8[7pOR?0uCW2B!7#+,Cn-CiJgFkn!2L)GoHe9-QI4]QS*S0uVU(MXoR1<hS.*krlE
%8k=RpBo6je<neK8k4uQZ:'_'m7[9g'I>/Ir7H@G7fM[6>:lD91TJkE'*OTFi]D7PZ6AAMTQ'"`)qK[;=%__0#,T=]lejC#[PE9p[
%305CT*#2i7f4-CTA[m$HpE$Gf7EuXZ*h*a)G4n#02TB%M[J)lK!e\oG-O;8p<:L08gr4Tl!e`@Jq!9WS(597L)]'NQEbOtWP.Mh:
%:InLfH5/bP.p[9b9QV[\TGY[hd;e@XpKi'%dq9[sDL99[SUtT/[ViBqpH]f9IFgj03>F\8CQOR'PbCc^*J^o@P70YOm'D/4F@7)u
%L\`Hqb6iulU22T4Q%m*L,N8N58F&$::;(L2`N*%=cHQUq*"'3FAWM*e'+Nu$e3fC63/8q<SUj06j,jg$!unfmSltK&S1-VG'/doE
%$(s+!1[@%_:E\-kdg_9]^Y4Y]F@cOH^W;.YE%3t1JNd!1_5!<Xr-G+\J6X<m`ZupEZdsQ42t5Im`MPh6a9WQm]Oe#\W^7.M@l_'O
%!ie:02=&:2QS%`'nDpQD"FrL*qZ0%s*Ot;`b8HD1^!%#2d@0tFEW0TLPqW1b`4mmEqQ[nFZ="R=MB,VMBNK0+](r-gMODV+:k5#!
%>V9Xegj;2]BR#[_Wc$c4TQWG.eKt8<MlJVDbp<;nMlN+h*79m9.SiSqkL+1fTEfm7j$]Q2JlF0P5\cXp$hY:gVub"!C!'ho^21AY
%Zd>nL'La=F=A23Vg2E?>]F?@5=E3lRlcth3%Hi>CB3pIU(*6B1W3P'*!^j3FaVYqK$qPpQh/kbNq]`F>3")[]\_3-tPVFs6<MjPo
%3qQ8Gc))ur-;9mu\E]V:<qq!@Cs.?VSK^CfACQjd\'S4Jo.9U?_+:\RQ(E@[Q*iqermI7&F&[H!rLtu(aA!C3CK99oVc-Z.fT!r@
%)Cq_<!^qBP@"nD>(j1QY-Kn/jAFeIh1!Y(A3p'Q;o:[0MV5=s>::sX1"VtdqGqC)Mpm"^h[rkT[aX@d4<G8&Hp1]5@0mAi5D8u?C
%hW!=g_6$4^$nCZU=6s.`VM,J&P?sOd?gY[9I@i)_E]0T/aIJ[Tk,U]MXeR7ZXikW0"M?)9_2W$n#F3U4W!A9"ZT^:>leW\$)Wjjm
%_'Fh&_o&:q<tM=,k_\GADC6)Q^.EVbO3)ClKX<#!*UR?/9\F<n*_j6Mh%dW4&hR""`-2c.Z5]]3R<@3bAUcZr^K<X>GWL4RKg,`U
%Bn_gDMsC2Q9>V`B&lhr$;1<[0\9O/.C`XS,F?'S/'M^h<S8<?c_OTuLd>mGe>U*CQVK./IBa<djAOgu@-H6:R.KJ,fG@!cAbh0Kp
%n1nX(+K<KIH^u5<roW`Nq!bR(2c>k:#;6m#$snVd,oXu%A8k8k/l=kjF-G%:+?j14iqC'T.=kTXC'^k2BF<J6RUappM`A)B!f8L[
%<3`</d:DHr;hu+ok"Ql,>Y#mm-,#IIXL!=\Zl8/O-lDm-]$on@Q>;n"kG@pa:n\hd<LVLD+rW2cdhQ9.E.W4d-SY]]X_94d\21t\
%49R*6^BC?1m*d#`kLcLa[DBsZrKVe;]q/"pUMnfV+C@LU=MJ4g@7mP!j)T$;5Am@\!4/BB$m9=C=o3`6]Q037Sa&`sA`D0r!>j7*
%-5\p`(U"RP^8qHM,homj+B^qL0eLQ>(d%h!+>n?fNn&"V5um\`bYXG.3(l:QO>[-5W*ODE\XH7Sl>[.##kP=c<F650ZI*fAB7uA)
%;MVD`2N['6Dt%j=eLFuA\ZJ-A=e?d\IJT\f7\F0frR;<bqF'P)Y1=(jH_G'7D%2Q&A^iWq26\""#hE9_c*UCg6.m>c+10@:V:D=+
%!u8oDer;YgCi5B:)<pdHm8$cBj4r,,K[!]mI/u#]T?N:bZ%hV$lgf^&I)ss6+Qb'b]<!_h8uerBA,rF;aiVEtjJ\\0;(,l9n8t1`
%3YmSi/c^B2qBm+ThV(=2<i7bW#HaN>=Ijn=V'[.\j'$=I,UqMf,e>eV/>T-]KSh.g:HBb!:m]Z3fZ*/YB/,-,+,VaFW,kq=PKpXW
%U9iqFTK7a#LkCl<b&'k4;qWRL+K3X-WhBP+J?!Z0MT\V\&B\650c6IKkIO(#<7PB%T;u>Yl.FiHTDR7l;%.\WFP_c-EJZ=O)%7td
%`a)ffJ;"(0VNA4Yjai#W7Z`:p'J2>7J>!l#2(K99d]h[TGT6[c\\iHLEJ&3V^a3lbL5&/?:aW@r__VElD.D6c-H;2s]'rsJG'mY8
%^j#6%r1bTC(r)[%LP>eWH5dfXR=*\-6fU%o;G9c)<>C]1][uDJ8HV_\R)hmMK/nUZQS\+=f%E-LnnE8TbSR6%(K2f8>?!6\)bTK$
%T/Ij-P4NoQgM1d*0_9NOYNAhB-mOeua0hA96tGf2$eFZR[kiX1jWjuZB0/#XhqdL\.#^d#9rMAt11i/WW77V_4>7#;\1R$F5lnIt
%Qogs"=tqL3O'g/(X>8Qbr\[u0Lc0$\`[V8Wpi;BoWHQ*gVA8=7ldiou03_b5C.#tJj75+`/c%Z#0'X?5Kt1Z3+8K[GAW#&5\eis1
%i9"#u?DpR_:IV8T%b[[_@^L-O(,^g<>3tjT[m)M$*,X7PcO7Zp`3;Y98m#/t0@d-X]o*O>kF'&"JIgm1e_AMt<Fq=Aq=@8g;0<$b
%&Be7P&(9,gW[Jp]c=+[Pn,3mI]h?MH>sS'E%sjud0<,f7%lFX16_U,Kqh*;GZiZ_>90pnpk`QgVWY<Vc[s*"-OUOd(;^"]4Q^9BW
%ih86C;,X?)HVA!?7+B`R<T%AX(LDKi*[fJ8o+LbMJ*PJuVaIa_d)BH!a\^d$44B,P)b85!g@]_QcIYBo'e3+Zj)HW(=B@;A>>>l0
%]9A]r?\+(H[;1*.jZu;dMR12$N8c\&/g;,jl/t>V&9u4<@V(?dpSqH%KT"!Gk1K<tBJb?_:d`KNHN`.]\>-^n1_"F:F'b$9^nk:X
%b>`<7WO;@YiKBJE(anLTob"5Gg'm__Kq5M1IQT+NfHqH!*3I2Vc>>M[WD&p^ZK%A;:N]uh[WC],,-Bk`\S2%THEe;%:[31;f`WQl
%6K!,6hFLJ4pO+&M`Tu'-P"/E?!lNr3<GKh)KS8?%*V?Sm8U/nOq\i3E45qQ*R8<@;Rp@)eX7.oPh]HR*p*c58NY\_PD@+r1-7!m&
%^gtI>C/Dro:q&@2)k#E:0sk?8Lt&hCpY8Sh`\f)];eEVGqC^e#K@h#K2A/4ho'`o<3WN.::#CUoFH1ZTk]!XJ"4cc2o)KU9-JU:A
%>>.@SAM7Z+naL3alj"B7d4ogS-7-OG_=I[5ZUM;EW!+pO.\e2,,:]IG1"G<(Z)CBd#Le^'MhB*L3gB`9FZCAVTVj@F8%ct>H1aWY
%YtZ^LSJ2\Vn879h-k&So%r--k+[]i,9!.A!''^0_(`Yb)QQZYpmT-q+>si'MlhAWY),TZF=C51,6&=i254h*NIY<]&X_t$#jQTR]
%?ruSP*YcQrO2l)L*<omF3laf3lD,bT_]pQJ`l'OtF"d"$'G\iGm?;QiU_5%WW$[*HAb@b2>(GAN"oWZc<E6"^CEIg6G[76'Rqjt(
%XVR-UeAQ0UWhIb+31VXGmCJ!^q,mK^ng7eSfJ?eS)H]_iMn4NT<>UOp82[cjOY\R"=MR;mZ?VO5AFg:G:a[)Rgd-h5nA8-DGEqK!
%KclaER=eW%`'Mp]@2O),TBV#8Xu4tmP2k?H\6Q\7DGld><h.BZ.]sp1h4qN7Bjkt(?%Wae;KjC,bX3E:@`:j_S7G*!pK.#c"3no`
%fa^\TY,]5>4%%MMiE.OaK7j=iCKqKYK(FYJD(9_8+3Vtf"SKqe"AQqZl>W/[XY_rJS8e$Vk44CP<?e,u!U54q.qKNT^Meps&XO/s
%Q/1$O7RI0!<dG(2!#_fdgQ_'bc3O%cEW[Ze\Q\0!c(j+=/)oY.GG`++fTja<Ghrm$@UUu02;=f+biY9m1I\+:J-@.H5$"/;RMd15
%RAMQ32p]haPC^fE@NcBECsDgaf7s]3R+%PFQe1DX+Mh%ne<L5&8obTi)i(m>1QbhV>=P9rRjJhK?H]na`m7gh_,N"JhD4`@TU0#]
%%?G;J)&;[/d?\5gLo?h"4k6s-SHSH?=;i-qle4!19ora>P\O;sV)806@EX>8G%T=@&6tH/f>dM*cU9jWI?=.g[0b\"Dr8fm"\-]$
%S/.B]GG<+NJ]`dC3Q&F$o@nD(;@g*\3:QPb266;`hrJI'3o9/XW3[0TDot,UcJ02.#(=UE)I'NEZcag%e[Hj"X"Oo.QGlpZlSI[@
%^Z\e?J^c/g(EC,)c5%DdY08u-MnKnU=C`L"Rbm2Oi13_\2kL1j(i*Q5H*QYJ6`^Nh#.lD5he3ph^iE=rD8iGI^A61q=EG;iIM0<$
%:W$=3/"/E,kQq#_L[$`u0fuACRm`U+%S>.-9jF!\,TE[e9SNphBdFN<KUCi#itU@-!>WPq,ptL1SDBhUR5&d"]Gq7b95%Xs:#=='
%WLh%N.Mpa1,)E.8$eT6V2\auKG@K*5C>%iX<BZ!=M;H5($aWrTdtj<?aGCs4\Vr!T,oF4mS?[:MQsDLhJ`d-2Rq(32Kc\alA=VTj
%c[=u0Wm9F?0@/5q'BE+E#s]u*_j?E2$%X9?J/hb^'W=YH+Xcsf"'n9T&5nctdXrhN%<CrVS)hEG)5ge0K[[ro$<Vn;Ksqd[%6GOC
%9o4n=/=q/>'N5LaZt\Q(A]!RGlL9XN,I3-&q8IZ&G0n7/eg*N)()p,HQGba'4q_dje%4/fVW_RZPch91KA-0L9f1dH46oTNE`Y0W
%6?O4Yg!$raP(f*-$dI4!iE7WGaOVW@'%H!UBig7b(MYKN"Hds#Xoq,b(PE7=lP%e'ATHbWGHno.I"D7KS(+i,Sd;NKP?,W+1d(uQ
%`9)G#N&9"1;!_J^ai<okhKkmTr8juP_Mb;-3>hi]2J*\Tfi:8W\8iBei+U6jTO)K.267us5`L+=[o^d#=bj!n]0(_>gdq'<V--Fm
%UnBZg"0iIAJhma95GSUa%*!,*f6D_j(gUk1jr.](3B)>^91\\gAf]N=#,CE'=c7m<P$3dFEG0mJR?5kX$%Yd+?i_W_893Y8d1Aq6
%p$8CS342@RiE,Uu<DBY&*g5LB)f0sEiC*OjH<I<JC:,0ANg+il@69SKBi'^$cY/#6`%DfZRVnk9(tT=3fMt?MP7I*l,?*X9I9U_s
%;jJ^Q$hR\-dBB&#F)\&`b(B,"UnVFs`jWn!NT7-E$\M\/==0`djuJkV8F:`a<S7*6/Q\V`f5<U7P0o-Z(V5$b`/Iq5"/mqT'rS\.
%23eI5d2:_3Z_:W^(JU&OBoT7aBm?1Ug]a"Q!6/,_[K)e8=[-h!?M/OlLl\@[=Ih$t\&:0dPLZ!p7Ud3!W@c9'KT'7R!#S['DobXU
%Tgd]$V'9HcBA4ZPbBkIZZ8'Im*)nA#4/fY>j]\d:>IM"2%Gb::'j:p=3[u=ijcPA1bMmfIOnj@[p8Kuhp:)gK4<Pl)\Z,_B=q0*)
%23,%F+h)[^0iACCNg^9*mZ<Bi]^."J]$t&?=,X01a9SSR;m%>PJc8CSE4goB`12qak;?AE!.VqC7IqQ-r5//tX0='qfr*ls)QT1K
%8?bKT/1pEp*Nq\(ojTM'0X,0)C>tGRSRp+`3N.PV4O-_RE?CI7/KGLC;7lY?85YtD)-:shG)5r0LU30I((ac:V3d<@@D3*@Kar,`
%iKGC\A!D9T75'"I*p#X7EAlg:8:\"o6&"K*/.!26*-,X9S4tQB\8+^'4VP0ti'Cq-pfnu*q*p+3$Z\CEfI=V_"N[8\hFS^!&_WYi
%h?"FK/RJ&:&B1TW(i[[]f;T&Gr[*"*1BlEq:7i%H6B-&)JsQJW9b'SLb)0,["kkfkX9+lD]-YC/6PQOE#`;660O_5edrnB2%>[;4
%MG2YK.b^PAfK7%[NuUh4Ik\/t6"!o94bB%PFNZ1f]MKo!*R90TlR$*]4_EW5["J^MR+>a&f>e8PLuM(nI[_`8A>gTa+J:Bhh_\sX
%bT6PAU9ZTn&gkrM]515oLA7f&D5<?-TBTX%@[i@qg$20uR:rFsM`K/9fBj:e)$=<`-q0^L!Hs,s/Jof!M[iR5?:U*F75e1+!$oUL
%TaYC@$hA8Dk`RCrO2*1\FbQ%!KM*&39d>9Mk#`b5#IUU)K>7t>*<t268JariAl8mP\ZsSP$5>[AYqS(VQFOk0&Xpog!7\rs'X#W0
%\%;tRaE&"!@U%p\M]g3iAAJ>M6qk8G.Qf:Z]Y`:3Ff(&)*0@<Vkn_3N(UkJP*+W@7ENCZ%T9`W!*Tq:'AR&>B=uHklJ@p:!P;K1"
%hNCZXDaO/$[)$GNjmRnp'p+blkG<cT@QYtB)L4"&7cInJ'"J(IRi-%Yn.qUZ9XRS,\jEc@.f1;U!s?=hXN[%WD"ZF3Unu5J9>"M8
%d02P][gDTq9#fk](^>hX@,1p0I<,/SCZg=JHPZW2WHnPT?jkI1`&i)TdZ<;;:X7c%e'hC)h9D@k=$ThXbq7/'!?o<eg?5U6q6QdZ
%^r@[*U1uu!rngVt^Oqs5441pd,fr*qAo7\s_;H.1GTs$:1sLT'SLdo?;5IVD,pWiCj"nm5,/IEUIW$.!D5eo8Ub$`uO<,#I2jSc'
%IVs5KJf0V*,Z2]^a@KgF=U-o\OuTqjEm>k^l*F5'RNnaGWMsR\RM5@0$Ag@hSPkmAc/5To(0!`dZZZRsnYVejpV-Ak*#G=>`M7hl
%@TW[dMkW88IO#;$qm<PpBp]bO*`C0B#D)Z?K8S$2(u@C1NDK7b5lcR%"9ZLkFPh]<'m9U,.UnYkI@7P6NgJ9^WZ%@o.VsYJ&E:pu
%6UN2Qe%<JdMRc;4q9TPJ[O+*UI97])3ZW/X8SJu/%B,I919I2t[As$>R['?Cl^bO.U4aYOh95Bo()r+/):U9X!2'O_Vm@.C87,-5
%=_hX%P@oDBAO0&sK!4P4XO[u2Y.>Xt][7T3:Rs0+CCL9AgIsG%=F&0-M#aB8PZl<"L1%6%%iND!`2)5`Oton&ZR1N-&\0Q35,Hd`
%`+h63Q[*o%`^ruQjb+.E-V?>V@me[7VFgJ`Za1e\]:?;p#rL^Q1+17"Qgc:`,bnr@`#10:Ejm#3qTbjbh"6!t1C@,&;F:oU5tT&G
%eV^(2F!at'MfTQV+4teJR+7rZ9fQnoM[=/QU37Jqd=.'g.V=3(;07(+6)iEF".[4!b!Lp@g>O>-#>6hZChC\]q(;?1n])&Cd3D0K
%,7Rmb5eVQGD_.,$77aH:RsRW)X:R<cJV.1UI$mE4D*[LR_Nt\[1i$\h[F4[_S.M2ELJ0)O(l\1O>&qj*aYkr*;c+^JdEEpD0,Pco
%URg[W("4b.k6Da";_g-^A$o8A9O)>sKqX`0#&8's!$JmO4BrA_QZknnc7TbabTm0Z4f2Df'V##sfV'8W)c3m&@c8([(RO1M0'6aU
%;B6-E5sHVP,)uFLq`ME'd-_O`$u0mQ>DCo\Vm\'/JgDcKFo'0t2K.i>R:pG(Fhoi>?*qs/0O+ml1c,*GlquA)1U^6P6)din,(L6H
%B'OQ&s)4e&.[gXA8M,'Y@?>c-P9\;iOI6poL9&T8:mR$.o:Y7Sh<Y8s!&\O?%"^%.S"9/MksG_bAYKL1+jYN9:J3dK?B\q3$T[/f
%\Pt,T-)"jhecf$TI8QOLZIneUJUshgV$W+N@M7qpC!,3uM(7@eqgrocC=M#\O4%`ZG%W4_8[G,KY,<el0u;G/Y?a3l0=,+kd9CDu
%0Z^6[c>p<4Ob:/JX!F*2,F"Eq(BF;5AiO1g$Q6Y`YE=dZS"lO@#=OEG-\a5ebd`FGn%OM.JF]'jBP\k,h(GU!&BCP0':Su^_3??C
%46l+M&i4N\q9\IeCQoG$FD>U'SKNYHUmFSacdLGtaj7e\lK5EXC&pBV\B[%DJ93c<M.<(^(?7hr'%16JH^<E-:_D\0$6`/lYmu:6
%QskTCJHq)?M1EaTPdXiWr*6pYNb:gXC(FP2RbaQK$/h.lKh)pY2V_7dfRTMX61MO1(+V/)q61&Kg;Pc.5k(=(IVhOc#Mi&IGKAs)
%@:2fAK2b/-AE\2D("d,U17HkfYXiiXZb;Ncm:Lo9;G3U./'r9P_:KUri8DUQ//Uc]7iJh?M/o+@i,M(-&AYMPYd^:d3WKP$KE]dg
%Bb9=%N=+5<73^E#J_58aFcO#Tr5FJr,]=a?.W6D*ULI>NArbPJMWidDF^14E6$f?`5KGIX8T.O#U$iVY2U@h^X/2pER`\1'^"Ul*
%@EnYk5-MMbS1*p^4KpY)!nnAUW4ncLRDi^chcK/c2jLWj60`8XWhs7tM$XAUdY)1:&Rr3leZa-$&8Fg)[&A&?LSQ4A\=$\>jaO#!
%FP[s2@X^:cQ@_Z694#Nl_Rq%\`3+%lj?Y15``8jM.R'TaB>B>IA[FR[,j-p&oiZDiQ>SCVcd&gT>7;H/WjBc'7'+q99<B_iPc#fQ
%^G--eh9I^#B"o+S[=c<=-:;;&M&fNjK.qpZMk>3=?+V.@dmGNF]hK:1JP4F+fh+spX:[T-kK+cI8>PH0R0:mW&ZAte-iajG^'*Xf
%nd]8$YoR@O:'HpfoI04l4;]o]$Wj!s?950QU;dta_W5u<+i1OgcfOJon<"uRDZRfH9^kX_1RAMo@!9N'NiZj0$a@$Pe4f3k;PRdY
%YV0]cXp5_B[?SHDP+B?R@U=[t]LBL6ZWXOe#'3l+TN;:5[ni9gJZ$"kaIa9a9VIou*C2L,r.n`?73_j&=7uEtf,,L<-_jrc=lTLU
%qp1H='i!1@2LV'8EP#t:MHPnVTZV^q'pj2SU6`&)q]6e])qC=^D3!rdS+OPQn`6;<fMH[S09M4R!;B8D%gHP.1n#I^T45WI_)?:E
%TkGhPfb32),VCTXBN$^5]-4D<C(=uLF9ss=;RO"9:gdSu64mnZ,cm;#$33&a1(`%aq?Weu;O-/PA;YB5Nb_cbUEgPeWs(KiZL\KY
%amrU9K@,2p(4#7tW(;)jRZRS8:n.2jaj@C^<W\J()T;X^J.\^u&'G3AI0oM$8YF*tkp;\s$%aP0!__r3qcLnRd$\EO(HJce*P4^X
%-:-IkZQ2o\P>FB@CKGi1:h?H<,jSk2.r#C+7q.=0T2J@3TR'>m.#:%\<N1S?LuIg=/39F3j:CGi&rSR\M*(c\CuMPHgiSqIRG;=P
%2$K:RAlheJS\q9"?;5O.fIj68en^jDH5?rEr2<U3#dZ[R)RG0M7<RdWl<!OB<-1:+afZdWSLK^o/5nmVEb#gc\+q<o->g/SWZsh6
%#+'4Ym(6-$]FmMQ@E"#]SO7/rp5o_$:'O)#mN]CB@PH1ug73dT+]i<.lkk&.JjjBDI6sX?3/`f<M6IkSc`XWl!(h>9]Q]=kG*/-d
%+F:E-7$tjg<TR+E^$32H\DW/ZiQ13'Q<9:RTafLkM,gBu07GUNMTgYR3%Km)bQUJ-(-Op7mOjm09:^itbUc(GgO:o#d9"/GUc_O\
%Oi/G?X/=0-%J',R_VEHhlJ-(U-+4neT\-@!9csG4\;l#r\/c7A/a<=GWo+eg7^!g86BIF#Bn/%()2(3s>I5r5i0l".,q,Fl2&]E:
%jR]P)>tEMA=]"E@qN4&\M?j`b'Ln:b4+VD6Elup9EkO?eC\=HP?t_28C\3MgBg[dE;K*:aIAjtiZt<BoirpJ3'q&ga(#tV_WJI#[
%is-]Tp$iZ/5h?.4im$7W,umdY2?<cY!:E^b>:\F8C;Rape`R_d0(F$oGa0P_+`O2')WMY8'dbfU+f.Mopk"_RE8[D/.V?=Ue!1de
%,nG,pl-,\b1_p:;Z#.k)SYh>kM,K;,dW[aq8B'8O5$osq&]Nl<Wmk/`.`/.!ZHpS:\$cF]EFgP*P8')eCK(u)Jc'=!>:<,HbpN9(
%N*7'rbMMm>/T`Z]QaUe30d"drV9Vs.U:R%eP=/o%"IhB%1)"]:Z-jNl@#-.hl0/P#"oN%&"p]B[ZnE:1Xs+^u-\K9$3W7TE1d5m7
%WD?KmnIUp%S_eU%j=HF,)*UAmJ-^dC7TBO<W54c*n@^[-L^^16,Nra&KS!bqF=*auakQm(W7j>3WNJ)u'X]2BO%Vk`d7bTC)=G2(
%Q'sPs&*V/-:SS3)6;@;:J1%-*,nfOD=>(8?+OO`POh&YQ@[V&_,6ieB)'T3@&9ed_JYC"aoT;Un(MF#1bC\I>Ag/0&7$V@o<;d^R
%n8*oIBQd4CinJ(rU<jo`)@KCfAZ/<7e=[(f5fBCLH;GP9ntPg4X"BWrX>i2T^67]#:kL*UB;AP3V5OSAM+=B(XG&aW81V2.Ya,j"
%?>CH%KAUl!\uKPAL^R6p'K@sd+6`A_))g-#ieU4W6mca7Ak)se<?EN@&7rgAUV<eg9Rl)Y'\N]0Y6nh\5`6JShSr")=jZh3*O",N
%=;!\+o/%7T&@\^1rEeDG$T+M+p5[#Vq_sT)O!!slAU%M87pfC."sqgd4*(7n_;lhg4ViD,HF]"SOEmVTKPA$$UuJs_4*2^%ffP=Y
%D2&59qi0+ee?C++X/TVe7&]E5M>7mp2h5r:_ogi&rRbcbZ,c_)IO$Wr>+AE9T/(q)\h^E7]G&d/B9eo.M0bh\lIp'FVH]/0>rLG.
%BNjs_nHl8G.*-"nL753k6[oIj"E@>b"ttjk%r1Lfg)#lFop'r3?-T]Gp2s-P$lc<_8h1dBmicjp#qBXuq3lJg`'@V:0EuSt7*F',
%%eXO^&aUujI\A'pS;g^A4@*rsG4dK0+F4K=A+#;8GL2I(V?)5d>W,qS[B'qbAoHMBF->iIa&V]%(!X<?2:ZBVE]*Sc8;o?^0&+F\
%2tP$7ahDVNg!cWA5]Sap*q9^e_F\8q(LWi.4O.X#E_K*,Lcq4O6CmlT;-kDJfb2FVIMB%12M/Iuo>QqT2ZiPgA"4AHJoB)qh00XT
%fB%D#VUO#tJk?o>-$Le*K,OI5-1D9]3_<obW)9;'E@M7\O\henc&JZ7hLoQYH\:]k&[cR!bHEi+7OKK_6YRo2d[mNLiPEoleY6Xm
%+tE,5D8aJ\^c[9)q-p,A`6`%RP3!g<F0Rg%b$>1F77+gN)/OR(gfRL0!,%E4b<j;6;Chte@b^-Ro(uBWY_5L*J45kr:^sub#l5Eq
%]mFgke[br"f>:d'7A:b@EM'<!N@9<JT_@(k?F6238U;8<D9'M\>>ff"[aTZ00eF&:Z</@u-`0M/$\?^<<.sd<:aOI"<`$?A*o.c"
%)H)+trJqGfJ9F-]IX5Z6Xt!KfY#SIkTNLM_?EtTDFMV[VAjk,B4:Rd/mLFpC07[Vfm6jgc(oQO^lWZ4NVG0`3B@2fnd05Nm$Um@E
%!H5f9o'*!6>H0Q83guP878loX2_b*min'j>#/!?P"9kA0G"lAbM.T(6`ZPYTHI7Vk!S5nip:9TTqR%U<Rab<\gZ=eO7B18>)60fc
%RF#KnT:Z:LNt#0G$;M==YX!&p0O-DSO51>\c.mKAoYTmLqBUe)]kQf&--pVNQ=)3YEJ([CaAL>d)Y/%#db??AN)LVB%#9"A]IRJX
%U7OkLl=QaZ@LF*_Lc?`Mmi"m(^"Q$oMmr(DqlUr_RFm7!Yl]R$j2d)6e+b,JG!IuZduLBl(c9AIQ=JHEn8(e7,&E`JibKEn[,&S%
%I%NchM$Br79U=1E&5u:=fBOV8RT(l:f89.QQ41k[-b:l!E(S8nScaY('rp6Yj7-*#Bh[%3]AX5jA;>>*&_jW7E]i43%m:1rbGmYG
%%nSIIBFRBU9$0<5H@a<1M3ZUnJj##KDR]aX50XFMF6"eoCR[IG"l+a@+WC96#Bc8T,%>pt2sPWXf\;Y#0\NN08Q'eJ@MFK`(pZ,j
%CM#:ODq'%HJRM@iA8o64]O923>0\ToZb;lk-tH+?0FRt#%&l^g)02CW83@1k9:Zh-4H3&<*0[_^;4p!:/Xf+fV)abO26UQc%uW04
%=?Re?.kV"V/5B_1Y7*mAP"Ck"OXZSH4M-N>.AY`JM4mX*75;/3140_m!%_`-7Y0h=V_fV(e(aZ*<6VL2<2)BNj!>dhhOE<=*8"p/
%N$8fe+@aOAJg2o/2.ZjG`ALX@$>A5aE(%f9!``&u"'eLUZ@&rh&.AbO:*bW1W?^skSg;.VC7Nf,6:+XN6sRZZRK&@!F**D*M#\s,
%>fhba-mnKM$Pb\i>$2,m"MmPBiI7Mo,<rk7[PXpX?'A*Z,nV)1:X,QJ@?krc).q)AedPT^N!S8sRReK^/g09u4?F6F!ZH$JgBmlM
%KiYA-\/Nm0,?-$+o#daQX\T(BDJj6f?kiaKc4^FC<EZ"jQsM*)N1'=gW%gAt!Pis!gOK\e6W@UF-O%.+F>mFEUSqA^R!tht(9UPG
%D'*YnTGVj("ebQCk)P?@&QrYt/:klhmi(62Eln5N7%@rW)Y2@e/h1r!AP#?X8DBdm(0<6$RKYg:R\KnFpb\sUX]AOl2/`qD$8hms
%^)24E%R]SJ>"_CY9gP'j:a),n>;2m$Y(kk?T^Pk]Fg)8;dsZ3's+i+R-ic9=O&e/#ZIuOr`!W:+Zs%C'b?<]@!GRg>?[&<V3Dn@#
%1N;+*1^*^a-6]4g^7iBY>=MO$!.D[0h??VL;@\e>lUcaQW*;#EZu?,?6Js3LSW:&\juj/'%;(nQ-)o53L/WI9ae,MK$@tcRgiH"_
%Q:FDW>_B\f6'X3<%M";l2"1$pBH(_ellfmbM4J$+.g]^eN,t:m#Wdb'[p+C>3'/tm%-c4RG3fM!Oc>`?oI`K'V'#rra(RV6UF="C
%A:\sj9D^hb%NA<E"hP1BYB[r%5Arq;EPWLZSn=Nn7plR31oDK6:5e"k>,4bPW)_,Nk+?lk!W]"&B%\XgCNKeX_N!a_<L]a55dc0n
%FNl/c$!/=slEPGg,`Qmaj)k3LGa"k"I8T/bd?p@/60_1o2-f7alN$Y,%(jC!m9Q^JSEL5&C3<a1Eoi.9\Oo5DH79(ga@o_KC7;?F
%9O!',+h2bBOU16;XnX/EYR&a7&oZ>=Jh"<%%-l43*AWdi@GsuT?,(R9)po%^F2r&]4;`$,c_sMm67M&n/lB(YU3Q;XO]0tMQ_pRn
%7r0Ch&E;o:$q4&(!15+OiePYg&eWi#:dAa"baAW@M**A_GY)WP.ZbEOG>uVmfPoVVXg/-MILT3[FT-*nS#uk+W^IRePK.'%j&h&<
%cS=uKU-/>8:ogpqdo.b%!8\RPLB'1lM>YVUh60-V-erM],^Ctnl=D\YFV)KC7+X8Q#76i5M&7%e`@L`%c.W=p,q2hdkD<H'E:F"b
%^RA#B;5<&?ZX58@GZle(]Y5GXq*/oC'L8LE[)4k7P^lf1GHD`4[HB$^S-CdU3NX'OS#%XF3Re]HR:\Q\S%dIdUlk/R6%S)tAceeo
%/;#pZcf4/9O]$.sRr2B!!%8:'!`6[i9F%,L/q-X/`nM^bg.NS@'QjoZZ>28fM0-:u=@\DU%\t,&^BM@r+mF]\Xq`2m3K*1D//1<A
%KWkHN&1)2q`)NOc=@"C/C7geQ$Ruo$OqTX6ZY$.f%d,>PQ*9Q/)PSrK0r?q[DF++RF]ll=+[9)OY4+B>e-[`__3++p/2sQI9e)'r
%^G@%`"ri*^c9?13PnS@Y=/shoj?UsV1ftttoB(R_iq56mAMluiFD'*jq[=T(UZPsg#%l5mb^=PRYr\qG!d-($'aPEB&oh>Ips$JJ
%eFMY)X1?YnZ"/15$_gT(XE<KE?%-3ooa`p+*&Q,;j!?K@,Ocs91C"**lH`;NJsna2c;[8C,d$EoXHcB_'bNuZAethI/>t/H9Op@T
%.e>W=?(OJ-W^Mk[efCA^5)"]jfPN=e[(+6)ouH]_Y2:!fV]_Fu;/JOqRIgf#9Bp*+qk.(2=q>d)ADPUoOQ7gB>IT?h&]IHt5c+Qh
%3mtALI?Ba])3(Yo26J*DY*,LI%4$s8@OB2"FJV";)K;^P7$gl'W.rEW)mi'P3ZnS3p_`-TCWZqbPQX,Ub9I2`,g`c5Wrqn5g1jZh
%',f?#=d,;1ZbR4">,20p>0EfFh<.pu_DNd(>$68IM*_#*j;bT+7>.tjPo^*;>8WnGialWl=gc!)@%6A#ikP5F6,YJJ]ftS9nS`mT
%DeNKdI3!#.Sfoe!IXfCo^nkYKA-`sl1Y(og+PW]@6QrD;AjY)35i/H6Lhrf0WjY<KClD9DD_BEk]NY2598ol&=Uj7Ph`A<)IP<,+
%]OrGfp.#GWc/8NL[pT17c/3pIh;A1eDgq``n,D]Mhu;HhrSr+ZroT!nrq_E-rVg#lW2JPOo:Nesj.H'!B?fl)bBL`$_`.VaIsh!g
%pWKnnEKTu+5Q(?JiBR80h4MIZqY1$A^OQ4:5CWRKTC#Q:1WN$M')hR^IeUI(SKES@lnWsL^4#bC%tFTPO'd<ceGo6uDu]a=qH`#"
%%KPbV1B4tgHf<hqqk)dFo=obQD]$X#s7l9]Io?">VqW9(r5miGrPNQ's6Up.O0?=up5.FCQ[Ou3/3(%GVWiMYa+2p$3=R\dUdZNE
%K>&E?d"Zq+H)G[/_hMjO#lEe(q"].H]i2<b.V*$Cl++Mg7;"!UE6aad<J5/th`fpZ\O8Y!P@+%58+!;*AGA@ISn`dQJH,O[];L6.
%&hDR0KS&VK$#sT#'3im0"-37bB,ibsr'<b(Z9/YWb*<s`$=2:J-UO%)=e[jT[7#]7%"jI&6q:^I>T0>)D9$DbqKVK*P5AWPIb@O>
%[@s=YiVS9IWY`6BbKkB",q@S(GIf#Lkkba?'elDu%RI4`97Z+W-$:EJX09L5NV\V?ktB+o*8Y?BZ:$A2Cl&GN)$rXhRmXPNeM)Vk
%CWWAe9B$SiID5B''7E(l^[.q\g/Eef_si)k4iNM$`)6G;pJgLnc:&!Q<8]H[J&d(^L0fO.$l@<`YjuJ/$u<B\m2HC?L$Y>U:YXCX
%2PE34gRo`K#*@0MTY:^b'D6'XKi(:[f&Z5i]mEEEK@0I*2gsI;WlX[X]%nX7aIfl_k?&L!:LhuN2OpS^?kI.uc6iak?7r1\-nl%2
%Y8^*5]GDQO2c[rq*2k)/A;OXBfb,%*0j++,^<%[i;8(2Vh-2Y6,%NS/pjDE+')c33Ib@XA[AT,HN8aYeHccF^iTGSUNJ"%N<R5o1
%(Y.<M1D#(1[se>jWbr'7;)/UdVX_3pN%.:T!gB[HmIRc>/C?OZ>G=G""#9-hA;Le1$!Ai7WX.8r^4!_<EYJCZ9RbYn+1%k#ONoP-
%T@2MMW2?3YSr,D/[gjO7OD+UkPl\N`JK:j=lq9-*,$G/q_HP'W;WFdRm0hf8YC6d\U,T*[7"jn8TXiL#[u1GK>*m1RXX-HeQE5gZ
%TC9I#U*#?9072uZp69bVI%To"8tl0qpCrS?Dkd@[Re-LT3sLRk'*0Kbps#A+(Bc2FQOpj0[HWW"2?D;^FQ*'V;5+dsB8PKEg(G.+
%0oFMJg-nX@Q[3A&;+8RWnGVs\P=tP#1&5BVbrnLG[)YYKl]u"!6$T#Am].EGHJ0\Q*4kNMr0kbGL"d:u7q$_X^LQ3@:@PQZ#m]J_
%Ts%JVEh4!u-M8;i!iSp1Z@.aTEYYm:hPf-@'s]QWQ;Te5")2$bMY<>a<J>5uh`fpY\V\$BP@&L_8*m1-^eKdEVqY&p13iPA<r)c3
%QP?026SPI;VUgTV%%J<WkL&-,,esZ9*!Xg+`)&$@;2F467HBtq=<AbQajmHINQO_hKT-u.#*lEL"noK!fG^G_Q*E2lIXZCb,i9-O
%0AG]c[Lk2H5N*r(88><pI1NX`lqPDJb^;2XaU@k^hqp."#VL7OR'Y"U?rjF(;OS=cZi\K-WT$_H/>s,_T*&.pKl!JBWj^t-o.WrE
%JNQ?A'&C-b&j0?,<#)\W^43k>EYEjc-GSoFO4[5?d?YW_:Ud)[P!jhlrH$dlZ(X.6,)M\Fk5-[(_M=?Z<h`=45/\O8RTDkA$O%5$
%.ZFFa'WEEiq]+:EZ_EV>hPc2Gl!U.iKaLtW&T_hV<_JB$6FMVeTC9I#U*#?900AH/DC?t9ksI"L+1S)5rS!>Mpp8dR[4R'\L.YrI
%EKCY78gar!(c,p$`UQF>MldD_:'XeCC?,=O'=*$mQQLGc]hu0`.\uKMj(:WDBLGWhRdJZ;-)udOm-Wi8LR[)r!Vp:gIEZk$nPbD'
%VqXtgZ!?,2f+J[B"t3%tN$"iFC6ZZ^5j_50;*C].V*`T1_h8=g]t!/u<N8G8!#Mu,]?fNkI7s3-eX!.q\8TqJq<Y_,!42mNq:f(^
%<"ZDnI/A<[j:_E!9RbYl+17lTN8CJe;(Ui)ZaQ1+qMjK4m;YWDUSp'r`I%eR&qND=*qif$Ue-jH"DDQtAG[@X[0g'2GNorlF><hg
%X[4qnVG3X6fp'ghiTp*KP=tP#1&5BNI?_nK_8/V`\t_AQCsm[fAcM"7&q-@l7s++6!5<H93!<ka4e\h\Klf^1(f`pCU0T%bkBUAp
%]BG6c8&lYZB#':c\?<UEesVW(DG-h+&@X:Dp%dId-2PHFr3E(]Ak.8oE9r@K-%>Pb'$80N=-#Nu^;&)8Y^hQ-NiGRG3p?_KeGAC^
%!Cg:Ng%l[7mS&J,OuMCoqDmfU2:Go;K#]0=ZuK;TWt;ZRX3o\B>IQQ%GD#G/:AQAUcZAS>h::QdnaSEl8:(iMdi;]=X^eS0B;M32
%ndU59Q&j",-q#Nbd#pX:!:#ZFg'IaS9`TMbJ;KGS;un4W@7m1M1:0+T)bRC1n['H1Ca,+.jPEDFW?s.W"GU"U#H!:JirV&-q8Il1
%eQJlf978RkN9<5jA:pD4W8.HTr0oC'@Rbtk:qh)#UK0L3jamIa.C'#!0rgHc+>mcIcNGT9XCDPf0#b#OGZ_cZEAN?5#@4D2a"!:(
%qKd`tL"(3DQ4sN2n-U:,<EMLt!%:=@djcO'35U+ZE!"ZgOlcb`<_H0h;ol1`&d)/;b;I_F_"q=*!nu]9Qq5A26060cSI7Ya9!_.a
%SS5r9S!X=G6r$^P'%@744p3TtU+@NkRGbUe+b8fRCe#T[YWbf+U5Spp!GE]`M&GM>pi:'6DhDK2-NM>3_<=Z#eSt@Bo)IBcf#Agl
%!NY_rScVr;M4n-0:`W5;.KH%_WI$n0OC*rc_FV?c+?Xp$r;bV^Q`Vbi.Y*1';'Q$ZPe*(TL0,*eM@"oM\8um?=a^M"6.3.ES,kpq
%R!%/:Wfa6]N$tpnTOu(sj_F9_jG$!qCh-KU:!&]ce6h-#Esej1g?5f-"pPQCQ7EH((0t3]<`,Qqr&rWb>ie/nI?B*:YDb.S$<pnT
%CXX.0#dMb1[N"Pdlo!%[##_2FPso7:Pj_UA0q9e@ELNA[We!F0m!O"[cQea\(MY>%2pX*0#bS4)L9h:V!j%jK`PFslS)c/rMN4@s
%FeF!$ApJ@($7Nf:@e)KN-n`mu*>S;RG=;Sm(r:l&bnt-=S37X#Qbmr[KqPjFp[YBh$p?rI)`rtL'/Y\FKR1-P_M4-,J2kbjV_\^j
%M@<9o[]&4)]#'m:)+\_*C!DpcD+JaS1AqsLbRFC^&7J9@(fo.9OL-7n4S624LLc%`b$#.H![tEM3'1)ER0R15U`$sQ[H-Ho(!$TP
%>\1atPLJ2ZZmQhJ!ZqbLY1&L?C(rL!X=Cd'80,l</%#V7:'E>;Pt_CIM\KbI2$f9mn4Eh,\2RVb`?i8;iM)k#q"s-S&QrnNUCgDe
%'0U&5fae7BI%H=2F7%LqFkSN?4igO'.$pF8NbJgko!&O$"@7rLg'/3;@'`7&'<i:q#gjdK'G_P8Je^9n2^`OlH^,eH_"#mJfF:Ze
%cB.L@EHZ+mTGCM4[5t5q;92Y(g]9Jnc=9e[%P9!.K?*g2\l,jK`mP<u$QCBo9=MU(UjtPl9m/*pfEds^>:-^[C]tAd<Nu0n2mc4s
%-&/Kl=\`(cR^9USA?5VdmWn/lTNg4g.3f3s1g)[BjlW%3M`eJ_SHt[<>06*9FsLmhE,f$VYWac$4Aig8n.ua1"ZHM=,TnZ/(<-mY
%1blTBKj@@%CU"&"@:T7+)/[mTOA+465]Qm^742l@Qo9c?eoJBn84)?W@S&Qt4D83B`!NLY@;6upS4*F`V6q:+oLC8%As?G[gT5N$
%>8ot0)qE]/7tPl:Tj??KYu<.ke2iN0&-PeuS8bd7U']=i5FV\`GsRO$'`p\OMPt3,?O*<LV2V<Xf63f8K'=.\A-G&kN#_N^ekJUZ
%,i^$,-Hme]>8\)0U=LJS,m,#I/?pTrN7cuUM0>(j3)E=lMU6**3#nH]*K_bM46.#!PuQL@!&][[oq\X;7288lUehS.(Gq65LiuMX
%\,f=[EN\pkUd]jWG^RWr(heIk'WU(3i;q<KUin]["f4MDhQm3/!=1YZ%El3lFF@[gO@O6+7.p]7D-Q=Y<nsr(47p-u(SIl/!6;h1
%nL2I72[b]]'K-dC/u;6hp/Rf9\C=_5Z<::+`:a>W6g9VHo:YL7%JLga`T`j!Kf:D(&bXp:^%b_clCDa=!-@[TK9@aPMEDB3@'1iL
%X2uUQdHU2HT["W`#4tnTT7e<aiU+Ag_QWt_s3#>0q!IJ7s6n],IdtB"r:N:'rO["JlQ<n@DELL?oiJp*e(=WkgG`L>n,o9Rhu;A<
%^%pJ+^\uWRs7"'Ihu)_Gs6q,'i/d"Br:OFsk5YA:Ie?eB$iF.H$3~>
%AI9_PrivateDataEnd
